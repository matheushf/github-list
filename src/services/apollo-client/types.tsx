/* eslint-disable */
import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A (potentially binary) string encoded using base64. */
  Base64String: any;
  /** An ISO-8601 encoded date string. */
  Date: Date;
  /** An ISO-8601 encoded UTC date string. */
  DateTime: Date;
  /** A Git object ID. */
  GitObjectID: any;
  /** Git SSH string */
  GitSSHRemote: any;
  /** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */
  GitTimestamp: any;
  /** A string containing HTML code. */
  HTML: any;
  /** An ISO-8601 encoded UTC date string with millisecond precision. */
  PreciseDateTime: any;
  /** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */
  URI: any;
  /** A valid x509 certificate string */
  X509Certificate: any;
};


/** Autogenerated input type of AbortQueuedMigrations */
export type GraphQLAbortQueuedMigrationsInput = {
  /** The ID of the organization that is running the migrations. */
  readonly ownerId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AbortQueuedMigrations */
export type GraphQLAbortQueuedMigrationsPayload = {
  readonly __typename?: 'AbortQueuedMigrationsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** Did the operation succeed? */
  readonly success: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */
export type GraphQLAcceptEnterpriseAdministratorInvitationInput = {
  /** The id of the invitation being accepted */
  readonly invitationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */
export type GraphQLAcceptEnterpriseAdministratorInvitationPayload = {
  readonly __typename?: 'AcceptEnterpriseAdministratorInvitationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The invitation that was accepted. */
  readonly invitation: Maybe<GraphQLEnterpriseAdministratorInvitation>;
  /** A message confirming the result of accepting an administrator invitation. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AcceptTopicSuggestion */
export type GraphQLAcceptTopicSuggestionInput = {
  /** The Node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** The name of the suggested topic. */
  readonly name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AcceptTopicSuggestion */
export type GraphQLAcceptTopicSuggestionPayload = {
  readonly __typename?: 'AcceptTopicSuggestionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The accepted topic. */
  readonly topic: Maybe<GraphQLTopic>;
};

/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export type GraphQLActor = {
  /** A URL pointing to the actor's public avatar. */
  readonly avatarUrl: Scalars['URI'];
  /** The username of the actor. */
  readonly login: Scalars['String'];
  /** The HTTP path for this actor. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this actor. */
  readonly url: Scalars['URI'];
};


/** Represents an object which can take actions on GitHub. Typically a User or Bot. */
export type GraphQLActorAvatarUrlArgs = {
  size: Maybe<Scalars['Int']>;
};

/** Location information for an actor */
export type GraphQLActorLocation = {
  readonly __typename?: 'ActorLocation';
  /** City */
  readonly city: Maybe<Scalars['String']>;
  /** Country name */
  readonly country: Maybe<Scalars['String']>;
  /** Country code */
  readonly countryCode: Maybe<Scalars['String']>;
  /** Region name */
  readonly region: Maybe<Scalars['String']>;
  /** Region or state code */
  readonly regionCode: Maybe<Scalars['String']>;
};

/** The actor's type. */
export enum GraphQLActorType {
  /** Indicates a user actor. */
  USER = 'USER',
  /** Indicates a team actor. */
  TEAM = 'TEAM'
}

/** Autogenerated input type of AddAssigneesToAssignable */
export type GraphQLAddAssigneesToAssignableInput = {
  /** The id of the assignable object to add assignees to. */
  readonly assignableId: Scalars['ID'];
  /** The id of users to add as assignees. */
  readonly assigneeIds: ReadonlyArray<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddAssigneesToAssignable */
export type GraphQLAddAssigneesToAssignablePayload = {
  readonly __typename?: 'AddAssigneesToAssignablePayload';
  /** The item that was assigned. */
  readonly assignable: Maybe<GraphQLAssignable>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AddComment */
export type GraphQLAddCommentInput = {
  /** The Node ID of the subject to modify. */
  readonly subjectId: Scalars['ID'];
  /** The contents of the comment. */
  readonly body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddComment */
export type GraphQLAddCommentPayload = {
  readonly __typename?: 'AddCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The edge from the subject's comment connection. */
  readonly commentEdge: Maybe<GraphQLIssueCommentEdge>;
  /** The subject */
  readonly subject: Maybe<GraphQLNode>;
  /** The edge from the subject's timeline connection. */
  readonly timelineEdge: Maybe<GraphQLIssueTimelineItemEdge>;
};

/** Autogenerated input type of AddDiscussionComment */
export type GraphQLAddDiscussionCommentInput = {
  /** The Node ID of the discussion to comment on. */
  readonly discussionId: Scalars['ID'];
  /** The Node ID of the discussion comment within this discussion to reply to. */
  readonly replyToId: Maybe<Scalars['ID']>;
  /** The contents of the comment. */
  readonly body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddDiscussionComment */
export type GraphQLAddDiscussionCommentPayload = {
  readonly __typename?: 'AddDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The newly created discussion comment. */
  readonly comment: Maybe<GraphQLDiscussionComment>;
};

/** Autogenerated input type of AddEnterpriseSupportEntitlement */
export type GraphQLAddEnterpriseSupportEntitlementInput = {
  /** The ID of the Enterprise which the admin belongs to. */
  readonly enterpriseId: Scalars['ID'];
  /** The login of a member who will receive the support entitlement. */
  readonly login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddEnterpriseSupportEntitlement */
export type GraphQLAddEnterpriseSupportEntitlementPayload = {
  readonly __typename?: 'AddEnterpriseSupportEntitlementPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** A message confirming the result of adding the support entitlement. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AddLabelsToLabelable */
export type GraphQLAddLabelsToLabelableInput = {
  /** The id of the labelable object to add labels to. */
  readonly labelableId: Scalars['ID'];
  /** The ids of the labels to add. */
  readonly labelIds: ReadonlyArray<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddLabelsToLabelable */
export type GraphQLAddLabelsToLabelablePayload = {
  readonly __typename?: 'AddLabelsToLabelablePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The item that was labeled. */
  readonly labelable: Maybe<GraphQLLabelable>;
};

/** Autogenerated input type of AddProjectCard */
export type GraphQLAddProjectCardInput = {
  /** The Node ID of the ProjectColumn. */
  readonly projectColumnId: Scalars['ID'];
  /** The content of the card. Must be a member of the ProjectCardItem union */
  readonly contentId: Maybe<Scalars['ID']>;
  /** The note on the card. */
  readonly note: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddProjectCard */
export type GraphQLAddProjectCardPayload = {
  readonly __typename?: 'AddProjectCardPayload';
  /** The edge from the ProjectColumn's card connection. */
  readonly cardEdge: Maybe<GraphQLProjectCardEdge>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The ProjectColumn */
  readonly projectColumn: Maybe<GraphQLProjectColumn>;
};

/** Autogenerated input type of AddProjectColumn */
export type GraphQLAddProjectColumnInput = {
  /** The Node ID of the project. */
  readonly projectId: Scalars['ID'];
  /** The name of the column. */
  readonly name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddProjectColumn */
export type GraphQLAddProjectColumnPayload = {
  readonly __typename?: 'AddProjectColumnPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The edge from the project's column connection. */
  readonly columnEdge: Maybe<GraphQLProjectColumnEdge>;
  /** The project */
  readonly project: Maybe<GraphQLProject>;
};

/** Autogenerated input type of AddProjectNextItem */
export type GraphQLAddProjectNextItemInput = {
  /** The ID of the Project to add the item to. */
  readonly projectId: Scalars['ID'];
  /** The content id of the item (Issue or PullRequest). */
  readonly contentId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddProjectNextItem */
export type GraphQLAddProjectNextItemPayload = {
  readonly __typename?: 'AddProjectNextItemPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The item added to the project. */
  readonly projectNextItem: Maybe<GraphQLProjectNextItem>;
};

/** Autogenerated input type of AddPullRequestReviewComment */
export type GraphQLAddPullRequestReviewCommentInput = {
  /** The node ID of the pull request reviewing */
  readonly pullRequestId: Maybe<Scalars['ID']>;
  /** The Node ID of the review to modify. */
  readonly pullRequestReviewId: Maybe<Scalars['ID']>;
  /** The SHA of the commit to comment on. */
  readonly commitOID: Maybe<Scalars['GitObjectID']>;
  /** The text of the comment. */
  readonly body: Scalars['String'];
  /** The relative path of the file to comment on. */
  readonly path: Maybe<Scalars['String']>;
  /** The line index in the diff to comment on. */
  readonly position: Maybe<Scalars['Int']>;
  /** The comment id to reply to. */
  readonly inReplyTo: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddPullRequestReviewComment */
export type GraphQLAddPullRequestReviewCommentPayload = {
  readonly __typename?: 'AddPullRequestReviewCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The newly created comment. */
  readonly comment: Maybe<GraphQLPullRequestReviewComment>;
  /** The edge from the review's comment connection. */
  readonly commentEdge: Maybe<GraphQLPullRequestReviewCommentEdge>;
};

/** Autogenerated input type of AddPullRequestReview */
export type GraphQLAddPullRequestReviewInput = {
  /** The Node ID of the pull request to modify. */
  readonly pullRequestId: Scalars['ID'];
  /** The commit OID the review pertains to. */
  readonly commitOID: Maybe<Scalars['GitObjectID']>;
  /** The contents of the review body comment. */
  readonly body: Maybe<Scalars['String']>;
  /** The event to perform on the pull request review. */
  readonly event: Maybe<GraphQLPullRequestReviewEvent>;
  /** The review line comments. */
  readonly comments: Maybe<ReadonlyArray<Maybe<GraphQLDraftPullRequestReviewComment>>>;
  /** The review line comment threads. */
  readonly threads: Maybe<ReadonlyArray<Maybe<GraphQLDraftPullRequestReviewThread>>>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddPullRequestReview */
export type GraphQLAddPullRequestReviewPayload = {
  readonly __typename?: 'AddPullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The newly created pull request review. */
  readonly pullRequestReview: Maybe<GraphQLPullRequestReview>;
  /** The edge from the pull request's review connection. */
  readonly reviewEdge: Maybe<GraphQLPullRequestReviewEdge>;
};

/** Autogenerated input type of AddPullRequestReviewThread */
export type GraphQLAddPullRequestReviewThreadInput = {
  /** Path to the file being commented on. */
  readonly path: Scalars['String'];
  /** Body of the thread's first comment. */
  readonly body: Scalars['String'];
  /** The node ID of the pull request reviewing */
  readonly pullRequestId: Maybe<Scalars['ID']>;
  /** The Node ID of the review to modify. */
  readonly pullRequestReviewId: Maybe<Scalars['ID']>;
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  readonly line: Scalars['Int'];
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  readonly side: Maybe<GraphQLDiffSide>;
  /** The first line of the range to which the comment refers. */
  readonly startLine: Maybe<Scalars['Int']>;
  /** The side of the diff on which the start line resides. */
  readonly startSide: Maybe<GraphQLDiffSide>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddPullRequestReviewThread */
export type GraphQLAddPullRequestReviewThreadPayload = {
  readonly __typename?: 'AddPullRequestReviewThreadPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The newly created thread. */
  readonly thread: Maybe<GraphQLPullRequestReviewThread>;
};

/** Autogenerated input type of AddReaction */
export type GraphQLAddReactionInput = {
  /** The Node ID of the subject to modify. */
  readonly subjectId: Scalars['ID'];
  /** The name of the emoji to react with. */
  readonly content: GraphQLReactionContent;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddReaction */
export type GraphQLAddReactionPayload = {
  readonly __typename?: 'AddReactionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The reaction object. */
  readonly reaction: Maybe<GraphQLReaction>;
  /** The reactable subject. */
  readonly subject: Maybe<GraphQLReactable>;
};

/** Autogenerated input type of AddStar */
export type GraphQLAddStarInput = {
  /** The Starrable ID to star. */
  readonly starrableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddStar */
export type GraphQLAddStarPayload = {
  readonly __typename?: 'AddStarPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The starrable. */
  readonly starrable: Maybe<GraphQLStarrable>;
};

/** Autogenerated input type of AddUpvote */
export type GraphQLAddUpvoteInput = {
  /** The Node ID of the discussion or comment to upvote. */
  readonly subjectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddUpvote */
export type GraphQLAddUpvotePayload = {
  readonly __typename?: 'AddUpvotePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The votable subject. */
  readonly subject: Maybe<GraphQLVotable>;
};

/** Autogenerated input type of AddVerifiableDomain */
export type GraphQLAddVerifiableDomainInput = {
  /** The ID of the owner to add the domain to */
  readonly ownerId: Scalars['ID'];
  /** The URL of the domain */
  readonly domain: Scalars['URI'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddVerifiableDomain */
export type GraphQLAddVerifiableDomainPayload = {
  readonly __typename?: 'AddVerifiableDomainPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The verifiable domain that was added. */
  readonly domain: Maybe<GraphQLVerifiableDomain>;
};

/** Represents a 'added_to_project' event on a given issue or pull request. */
export type GraphQLAddedToProjectEvent = GraphQLNode & {
  readonly __typename?: 'AddedToProjectEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
};

/** A GitHub App. */
export type GraphQLApp = GraphQLNode & {
  readonly __typename?: 'App';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The description of the app. */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The IP addresses of the app. */
  readonly ipAllowListEntries: GraphQLIpAllowListEntryConnection;
  /** The hex color code, without the leading '#', for the logo background. */
  readonly logoBackgroundColor: Scalars['String'];
  /** A URL pointing to the app's logo. */
  readonly logoUrl: Scalars['URI'];
  /** The name of the app. */
  readonly name: Scalars['String'];
  /** A slug based on the name of the app for use in URLs. */
  readonly slug: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The URL to the app's homepage. */
  readonly url: Scalars['URI'];
};


/** A GitHub App. */
export type GraphQLAppIpAllowListEntriesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLIpAllowListEntryOrder>;
};


/** A GitHub App. */
export type GraphQLAppLogoUrlArgs = {
  size: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of ApproveDeployments */
export type GraphQLApproveDeploymentsInput = {
  /** The node ID of the workflow run containing the pending deployments. */
  readonly workflowRunId: Scalars['ID'];
  /** The ids of environments to reject deployments */
  readonly environmentIds: ReadonlyArray<Scalars['ID']>;
  /** Optional comment for approving deployments */
  readonly comment: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ApproveDeployments */
export type GraphQLApproveDeploymentsPayload = {
  readonly __typename?: 'ApproveDeploymentsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The affected deployments. */
  readonly deployments: Maybe<ReadonlyArray<GraphQLDeployment>>;
};

/** Autogenerated input type of ApproveVerifiableDomain */
export type GraphQLApproveVerifiableDomainInput = {
  /** The ID of the verifiable domain to approve. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ApproveVerifiableDomain */
export type GraphQLApproveVerifiableDomainPayload = {
  readonly __typename?: 'ApproveVerifiableDomainPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The verifiable domain that was approved. */
  readonly domain: Maybe<GraphQLVerifiableDomain>;
};

/** Autogenerated input type of ArchiveRepository */
export type GraphQLArchiveRepositoryInput = {
  /** The ID of the repository to mark as archived. */
  readonly repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ArchiveRepository */
export type GraphQLArchiveRepositoryPayload = {
  readonly __typename?: 'ArchiveRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The repository that was marked as archived. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** An object that can have users assigned to it. */
export type GraphQLAssignable = {
  /** A list of Users assigned to this object. */
  readonly assignees: GraphQLUserConnection;
};


/** An object that can have users assigned to it. */
export type GraphQLAssignableAssigneesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Represents an 'assigned' event on any assignable object. */
export type GraphQLAssignedEvent = GraphQLNode & {
  readonly __typename?: 'AssignedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the assignable associated with the event. */
  readonly assignable: GraphQLAssignable;
  /** Identifies the user or mannequin that was assigned. */
  readonly assignee: Maybe<GraphQLAssignee>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /**
   * Identifies the user who was assigned.
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */
  readonly user: Maybe<GraphQLUser>;
};

/** Types that can be assigned to issues. */
export type GraphQLAssignee = GraphQLBot | GraphQLMannequin | GraphQLOrganization | GraphQLUser;

/** An entry in the audit log. */
export type GraphQLAuditEntry = {
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Types that can initiate an audit log event. */
export type GraphQLAuditEntryActor = GraphQLBot | GraphQLOrganization | GraphQLUser;

/** Ordering options for Audit Log connections. */
export type GraphQLAuditLogOrder = {
  /** The field to order Audit Logs by. */
  readonly field: Maybe<GraphQLAuditLogOrderField>;
  /** The ordering direction. */
  readonly direction: Maybe<GraphQLOrderDirection>;
};

/** Properties by which Audit Log connections can be ordered. */
export enum GraphQLAuditLogOrderField {
  /** Order audit log entries by timestamp */
  CREATED_AT = 'CREATED_AT'
}

/** Represents a 'auto_merge_disabled' event on a given pull request. */
export type GraphQLAutoMergeDisabledEvent = GraphQLNode & {
  readonly __typename?: 'AutoMergeDisabledEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The user who disabled auto-merge for this Pull Request */
  readonly disabler: Maybe<GraphQLUser>;
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
  /** The reason auto-merge was disabled */
  readonly reason: Maybe<Scalars['String']>;
  /** The reason_code relating to why auto-merge was disabled */
  readonly reasonCode: Maybe<Scalars['String']>;
};

/** Represents a 'auto_merge_enabled' event on a given pull request. */
export type GraphQLAutoMergeEnabledEvent = GraphQLNode & {
  readonly __typename?: 'AutoMergeEnabledEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The user who enabled auto-merge for this Pull Request */
  readonly enabler: Maybe<GraphQLUser>;
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Represents an auto-merge request for a pull request */
export type GraphQLAutoMergeRequest = {
  readonly __typename?: 'AutoMergeRequest';
  /** The email address of the author of this auto-merge request. */
  readonly authorEmail: Maybe<Scalars['String']>;
  /** The commit message of the auto-merge request. */
  readonly commitBody: Maybe<Scalars['String']>;
  /** The commit title of the auto-merge request. */
  readonly commitHeadline: Maybe<Scalars['String']>;
  /** When was this auto-merge request was enabled. */
  readonly enabledAt: Maybe<Scalars['DateTime']>;
  /** The actor who created the auto-merge request. */
  readonly enabledBy: Maybe<GraphQLActor>;
  /** The merge method of the auto-merge request. */
  readonly mergeMethod: GraphQLPullRequestMergeMethod;
  /** The pull request that this auto-merge request is set against. */
  readonly pullRequest: GraphQLPullRequest;
};

/** Represents a 'auto_rebase_enabled' event on a given pull request. */
export type GraphQLAutoRebaseEnabledEvent = GraphQLNode & {
  readonly __typename?: 'AutoRebaseEnabledEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The user who enabled auto-merge (rebase) for this Pull Request */
  readonly enabler: Maybe<GraphQLUser>;
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Represents a 'auto_squash_enabled' event on a given pull request. */
export type GraphQLAutoSquashEnabledEvent = GraphQLNode & {
  readonly __typename?: 'AutoSquashEnabledEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The user who enabled auto-merge (squash) for this Pull Request */
  readonly enabler: Maybe<GraphQLUser>;
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Represents a 'automatic_base_change_failed' event on a given pull request. */
export type GraphQLAutomaticBaseChangeFailedEvent = GraphQLNode & {
  readonly __typename?: 'AutomaticBaseChangeFailedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** The new base for this PR */
  readonly newBase: Scalars['String'];
  /** The old base for this PR */
  readonly oldBase: Scalars['String'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
};

/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
export type GraphQLAutomaticBaseChangeSucceededEvent = GraphQLNode & {
  readonly __typename?: 'AutomaticBaseChangeSucceededEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** The new base for this PR */
  readonly newBase: Scalars['String'];
  /** The old base for this PR */
  readonly oldBase: Scalars['String'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
};


/** Represents a 'base_ref_changed' event on a given issue or pull request. */
export type GraphQLBaseRefChangedEvent = GraphQLNode & {
  readonly __typename?: 'BaseRefChangedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the name of the base ref for the pull request after it was changed. */
  readonly currentRefName: Scalars['String'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** Identifies the name of the base ref for the pull request before it was changed. */
  readonly previousRefName: Scalars['String'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
};

/** Represents a 'base_ref_deleted' event on a given pull request. */
export type GraphQLBaseRefDeletedEvent = GraphQLNode & {
  readonly __typename?: 'BaseRefDeletedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */
  readonly baseRefName: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Represents a 'base_ref_force_pushed' event on a given pull request. */
export type GraphQLBaseRefForcePushedEvent = GraphQLNode & {
  readonly __typename?: 'BaseRefForcePushedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */
  readonly afterCommit: Maybe<GraphQLCommit>;
  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */
  readonly beforeCommit: Maybe<GraphQLCommit>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */
  readonly ref: Maybe<GraphQLRef>;
};

/** Represents a Git blame. */
export type GraphQLBlame = {
  readonly __typename?: 'Blame';
  /** The list of ranges from a Git blame. */
  readonly ranges: ReadonlyArray<GraphQLBlameRange>;
};

/** Represents a range of information from a Git blame. */
export type GraphQLBlameRange = {
  readonly __typename?: 'BlameRange';
  /** Identifies the recency of the change, from 1 (new) to 10 (old). This is calculated as a 2-quantile and determines the length of distance between the median age of all the changes in the file and the recency of the current range's change. */
  readonly age: Scalars['Int'];
  /** Identifies the line author */
  readonly commit: GraphQLCommit;
  /** The ending line for the range */
  readonly endingLine: Scalars['Int'];
  /** The starting line for the range */
  readonly startingLine: Scalars['Int'];
};

/** Represents a Git blob. */
export type GraphQLBlob = GraphQLGitObject & GraphQLNode & {
  readonly __typename?: 'Blob';
  /** An abbreviated version of the Git object ID */
  readonly abbreviatedOid: Scalars['String'];
  /** Byte size of Blob object */
  readonly byteSize: Scalars['Int'];
  /** The HTTP path for this Git object */
  readonly commitResourcePath: Scalars['URI'];
  /** The HTTP URL for this Git object */
  readonly commitUrl: Scalars['URI'];
  readonly id: Scalars['ID'];
  /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */
  readonly isBinary: Maybe<Scalars['Boolean']>;
  /** Indicates whether the contents is truncated */
  readonly isTruncated: Scalars['Boolean'];
  /** The Git object ID */
  readonly oid: Scalars['GitObjectID'];
  /** The Repository the Git object belongs to */
  readonly repository: GraphQLRepository;
  /** UTF8 text data or null if the Blob is binary */
  readonly text: Maybe<Scalars['String']>;
};

/** A special type of user which takes actions on behalf of GitHub Apps. */
export type GraphQLBot = GraphQLNode & GraphQLActor & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'Bot';
  /** A URL pointing to the GitHub App's public avatar. */
  readonly avatarUrl: Scalars['URI'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The username of the actor. */
  readonly login: Scalars['String'];
  /** The HTTP path for this bot */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this bot */
  readonly url: Scalars['URI'];
};


/** A special type of user which takes actions on behalf of GitHub Apps. */
export type GraphQLBotAvatarUrlArgs = {
  size: Maybe<Scalars['Int']>;
};

/** Types which can be actors for `BranchActorAllowance` objects. */
export type GraphQLBranchActorAllowanceActor = GraphQLTeam | GraphQLUser;

/** A branch protection rule. */
export type GraphQLBranchProtectionRule = GraphQLNode & {
  readonly __typename?: 'BranchProtectionRule';
  /** Can this branch be deleted. */
  readonly allowsDeletions: Scalars['Boolean'];
  /** Are force pushes allowed on this branch. */
  readonly allowsForcePushes: Scalars['Boolean'];
  /** Is branch creation a protected operation. */
  readonly blocksCreations: Scalars['Boolean'];
  /** A list of conflicts matching branches protection rule and other branch protection rules */
  readonly branchProtectionRuleConflicts: GraphQLBranchProtectionRuleConflictConnection;
  /** A list of actors able to force push for this branch protection rule. */
  readonly bypassForcePushAllowances: GraphQLBypassForcePushAllowanceConnection;
  /** A list of actors able to bypass PRs for this branch protection rule. */
  readonly bypassPullRequestAllowances: GraphQLBypassPullRequestAllowanceConnection;
  /** The actor who created this branch protection rule. */
  readonly creator: Maybe<GraphQLActor>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  readonly dismissesStaleReviews: Scalars['Boolean'];
  readonly id: Scalars['ID'];
  /** Can admins overwrite branch protection. */
  readonly isAdminEnforced: Scalars['Boolean'];
  /** Repository refs that are protected by this rule */
  readonly matchingRefs: GraphQLRefConnection;
  /** Identifies the protection rule pattern. */
  readonly pattern: Scalars['String'];
  /** A list push allowances for this branch protection rule. */
  readonly pushAllowances: GraphQLPushAllowanceConnection;
  /** The repository associated with this branch protection rule. */
  readonly repository: Maybe<GraphQLRepository>;
  /** Number of approving reviews required to update matching branches. */
  readonly requiredApprovingReviewCount: Maybe<Scalars['Int']>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  readonly requiredStatusCheckContexts: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** List of required status checks that must pass for commits to be accepted to matching branches. */
  readonly requiredStatusChecks: Maybe<ReadonlyArray<GraphQLRequiredStatusCheckDescription>>;
  /** Are approving reviews required to update matching branches. */
  readonly requiresApprovingReviews: Scalars['Boolean'];
  /** Are reviews from code owners required to update matching branches. */
  readonly requiresCodeOwnerReviews: Scalars['Boolean'];
  /** Are commits required to be signed. */
  readonly requiresCommitSignatures: Scalars['Boolean'];
  /** Are conversations required to be resolved before merging. */
  readonly requiresConversationResolution: Scalars['Boolean'];
  /** Are merge commits prohibited from being pushed to this branch. */
  readonly requiresLinearHistory: Scalars['Boolean'];
  /** Are status checks required to update matching branches. */
  readonly requiresStatusChecks: Scalars['Boolean'];
  /** Are branches required to be up to date before merging. */
  readonly requiresStrictStatusChecks: Scalars['Boolean'];
  /** Is pushing to matching branches restricted. */
  readonly restrictsPushes: Scalars['Boolean'];
  /** Is dismissal of pull request reviews restricted. */
  readonly restrictsReviewDismissals: Scalars['Boolean'];
  /** A list review dismissal allowances for this branch protection rule. */
  readonly reviewDismissalAllowances: GraphQLReviewDismissalAllowanceConnection;
};


/** A branch protection rule. */
export type GraphQLBranchProtectionRuleBranchProtectionRuleConflictsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A branch protection rule. */
export type GraphQLBranchProtectionRuleBypassForcePushAllowancesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A branch protection rule. */
export type GraphQLBranchProtectionRuleBypassPullRequestAllowancesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A branch protection rule. */
export type GraphQLBranchProtectionRuleMatchingRefsArgs = {
  query: Maybe<Scalars['String']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A branch protection rule. */
export type GraphQLBranchProtectionRulePushAllowancesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A branch protection rule. */
export type GraphQLBranchProtectionRuleReviewDismissalAllowancesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** A conflict between two branch protection rules. */
export type GraphQLBranchProtectionRuleConflict = {
  readonly __typename?: 'BranchProtectionRuleConflict';
  /** Identifies the branch protection rule. */
  readonly branchProtectionRule: Maybe<GraphQLBranchProtectionRule>;
  /** Identifies the conflicting branch protection rule. */
  readonly conflictingBranchProtectionRule: Maybe<GraphQLBranchProtectionRule>;
  /** Identifies the branch ref that has conflicting rules */
  readonly ref: Maybe<GraphQLRef>;
};

/** The connection type for BranchProtectionRuleConflict. */
export type GraphQLBranchProtectionRuleConflictConnection = {
  readonly __typename?: 'BranchProtectionRuleConflictConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLBranchProtectionRuleConflictEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLBranchProtectionRuleConflict>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLBranchProtectionRuleConflictEdge = {
  readonly __typename?: 'BranchProtectionRuleConflictEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLBranchProtectionRuleConflict>;
};

/** The connection type for BranchProtectionRule. */
export type GraphQLBranchProtectionRuleConnection = {
  readonly __typename?: 'BranchProtectionRuleConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLBranchProtectionRuleEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLBranchProtectionRule>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLBranchProtectionRuleEdge = {
  readonly __typename?: 'BranchProtectionRuleEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLBranchProtectionRule>;
};

/** A team or user who has the ability to bypass a force push requirement on a protected branch. */
export type GraphQLBypassForcePushAllowance = GraphQLNode & {
  readonly __typename?: 'BypassForcePushAllowance';
  /** The actor that can dismiss. */
  readonly actor: Maybe<GraphQLBranchActorAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  readonly branchProtectionRule: Maybe<GraphQLBranchProtectionRule>;
  readonly id: Scalars['ID'];
};

/** The connection type for BypassForcePushAllowance. */
export type GraphQLBypassForcePushAllowanceConnection = {
  readonly __typename?: 'BypassForcePushAllowanceConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLBypassForcePushAllowanceEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLBypassForcePushAllowance>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLBypassForcePushAllowanceEdge = {
  readonly __typename?: 'BypassForcePushAllowanceEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLBypassForcePushAllowance>;
};

/** A team or user who has the ability to bypass a pull request requirement on a protected branch. */
export type GraphQLBypassPullRequestAllowance = GraphQLNode & {
  readonly __typename?: 'BypassPullRequestAllowance';
  /** The actor that can dismiss. */
  readonly actor: Maybe<GraphQLBranchActorAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  readonly branchProtectionRule: Maybe<GraphQLBranchProtectionRule>;
  readonly id: Scalars['ID'];
};

/** The connection type for BypassPullRequestAllowance. */
export type GraphQLBypassPullRequestAllowanceConnection = {
  readonly __typename?: 'BypassPullRequestAllowanceConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLBypassPullRequestAllowanceEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLBypassPullRequestAllowance>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLBypassPullRequestAllowanceEdge = {
  readonly __typename?: 'BypassPullRequestAllowanceEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLBypassPullRequestAllowance>;
};

/** The Common Vulnerability Scoring System */
export type GraphQLCvss = {
  readonly __typename?: 'CVSS';
  /** The CVSS score associated with this advisory */
  readonly score: Scalars['Float'];
  /** The CVSS vector string associated with this advisory */
  readonly vectorString: Maybe<Scalars['String']>;
};

/** A common weakness enumeration */
export type GraphQLCwe = GraphQLNode & {
  readonly __typename?: 'CWE';
  /** The id of the CWE */
  readonly cweId: Scalars['String'];
  /** A detailed description of this CWE */
  readonly description: Scalars['String'];
  readonly id: Scalars['ID'];
  /** The name of this CWE */
  readonly name: Scalars['String'];
};

/** The connection type for CWE. */
export type GraphQLCweConnection = {
  readonly __typename?: 'CWEConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCweEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCwe>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCweEdge = {
  readonly __typename?: 'CWEEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCwe>;
};

/** Autogenerated input type of CancelEnterpriseAdminInvitation */
export type GraphQLCancelEnterpriseAdminInvitationInput = {
  /** The Node ID of the pending enterprise administrator invitation. */
  readonly invitationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CancelEnterpriseAdminInvitation */
export type GraphQLCancelEnterpriseAdminInvitationPayload = {
  readonly __typename?: 'CancelEnterpriseAdminInvitationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The invitation that was canceled. */
  readonly invitation: Maybe<GraphQLEnterpriseAdministratorInvitation>;
  /** A message confirming the result of canceling an administrator invitation. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CancelSponsorship */
export type GraphQLCancelSponsorshipInput = {
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  readonly sponsorId: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  readonly sponsorLogin: Maybe<Scalars['String']>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  readonly sponsorableId: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  readonly sponsorableLogin: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CancelSponsorship */
export type GraphQLCancelSponsorshipPayload = {
  readonly __typename?: 'CancelSponsorshipPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The tier that was being used at the time of cancellation. */
  readonly sponsorsTier: Maybe<GraphQLSponsorsTier>;
};

/** Autogenerated input type of ChangeUserStatus */
export type GraphQLChangeUserStatusInput = {
  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */
  readonly emoji: Maybe<Scalars['String']>;
  /** A short description of your current status. */
  readonly message: Maybe<Scalars['String']>;
  /** The ID of the organization whose members will be allowed to see the status. If omitted, the status will be publicly visible. */
  readonly organizationId: Maybe<Scalars['ID']>;
  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */
  readonly limitedAvailability: Maybe<Scalars['Boolean']>;
  /** If set, the user status will not be shown after this date. */
  readonly expiresAt: Maybe<Scalars['DateTime']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ChangeUserStatus */
export type GraphQLChangeUserStatusPayload = {
  readonly __typename?: 'ChangeUserStatusPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** Your updated status. */
  readonly status: Maybe<GraphQLUserStatus>;
};

/** A single check annotation. */
export type GraphQLCheckAnnotation = {
  readonly __typename?: 'CheckAnnotation';
  /** The annotation's severity level. */
  readonly annotationLevel: Maybe<GraphQLCheckAnnotationLevel>;
  /** The path to the file that this annotation was made on. */
  readonly blobUrl: Scalars['URI'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The position of this annotation. */
  readonly location: GraphQLCheckAnnotationSpan;
  /** The annotation's message. */
  readonly message: Scalars['String'];
  /** The path that this annotation was made on. */
  readonly path: Scalars['String'];
  /** Additional information about the annotation. */
  readonly rawDetails: Maybe<Scalars['String']>;
  /** The annotation's title */
  readonly title: Maybe<Scalars['String']>;
};

/** The connection type for CheckAnnotation. */
export type GraphQLCheckAnnotationConnection = {
  readonly __typename?: 'CheckAnnotationConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCheckAnnotationEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCheckAnnotation>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Information from a check run analysis to specific lines of code. */
export type GraphQLCheckAnnotationData = {
  /** The path of the file to add an annotation to. */
  readonly path: Scalars['String'];
  /** The location of the annotation */
  readonly location: GraphQLCheckAnnotationRange;
  /** Represents an annotation's information level */
  readonly annotationLevel: GraphQLCheckAnnotationLevel;
  /** A short description of the feedback for these lines of code. */
  readonly message: Scalars['String'];
  /** The title that represents the annotation. */
  readonly title: Maybe<Scalars['String']>;
  /** Details about this annotation. */
  readonly rawDetails: Maybe<Scalars['String']>;
};

/** An edge in a connection. */
export type GraphQLCheckAnnotationEdge = {
  readonly __typename?: 'CheckAnnotationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCheckAnnotation>;
};

/** Represents an annotation's information level. */
export enum GraphQLCheckAnnotationLevel {
  /** An annotation indicating an inescapable error. */
  FAILURE = 'FAILURE',
  /** An annotation indicating some information. */
  NOTICE = 'NOTICE',
  /** An annotation indicating an ignorable error. */
  WARNING = 'WARNING'
}

/** A character position in a check annotation. */
export type GraphQLCheckAnnotationPosition = {
  readonly __typename?: 'CheckAnnotationPosition';
  /** Column number (1 indexed). */
  readonly column: Maybe<Scalars['Int']>;
  /** Line number (1 indexed). */
  readonly line: Scalars['Int'];
};

/** Information from a check run analysis to specific lines of code. */
export type GraphQLCheckAnnotationRange = {
  /** The starting line of the range. */
  readonly startLine: Scalars['Int'];
  /** The starting column of the range. */
  readonly startColumn: Maybe<Scalars['Int']>;
  /** The ending line of the range. */
  readonly endLine: Scalars['Int'];
  /** The ending column of the range. */
  readonly endColumn: Maybe<Scalars['Int']>;
};

/** An inclusive pair of positions for a check annotation. */
export type GraphQLCheckAnnotationSpan = {
  readonly __typename?: 'CheckAnnotationSpan';
  /** End position (inclusive). */
  readonly end: GraphQLCheckAnnotationPosition;
  /** Start position (inclusive). */
  readonly start: GraphQLCheckAnnotationPosition;
};

/** The possible states for a check suite or run conclusion. */
export enum GraphQLCheckConclusionState {
  /** The check suite or run requires action. */
  ACTION_REQUIRED = 'ACTION_REQUIRED',
  /** The check suite or run has timed out. */
  TIMED_OUT = 'TIMED_OUT',
  /** The check suite or run has been cancelled. */
  CANCELLED = 'CANCELLED',
  /** The check suite or run has failed. */
  FAILURE = 'FAILURE',
  /** The check suite or run has succeeded. */
  SUCCESS = 'SUCCESS',
  /** The check suite or run was neutral. */
  NEUTRAL = 'NEUTRAL',
  /** The check suite or run was skipped. */
  SKIPPED = 'SKIPPED',
  /** The check suite or run has failed at startup. */
  STARTUP_FAILURE = 'STARTUP_FAILURE',
  /** The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion. */
  STALE = 'STALE'
}

/** A check run. */
export type GraphQLCheckRun = GraphQLNode & GraphQLUniformResourceLocatable & GraphQLRequirableByPullRequest & {
  readonly __typename?: 'CheckRun';
  /** The check run's annotations */
  readonly annotations: Maybe<GraphQLCheckAnnotationConnection>;
  /** The check suite that this run is a part of. */
  readonly checkSuite: GraphQLCheckSuite;
  /** Identifies the date and time when the check run was completed. */
  readonly completedAt: Maybe<Scalars['DateTime']>;
  /** The conclusion of the check run. */
  readonly conclusion: Maybe<GraphQLCheckConclusionState>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The corresponding deployment for this job, if any */
  readonly deployment: Maybe<GraphQLDeployment>;
  /** The URL from which to find full details of the check run on the integrator's site. */
  readonly detailsUrl: Maybe<Scalars['URI']>;
  /** A reference for the check run on the integrator's system. */
  readonly externalId: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** Whether this is required to pass before merging for a specific pull request. */
  readonly isRequired: Scalars['Boolean'];
  /** The name of the check for this check run. */
  readonly name: Scalars['String'];
  /** Information about a pending deployment, if any, in this check run */
  readonly pendingDeploymentRequest: Maybe<GraphQLDeploymentRequest>;
  /** The permalink to the check run summary. */
  readonly permalink: Scalars['URI'];
  /** The repository associated with this check run. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this check run. */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the check run was started. */
  readonly startedAt: Maybe<Scalars['DateTime']>;
  /** The current status of the check run. */
  readonly status: GraphQLCheckStatusState;
  /** The check run's steps */
  readonly steps: Maybe<GraphQLCheckStepConnection>;
  /** A string representing the check run's summary */
  readonly summary: Maybe<Scalars['String']>;
  /** A string representing the check run's text */
  readonly text: Maybe<Scalars['String']>;
  /** A string representing the check run */
  readonly title: Maybe<Scalars['String']>;
  /** The HTTP URL for this check run. */
  readonly url: Scalars['URI'];
};


/** A check run. */
export type GraphQLCheckRunAnnotationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A check run. */
export type GraphQLCheckRunIsRequiredArgs = {
  pullRequestId: Maybe<Scalars['ID']>;
  pullRequestNumber: Maybe<Scalars['Int']>;
};


/** A check run. */
export type GraphQLCheckRunStepsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  number: Maybe<Scalars['Int']>;
};

/** Possible further actions the integrator can perform. */
export type GraphQLCheckRunAction = {
  /** The text to be displayed on a button in the web UI. */
  readonly label: Scalars['String'];
  /** A short explanation of what this action would do. */
  readonly description: Scalars['String'];
  /** A reference for the action on the integrator's system.  */
  readonly identifier: Scalars['String'];
};

/** The connection type for CheckRun. */
export type GraphQLCheckRunConnection = {
  readonly __typename?: 'CheckRunConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCheckRunEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCheckRun>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCheckRunEdge = {
  readonly __typename?: 'CheckRunEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCheckRun>;
};

/** The filters that are available when fetching check runs. */
export type GraphQLCheckRunFilter = {
  /** Filters the check runs by this type. */
  readonly checkType: Maybe<GraphQLCheckRunType>;
  /** Filters the check runs created by this application ID. */
  readonly appId: Maybe<Scalars['Int']>;
  /** Filters the check runs by this name. */
  readonly checkName: Maybe<Scalars['String']>;
  /** Filters the check runs by this status. */
  readonly status: Maybe<GraphQLCheckStatusState>;
};

/** Descriptive details about the check run. */
export type GraphQLCheckRunOutput = {
  /** A title to provide for this check run. */
  readonly title: Scalars['String'];
  /** The summary of the check run (supports Commonmark). */
  readonly summary: Scalars['String'];
  /** The details of the check run (supports Commonmark). */
  readonly text: Maybe<Scalars['String']>;
  /** The annotations that are made as part of the check run. */
  readonly annotations: Maybe<ReadonlyArray<GraphQLCheckAnnotationData>>;
  /** Images attached to the check run output displayed in the GitHub pull request UI. */
  readonly images: Maybe<ReadonlyArray<GraphQLCheckRunOutputImage>>;
};

/** Images attached to the check run output displayed in the GitHub pull request UI. */
export type GraphQLCheckRunOutputImage = {
  /** The alternative text for the image. */
  readonly alt: Scalars['String'];
  /** The full URL of the image. */
  readonly imageUrl: Scalars['URI'];
  /** A short image description. */
  readonly caption: Maybe<Scalars['String']>;
};

/** The possible types of check runs. */
export enum GraphQLCheckRunType {
  /** Every check run available. */
  ALL = 'ALL',
  /** The latest check run. */
  LATEST = 'LATEST'
}

/** The possible states for a check suite or run status. */
export enum GraphQLCheckStatusState {
  /** The check suite or run has been queued. */
  QUEUED = 'QUEUED',
  /** The check suite or run is in progress. */
  IN_PROGRESS = 'IN_PROGRESS',
  /** The check suite or run has been completed. */
  COMPLETED = 'COMPLETED',
  /** The check suite or run is in waiting state. */
  WAITING = 'WAITING',
  /** The check suite or run is in pending state. */
  PENDING = 'PENDING',
  /** The check suite or run has been requested. */
  REQUESTED = 'REQUESTED'
}

/** A single check step. */
export type GraphQLCheckStep = {
  readonly __typename?: 'CheckStep';
  /** Identifies the date and time when the check step was completed. */
  readonly completedAt: Maybe<Scalars['DateTime']>;
  /** The conclusion of the check step. */
  readonly conclusion: Maybe<GraphQLCheckConclusionState>;
  /** A reference for the check step on the integrator's system. */
  readonly externalId: Maybe<Scalars['String']>;
  /** The step's name. */
  readonly name: Scalars['String'];
  /** The index of the step in the list of steps of the parent check run. */
  readonly number: Scalars['Int'];
  /** Number of seconds to completion. */
  readonly secondsToCompletion: Maybe<Scalars['Int']>;
  /** Identifies the date and time when the check step was started. */
  readonly startedAt: Maybe<Scalars['DateTime']>;
  /** The current status of the check step. */
  readonly status: GraphQLCheckStatusState;
};

/** The connection type for CheckStep. */
export type GraphQLCheckStepConnection = {
  readonly __typename?: 'CheckStepConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCheckStepEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCheckStep>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCheckStepEdge = {
  readonly __typename?: 'CheckStepEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCheckStep>;
};

/** A check suite. */
export type GraphQLCheckSuite = GraphQLNode & {
  readonly __typename?: 'CheckSuite';
  /** The GitHub App which created this check suite. */
  readonly app: Maybe<GraphQLApp>;
  /** The name of the branch for this check suite. */
  readonly branch: Maybe<GraphQLRef>;
  /** The check runs associated with a check suite. */
  readonly checkRuns: Maybe<GraphQLCheckRunConnection>;
  /** The commit for this check suite */
  readonly commit: GraphQLCommit;
  /** The conclusion of this check suite. */
  readonly conclusion: Maybe<GraphQLCheckConclusionState>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The user who triggered the check suite. */
  readonly creator: Maybe<GraphQLUser>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** A list of open pull requests matching the check suite. */
  readonly matchingPullRequests: Maybe<GraphQLPullRequestConnection>;
  /** The push that triggered this check suite. */
  readonly push: Maybe<GraphQLPush>;
  /** The repository associated with this check suite. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this check suite */
  readonly resourcePath: Scalars['URI'];
  /** The status of this check suite. */
  readonly status: GraphQLCheckStatusState;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this check suite */
  readonly url: Scalars['URI'];
  /** The workflow run associated with this check suite. */
  readonly workflowRun: Maybe<GraphQLWorkflowRun>;
};


/** A check suite. */
export type GraphQLCheckSuiteCheckRunsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  filterBy: Maybe<GraphQLCheckRunFilter>;
};


/** A check suite. */
export type GraphQLCheckSuiteMatchingPullRequestsArgs = {
  states: Maybe<ReadonlyArray<GraphQLPullRequestState>>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  headRefName: Maybe<Scalars['String']>;
  baseRefName: Maybe<Scalars['String']>;
  orderBy: Maybe<GraphQLIssueOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The auto-trigger preferences that are available for check suites. */
export type GraphQLCheckSuiteAutoTriggerPreference = {
  /** The node ID of the application that owns the check suite. */
  readonly appId: Scalars['ID'];
  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */
  readonly setting: Scalars['Boolean'];
};

/** The connection type for CheckSuite. */
export type GraphQLCheckSuiteConnection = {
  readonly __typename?: 'CheckSuiteConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCheckSuiteEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCheckSuite>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCheckSuiteEdge = {
  readonly __typename?: 'CheckSuiteEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCheckSuite>;
};

/** The filters that are available when fetching check suites. */
export type GraphQLCheckSuiteFilter = {
  /** Filters the check suites created by this application ID. */
  readonly appId: Maybe<Scalars['Int']>;
  /** Filters the check suites by this name. */
  readonly checkName: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ClearLabelsFromLabelable */
export type GraphQLClearLabelsFromLabelableInput = {
  /** The id of the labelable object to clear the labels from. */
  readonly labelableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ClearLabelsFromLabelable */
export type GraphQLClearLabelsFromLabelablePayload = {
  readonly __typename?: 'ClearLabelsFromLabelablePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The item that was unlabeled. */
  readonly labelable: Maybe<GraphQLLabelable>;
};

/** Autogenerated input type of CloneProject */
export type GraphQLCloneProjectInput = {
  /** The owner ID to create the project under. */
  readonly targetOwnerId: Scalars['ID'];
  /** The source project to clone. */
  readonly sourceId: Scalars['ID'];
  /** Whether or not to clone the source project's workflows. */
  readonly includeWorkflows: Scalars['Boolean'];
  /** The name of the project. */
  readonly name: Scalars['String'];
  /** The description of the project. */
  readonly body: Maybe<Scalars['String']>;
  /** The visibility of the project, defaults to false (private). */
  readonly public: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CloneProject */
export type GraphQLCloneProjectPayload = {
  readonly __typename?: 'CloneProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The id of the JobStatus for populating cloned fields. */
  readonly jobStatusId: Maybe<Scalars['String']>;
  /** The new cloned project. */
  readonly project: Maybe<GraphQLProject>;
};

/** Autogenerated input type of CloneTemplateRepository */
export type GraphQLCloneTemplateRepositoryInput = {
  /** The Node ID of the template repository. */
  readonly repositoryId: Scalars['ID'];
  /** The name of the new repository. */
  readonly name: Scalars['String'];
  /** The ID of the owner for the new repository. */
  readonly ownerId: Scalars['ID'];
  /** A short description of the new repository. */
  readonly description: Maybe<Scalars['String']>;
  /** Indicates the repository's visibility level. */
  readonly visibility: GraphQLRepositoryVisibility;
  /** Whether to copy all branches from the template to the new repository. Defaults to copying only the default branch of the template. */
  readonly includeAllBranches: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CloneTemplateRepository */
export type GraphQLCloneTemplateRepositoryPayload = {
  readonly __typename?: 'CloneTemplateRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new repository. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** An object that can be closed */
export type GraphQLClosable = {
  /** `true` if the object is closed (definition of closed may depend on type) */
  readonly closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  readonly closedAt: Maybe<Scalars['DateTime']>;
};

/** Autogenerated input type of CloseIssue */
export type GraphQLCloseIssueInput = {
  /** ID of the issue to be closed. */
  readonly issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CloseIssue */
export type GraphQLCloseIssuePayload = {
  readonly __typename?: 'CloseIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The issue that was closed. */
  readonly issue: Maybe<GraphQLIssue>;
};

/** Autogenerated input type of ClosePullRequest */
export type GraphQLClosePullRequestInput = {
  /** ID of the pull request to be closed. */
  readonly pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ClosePullRequest */
export type GraphQLClosePullRequestPayload = {
  readonly __typename?: 'ClosePullRequestPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The pull request that was closed. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Represents a 'closed' event on any `Closable`. */
export type GraphQLClosedEvent = GraphQLNode & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'ClosedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Object that was closed. */
  readonly closable: GraphQLClosable;
  /** Object which triggered the creation of this event. */
  readonly closer: Maybe<GraphQLCloser>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** The HTTP path for this closed event. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this closed event. */
  readonly url: Scalars['URI'];
};

/** The object which triggered a `ClosedEvent`. */
export type GraphQLCloser = GraphQLCommit | GraphQLPullRequest;

/** The Code of Conduct for a repository */
export type GraphQLCodeOfConduct = GraphQLNode & {
  readonly __typename?: 'CodeOfConduct';
  /** The body of the Code of Conduct */
  readonly body: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The key for the Code of Conduct */
  readonly key: Scalars['String'];
  /** The formal name of the Code of Conduct */
  readonly name: Scalars['String'];
  /** The HTTP path for this Code of Conduct */
  readonly resourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for this Code of Conduct */
  readonly url: Maybe<Scalars['URI']>;
};

/** Collaborators affiliation level with a subject. */
export enum GraphQLCollaboratorAffiliation {
  /** All outside collaborators of an organization-owned subject. */
  OUTSIDE = 'OUTSIDE',
  /** All collaborators with permissions to an organization-owned subject, regardless of organization membership status. */
  DIRECT = 'DIRECT',
  /** All collaborators the authenticated user can see. */
  ALL = 'ALL'
}

/** Represents a comment. */
export type GraphQLComment = {
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the subject of the comment. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** The body as Markdown. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  readonly bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
};


/** Represents a comment. */
export type GraphQLCommentUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** A comment author association with repository. */
export enum GraphQLCommentAuthorAssociation {
  /** Author is a member of the organization that owns the repository. */
  MEMBER = 'MEMBER',
  /** Author is the owner of the repository. */
  OWNER = 'OWNER',
  /** Author is a placeholder for an unclaimed user. */
  MANNEQUIN = 'MANNEQUIN',
  /** Author has been invited to collaborate on the repository. */
  COLLABORATOR = 'COLLABORATOR',
  /** Author has previously committed to the repository. */
  CONTRIBUTOR = 'CONTRIBUTOR',
  /** Author has not previously committed to the repository. */
  FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR',
  /** Author has not previously committed to GitHub. */
  FIRST_TIMER = 'FIRST_TIMER',
  /** Author has no association with the repository. */
  NONE = 'NONE'
}

/** The possible errors that will prevent a user from updating a comment. */
export enum GraphQLCommentCannotUpdateReason {
  /** Unable to create comment because repository is archived. */
  ARCHIVED = 'ARCHIVED',
  /** You must be the author or have write access to this repository to update this comment. */
  INSUFFICIENT_ACCESS = 'INSUFFICIENT_ACCESS',
  /** Unable to create comment because issue is locked. */
  LOCKED = 'LOCKED',
  /** You must be logged in to update this comment. */
  LOGIN_REQUIRED = 'LOGIN_REQUIRED',
  /** Repository is under maintenance. */
  MAINTENANCE = 'MAINTENANCE',
  /** At least one email address must be verified to update this comment. */
  VERIFIED_EMAIL_REQUIRED = 'VERIFIED_EMAIL_REQUIRED',
  /** You cannot update this comment */
  DENIED = 'DENIED'
}

/** Represents a 'comment_deleted' event on a given issue or pull request. */
export type GraphQLCommentDeletedEvent = GraphQLNode & {
  readonly __typename?: 'CommentDeletedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The user who authored the deleted comment. */
  readonly deletedCommentAuthor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
};

/** Represents a Git commit. */
export type GraphQLCommit = GraphQLNode & GraphQLGitObject & GraphQLSubscribable & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'Commit';
  /** An abbreviated version of the Git object ID */
  readonly abbreviatedOid: Scalars['String'];
  /** The number of additions in this commit. */
  readonly additions: Scalars['Int'];
  /** The merged Pull Request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open Pull Requests associated with the commit */
  readonly associatedPullRequests: Maybe<GraphQLPullRequestConnection>;
  /** Authorship details of the commit. */
  readonly author: Maybe<GraphQLGitActor>;
  /** Check if the committer and the author match. */
  readonly authoredByCommitter: Scalars['Boolean'];
  /** The datetime when this commit was authored. */
  readonly authoredDate: Scalars['DateTime'];
  /**
   * The list of authors for this commit based on the git author and the Co-authored-by
   * message trailer. The git author will always be first.
   */
  readonly authors: GraphQLGitActorConnection;
  /** Fetches `git blame` information. */
  readonly blame: GraphQLBlame;
  /** The number of changed files in this commit. */
  readonly changedFiles: Scalars['Int'];
  /** The check suites associated with a commit. */
  readonly checkSuites: Maybe<GraphQLCheckSuiteConnection>;
  /** Comments made on the commit. */
  readonly comments: GraphQLCommitCommentConnection;
  /** The HTTP path for this Git object */
  readonly commitResourcePath: Scalars['URI'];
  /** The HTTP URL for this Git object */
  readonly commitUrl: Scalars['URI'];
  /** The datetime when this commit was committed. */
  readonly committedDate: Scalars['DateTime'];
  /** Check if committed via GitHub web UI. */
  readonly committedViaWeb: Scalars['Boolean'];
  /** Committer details of the commit. */
  readonly committer: Maybe<GraphQLGitActor>;
  /** The number of deletions in this commit. */
  readonly deletions: Scalars['Int'];
  /** The deployments associated with a commit. */
  readonly deployments: Maybe<GraphQLDeploymentConnection>;
  /** The tree entry representing the file located at the given path. */
  readonly file: Maybe<GraphQLTreeEntry>;
  /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */
  readonly history: GraphQLCommitHistoryConnection;
  readonly id: Scalars['ID'];
  /** The Git commit message */
  readonly message: Scalars['String'];
  /** The Git commit message body */
  readonly messageBody: Scalars['String'];
  /** The commit message body rendered to HTML. */
  readonly messageBodyHTML: Scalars['HTML'];
  /** The Git commit message headline */
  readonly messageHeadline: Scalars['String'];
  /** The commit message headline rendered to HTML. */
  readonly messageHeadlineHTML: Scalars['HTML'];
  /** The Git object ID */
  readonly oid: Scalars['GitObjectID'];
  /** The organization this commit was made on behalf of. */
  readonly onBehalfOf: Maybe<GraphQLOrganization>;
  /** The parents of a commit. */
  readonly parents: GraphQLCommitConnection;
  /** The datetime when this commit was pushed. */
  readonly pushedDate: Maybe<Scalars['DateTime']>;
  /** The Repository this commit belongs to */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this commit */
  readonly resourcePath: Scalars['URI'];
  /** Commit signing information, if present. */
  readonly signature: Maybe<GraphQLGitSignature>;
  /** Status information for this commit */
  readonly status: Maybe<GraphQLStatus>;
  /** Check and Status rollup information for this commit. */
  readonly statusCheckRollup: Maybe<GraphQLStatusCheckRollup>;
  /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */
  readonly submodules: GraphQLSubmoduleConnection;
  /**
   * Returns a URL to download a tarball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  readonly tarballUrl: Scalars['URI'];
  /** Commit's root Tree */
  readonly tree: GraphQLTree;
  /** The HTTP path for the tree of this commit */
  readonly treeResourcePath: Scalars['URI'];
  /** The HTTP URL for the tree of this commit */
  readonly treeUrl: Scalars['URI'];
  /** The HTTP URL for this commit */
  readonly url: Scalars['URI'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  readonly viewerCanSubscribe: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  readonly viewerSubscription: Maybe<GraphQLSubscriptionState>;
  /**
   * Returns a URL to download a zipball archive for a repository.
   * Note: For private repositories, these links are temporary and expire after five minutes.
   */
  readonly zipballUrl: Scalars['URI'];
};


/** Represents a Git commit. */
export type GraphQLCommitAssociatedPullRequestsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLPullRequestOrder>;
};


/** Represents a Git commit. */
export type GraphQLCommitAuthorsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Represents a Git commit. */
export type GraphQLCommitBlameArgs = {
  path: Scalars['String'];
};


/** Represents a Git commit. */
export type GraphQLCommitCheckSuitesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  filterBy: Maybe<GraphQLCheckSuiteFilter>;
};


/** Represents a Git commit. */
export type GraphQLCommitCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Represents a Git commit. */
export type GraphQLCommitDeploymentsArgs = {
  environments: Maybe<ReadonlyArray<Scalars['String']>>;
  orderBy?: Maybe<GraphQLDeploymentOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Represents a Git commit. */
export type GraphQLCommitFileArgs = {
  path: Scalars['String'];
};


/** Represents a Git commit. */
export type GraphQLCommitHistoryArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  path: Maybe<Scalars['String']>;
  author: Maybe<GraphQLCommitAuthor>;
  since: Maybe<Scalars['GitTimestamp']>;
  until: Maybe<Scalars['GitTimestamp']>;
};


/** Represents a Git commit. */
export type GraphQLCommitParentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Represents a Git commit. */
export type GraphQLCommitSubmodulesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Specifies an author for filtering Git commits. */
export type GraphQLCommitAuthor = {
  /** ID of a User to filter by. If non-null, only commits authored by this user will be returned. This field takes precedence over emails. */
  readonly id: Maybe<Scalars['ID']>;
  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */
  readonly emails: Maybe<ReadonlyArray<Scalars['String']>>;
};

/** Represents a comment on a given Commit. */
export type GraphQLCommitComment = GraphQLNode & GraphQLComment & GraphQLDeletable & GraphQLMinimizable & GraphQLUpdatable & GraphQLUpdatableComment & GraphQLReactable & GraphQLRepositoryNode & {
  readonly __typename?: 'CommitComment';
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the subject of the comment. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** Identifies the comment body. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  readonly bodyText: Scalars['String'];
  /** Identifies the commit associated with the comment, if the commit exists. */
  readonly commit: Maybe<GraphQLCommit>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  readonly isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** Returns why the comment was minimized. */
  readonly minimizedReason: Maybe<Scalars['String']>;
  /** Identifies the file path associated with the comment. */
  readonly path: Maybe<Scalars['String']>;
  /** Identifies the line position associated with the comment. */
  readonly position: Maybe<Scalars['Int']>;
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
  /** The HTTP path permalink for this commit comment. */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL permalink for this commit comment. */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  readonly viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
};


/** Represents a comment on a given Commit. */
export type GraphQLCommitCommentReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** Represents a comment on a given Commit. */
export type GraphQLCommitCommentUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for CommitComment. */
export type GraphQLCommitCommentConnection = {
  readonly __typename?: 'CommitCommentConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCommitCommentEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCommitComment>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCommitCommentEdge = {
  readonly __typename?: 'CommitCommentEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCommitComment>;
};

/** A thread of comments on a commit. */
export type GraphQLCommitCommentThread = GraphQLNode & GraphQLRepositoryNode & {
  readonly __typename?: 'CommitCommentThread';
  /** The comments that exist in this thread. */
  readonly comments: GraphQLCommitCommentConnection;
  /** The commit the comments were made on. */
  readonly commit: Maybe<GraphQLCommit>;
  readonly id: Scalars['ID'];
  /** The file the comments were made on. */
  readonly path: Maybe<Scalars['String']>;
  /** The position in the diff for the commit that the comment was made on. */
  readonly position: Maybe<Scalars['Int']>;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
};


/** A thread of comments on a commit. */
export type GraphQLCommitCommentThreadCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for Commit. */
export type GraphQLCommitConnection = {
  readonly __typename?: 'CommitConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCommitEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCommit>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Ordering options for commit contribution connections. */
export type GraphQLCommitContributionOrder = {
  /** The field by which to order commit contributions. */
  readonly field: GraphQLCommitContributionOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which commit contribution connections can be ordered. */
export enum GraphQLCommitContributionOrderField {
  /** Order commit contributions by when they were made. */
  OCCURRED_AT = 'OCCURRED_AT',
  /** Order commit contributions by how many commits they represent. */
  COMMIT_COUNT = 'COMMIT_COUNT'
}

/** This aggregates commits made by a user within one repository. */
export type GraphQLCommitContributionsByRepository = {
  readonly __typename?: 'CommitContributionsByRepository';
  /** The commit contributions, each representing a day. */
  readonly contributions: GraphQLCreatedCommitContributionConnection;
  /** The repository in which the commits were made. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for the user's commits to the repository in this time range. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for the user's commits to the repository in this time range. */
  readonly url: Scalars['URI'];
};


/** This aggregates commits made by a user within one repository. */
export type GraphQLCommitContributionsByRepositoryContributionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLCommitContributionOrder>;
};

/** An edge in a connection. */
export type GraphQLCommitEdge = {
  readonly __typename?: 'CommitEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCommit>;
};

/** The connection type for Commit. */
export type GraphQLCommitHistoryConnection = {
  readonly __typename?: 'CommitHistoryConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCommitEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCommit>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** A message to include with a new commit */
export type GraphQLCommitMessage = {
  /** The headline of the message. */
  readonly headline: Scalars['String'];
  /** The body of the message. */
  readonly body: Maybe<Scalars['String']>;
};

/**
 * A git ref for a commit to be appended to.
 *
 * The ref must be a branch, i.e. its fully qualified name must start
 * with `refs/heads/` (although the input is not required to be fully
 * qualified).
 *
 * The Ref may be specified by its global node ID or by the
 * repository nameWithOwner and branch name.
 *
 * ### Examples
 *
 * Specify a branch using a global node ID:
 *
 *     { "id": "MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=" }
 *
 * Specify a branch using nameWithOwner and branch name:
 *
 *     {
 *       "nameWithOwner": "github/graphql-client",
 *       "branchName": "main"
 *     }
 */
export type GraphQLCommittableBranch = {
  /** The Node ID of the Ref to be updated. */
  readonly id: Maybe<Scalars['ID']>;
  /** The nameWithOwner of the repository to commit to. */
  readonly repositoryNameWithOwner: Maybe<Scalars['String']>;
  /** The unqualified name of the branch to append the commit to. */
  readonly branchName: Maybe<Scalars['String']>;
};

/** Represents a 'connected' event on a given issue or pull request. */
export type GraphQLConnectedEvent = GraphQLNode & {
  readonly __typename?: 'ConnectedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Reference originated in a different repository. */
  readonly isCrossRepository: Scalars['Boolean'];
  /** Issue or pull request that made the reference. */
  readonly source: GraphQLReferencedSubject;
  /** Issue or pull request which was connected. */
  readonly subject: GraphQLReferencedSubject;
};

/** Represents a contribution a user made on GitHub, such as opening an issue. */
export type GraphQLContribution = {
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  readonly isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  readonly occurredAt: Scalars['DateTime'];
  /** The HTTP path for this contribution. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  readonly url: Scalars['URI'];
  /** The user who made this contribution. */
  readonly user: GraphQLUser;
};

/** A calendar of contributions made on GitHub by a user. */
export type GraphQLContributionCalendar = {
  readonly __typename?: 'ContributionCalendar';
  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */
  readonly colors: ReadonlyArray<Scalars['String']>;
  /** Determine if the color set was chosen because it's currently Halloween. */
  readonly isHalloween: Scalars['Boolean'];
  /** A list of the months of contributions in this calendar. */
  readonly months: ReadonlyArray<GraphQLContributionCalendarMonth>;
  /** The count of total contributions in the calendar. */
  readonly totalContributions: Scalars['Int'];
  /** A list of the weeks of contributions in this calendar. */
  readonly weeks: ReadonlyArray<GraphQLContributionCalendarWeek>;
};

/** Represents a single day of contributions on GitHub by a user. */
export type GraphQLContributionCalendarDay = {
  readonly __typename?: 'ContributionCalendarDay';
  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */
  readonly color: Scalars['String'];
  /** How many contributions were made by the user on this day. */
  readonly contributionCount: Scalars['Int'];
  /** Indication of contributions, relative to other days. Can be used to indicate which color to represent this day on a calendar. */
  readonly contributionLevel: GraphQLContributionLevel;
  /** The day this square represents. */
  readonly date: Scalars['Date'];
  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */
  readonly weekday: Scalars['Int'];
};

/** A month of contributions in a user's contribution graph. */
export type GraphQLContributionCalendarMonth = {
  readonly __typename?: 'ContributionCalendarMonth';
  /** The date of the first day of this month. */
  readonly firstDay: Scalars['Date'];
  /** The name of the month. */
  readonly name: Scalars['String'];
  /** How many weeks started in this month. */
  readonly totalWeeks: Scalars['Int'];
  /** The year the month occurred in. */
  readonly year: Scalars['Int'];
};

/** A week of contributions in a user's contribution graph. */
export type GraphQLContributionCalendarWeek = {
  readonly __typename?: 'ContributionCalendarWeek';
  /** The days of contributions in this week. */
  readonly contributionDays: ReadonlyArray<GraphQLContributionCalendarDay>;
  /** The date of the earliest square in this week. */
  readonly firstDay: Scalars['Date'];
};

/** Varying levels of contributions from none to many. */
export enum GraphQLContributionLevel {
  /** No contributions occurred. */
  NONE = 'NONE',
  /** Lowest 25% of days of contributions. */
  FIRST_QUARTILE = 'FIRST_QUARTILE',
  /** Second lowest 25% of days of contributions. More contributions than the first quartile. */
  SECOND_QUARTILE = 'SECOND_QUARTILE',
  /** Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */
  THIRD_QUARTILE = 'THIRD_QUARTILE',
  /** Highest 25% of days of contributions. More contributions than the third quartile. */
  FOURTH_QUARTILE = 'FOURTH_QUARTILE'
}

/** Ordering options for contribution connections. */
export type GraphQLContributionOrder = {
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollection = {
  readonly __typename?: 'ContributionsCollection';
  /** Commit contributions made by the user, grouped by repository. */
  readonly commitContributionsByRepository: ReadonlyArray<GraphQLCommitContributionsByRepository>;
  /** A calendar of this user's contributions on GitHub. */
  readonly contributionCalendar: GraphQLContributionCalendar;
  /** The years the user has been making contributions with the most recent year first. */
  readonly contributionYears: ReadonlyArray<Scalars['Int']>;
  /** Determine if this collection's time span ends in the current month. */
  readonly doesEndInCurrentMonth: Scalars['Boolean'];
  /** The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  readonly earliestRestrictedContributionDate: Maybe<Scalars['Date']>;
  /** The ending date and time of this collection. */
  readonly endedAt: Scalars['DateTime'];
  /** The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  readonly firstIssueContribution: Maybe<GraphQLCreatedIssueOrRestrictedContribution>;
  /** The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned. */
  readonly firstPullRequestContribution: Maybe<GraphQLCreatedPullRequestOrRestrictedContribution>;
  /** The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned. */
  readonly firstRepositoryContribution: Maybe<GraphQLCreatedRepositoryOrRestrictedContribution>;
  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */
  readonly hasActivityInThePast: Scalars['Boolean'];
  /** Determine if there are any contributions in this collection. */
  readonly hasAnyContributions: Scalars['Boolean'];
  /** Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts. */
  readonly hasAnyRestrictedContributions: Scalars['Boolean'];
  /** Whether or not the collector's time span is all within the same day. */
  readonly isSingleDay: Scalars['Boolean'];
  /** A list of issues the user opened. */
  readonly issueContributions: GraphQLCreatedIssueContributionConnection;
  /** Issue contributions made by the user, grouped by repository. */
  readonly issueContributionsByRepository: ReadonlyArray<GraphQLIssueContributionsByRepository>;
  /** When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false. */
  readonly joinedGitHubContribution: Maybe<GraphQLJoinedGitHubContribution>;
  /** The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts. */
  readonly latestRestrictedContributionDate: Maybe<Scalars['Date']>;
  /**
   * When this collection's time range does not include any activity from the user, use this
   * to get a different collection from an earlier time range that does have activity.
   */
  readonly mostRecentCollectionWithActivity: Maybe<GraphQLContributionsCollection>;
  /**
   * Returns a different contributions collection from an earlier time range than this one
   * that does not have any contributions.
   */
  readonly mostRecentCollectionWithoutActivity: Maybe<GraphQLContributionsCollection>;
  /**
   * The issue the user opened on GitHub that received the most comments in the specified
   * time frame.
   */
  readonly popularIssueContribution: Maybe<GraphQLCreatedIssueContribution>;
  /**
   * The pull request the user opened on GitHub that received the most comments in the
   * specified time frame.
   */
  readonly popularPullRequestContribution: Maybe<GraphQLCreatedPullRequestContribution>;
  /** Pull request contributions made by the user. */
  readonly pullRequestContributions: GraphQLCreatedPullRequestContributionConnection;
  /** Pull request contributions made by the user, grouped by repository. */
  readonly pullRequestContributionsByRepository: ReadonlyArray<GraphQLPullRequestContributionsByRepository>;
  /** Pull request review contributions made by the user. */
  readonly pullRequestReviewContributions: GraphQLCreatedPullRequestReviewContributionConnection;
  /** Pull request review contributions made by the user, grouped by repository. */
  readonly pullRequestReviewContributionsByRepository: ReadonlyArray<GraphQLPullRequestReviewContributionsByRepository>;
  /** A list of repositories owned by the user that the user created in this time range. */
  readonly repositoryContributions: GraphQLCreatedRepositoryContributionConnection;
  /** A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts. */
  readonly restrictedContributionsCount: Scalars['Int'];
  /** The beginning date and time of this collection. */
  readonly startedAt: Scalars['DateTime'];
  /** How many commits were made by the user in this time span. */
  readonly totalCommitContributions: Scalars['Int'];
  /** How many issues the user opened. */
  readonly totalIssueContributions: Scalars['Int'];
  /** How many pull requests the user opened. */
  readonly totalPullRequestContributions: Scalars['Int'];
  /** How many pull request reviews the user left. */
  readonly totalPullRequestReviewContributions: Scalars['Int'];
  /** How many different repositories the user committed to. */
  readonly totalRepositoriesWithContributedCommits: Scalars['Int'];
  /** How many different repositories the user opened issues in. */
  readonly totalRepositoriesWithContributedIssues: Scalars['Int'];
  /** How many different repositories the user left pull request reviews in. */
  readonly totalRepositoriesWithContributedPullRequestReviews: Scalars['Int'];
  /** How many different repositories the user opened pull requests in. */
  readonly totalRepositoriesWithContributedPullRequests: Scalars['Int'];
  /** How many repositories the user created. */
  readonly totalRepositoryContributions: Scalars['Int'];
  /** The user who made the contributions in this collection. */
  readonly user: GraphQLUser;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionCommitContributionsByRepositoryArgs = {
  maxRepositories?: Maybe<Scalars['Int']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionIssueContributionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  excludeFirst?: Maybe<Scalars['Boolean']>;
  excludePopular?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<GraphQLContributionOrder>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionIssueContributionsByRepositoryArgs = {
  maxRepositories?: Maybe<Scalars['Int']>;
  excludeFirst?: Maybe<Scalars['Boolean']>;
  excludePopular?: Maybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionPullRequestContributionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  excludeFirst?: Maybe<Scalars['Boolean']>;
  excludePopular?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<GraphQLContributionOrder>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionPullRequestContributionsByRepositoryArgs = {
  maxRepositories?: Maybe<Scalars['Int']>;
  excludeFirst?: Maybe<Scalars['Boolean']>;
  excludePopular?: Maybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionPullRequestReviewContributionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLContributionOrder>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionPullRequestReviewContributionsByRepositoryArgs = {
  maxRepositories?: Maybe<Scalars['Int']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionRepositoryContributionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  excludeFirst?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<GraphQLContributionOrder>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionTotalIssueContributionsArgs = {
  excludeFirst?: Maybe<Scalars['Boolean']>;
  excludePopular?: Maybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionTotalPullRequestContributionsArgs = {
  excludeFirst?: Maybe<Scalars['Boolean']>;
  excludePopular?: Maybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionTotalRepositoriesWithContributedIssuesArgs = {
  excludeFirst?: Maybe<Scalars['Boolean']>;
  excludePopular?: Maybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionTotalRepositoriesWithContributedPullRequestsArgs = {
  excludeFirst?: Maybe<Scalars['Boolean']>;
  excludePopular?: Maybe<Scalars['Boolean']>;
};


/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */
export type GraphQLContributionsCollectionTotalRepositoryContributionsArgs = {
  excludeFirst?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of ConvertProjectCardNoteToIssue */
export type GraphQLConvertProjectCardNoteToIssueInput = {
  /** The ProjectCard ID to convert. */
  readonly projectCardId: Scalars['ID'];
  /** The ID of the repository to create the issue in. */
  readonly repositoryId: Scalars['ID'];
  /** The title of the newly created issue. Defaults to the card's note text. */
  readonly title: Maybe<Scalars['String']>;
  /** The body of the newly created issue. */
  readonly body: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ConvertProjectCardNoteToIssue */
export type GraphQLConvertProjectCardNoteToIssuePayload = {
  readonly __typename?: 'ConvertProjectCardNoteToIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated ProjectCard. */
  readonly projectCard: Maybe<GraphQLProjectCard>;
};

/** Autogenerated input type of ConvertPullRequestToDraft */
export type GraphQLConvertPullRequestToDraftInput = {
  /** ID of the pull request to convert to draft */
  readonly pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ConvertPullRequestToDraft */
export type GraphQLConvertPullRequestToDraftPayload = {
  readonly __typename?: 'ConvertPullRequestToDraftPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The pull request that is now a draft. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Represents a 'convert_to_draft' event on a given pull request. */
export type GraphQLConvertToDraftEvent = GraphQLNode & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'ConvertToDraftEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
  /** The HTTP path for this convert to draft event. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this convert to draft event. */
  readonly url: Scalars['URI'];
};

/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
export type GraphQLConvertedNoteToIssueEvent = GraphQLNode & {
  readonly __typename?: 'ConvertedNoteToIssueEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
};

/** Represents a 'converted_to_discussion' event on a given issue. */
export type GraphQLConvertedToDiscussionEvent = GraphQLNode & {
  readonly __typename?: 'ConvertedToDiscussionEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The discussion that the issue was converted into. */
  readonly discussion: Maybe<GraphQLDiscussion>;
  readonly id: Scalars['ID'];
};

/** Autogenerated input type of CreateBranchProtectionRule */
export type GraphQLCreateBranchProtectionRuleInput = {
  /** The global relay id of the repository in which a new branch protection rule should be created in. */
  readonly repositoryId: Scalars['ID'];
  /** The glob-like pattern used to determine matching branches. */
  readonly pattern: Scalars['String'];
  /** Are approving reviews required to update matching branches. */
  readonly requiresApprovingReviews: Maybe<Scalars['Boolean']>;
  /** Number of approving reviews required to update matching branches. */
  readonly requiredApprovingReviewCount: Maybe<Scalars['Int']>;
  /** Are commits required to be signed. */
  readonly requiresCommitSignatures: Maybe<Scalars['Boolean']>;
  /** Are merge commits prohibited from being pushed to this branch. */
  readonly requiresLinearHistory: Maybe<Scalars['Boolean']>;
  /** Is branch creation a protected operation. */
  readonly blocksCreations: Maybe<Scalars['Boolean']>;
  /** Are force pushes allowed on this branch. */
  readonly allowsForcePushes: Maybe<Scalars['Boolean']>;
  /** Can this branch be deleted. */
  readonly allowsDeletions: Maybe<Scalars['Boolean']>;
  /** Can admins overwrite branch protection. */
  readonly isAdminEnforced: Maybe<Scalars['Boolean']>;
  /** Are status checks required to update matching branches. */
  readonly requiresStatusChecks: Maybe<Scalars['Boolean']>;
  /** Are branches required to be up to date before merging. */
  readonly requiresStrictStatusChecks: Maybe<Scalars['Boolean']>;
  /** Are reviews from code owners required to update matching branches. */
  readonly requiresCodeOwnerReviews: Maybe<Scalars['Boolean']>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  readonly dismissesStaleReviews: Maybe<Scalars['Boolean']>;
  /** Is dismissal of pull request reviews restricted. */
  readonly restrictsReviewDismissals: Maybe<Scalars['Boolean']>;
  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  readonly reviewDismissalActorIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */
  readonly bypassPullRequestActorIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */
  readonly bypassForcePushActorIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** Is pushing to matching branches restricted. */
  readonly restrictsPushes: Maybe<Scalars['Boolean']>;
  /** A list of User, Team or App IDs allowed to push to matching branches. */
  readonly pushActorIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  readonly requiredStatusCheckContexts: Maybe<ReadonlyArray<Scalars['String']>>;
  /** The list of required status checks */
  readonly requiredStatusChecks: Maybe<ReadonlyArray<GraphQLRequiredStatusCheckInput>>;
  /** Are conversations required to be resolved before merging. */
  readonly requiresConversationResolution: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateBranchProtectionRule */
export type GraphQLCreateBranchProtectionRulePayload = {
  readonly __typename?: 'CreateBranchProtectionRulePayload';
  /** The newly created BranchProtectionRule. */
  readonly branchProtectionRule: Maybe<GraphQLBranchProtectionRule>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateCheckRun */
export type GraphQLCreateCheckRunInput = {
  /** The node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** The name of the check. */
  readonly name: Scalars['String'];
  /** The SHA of the head commit. */
  readonly headSha: Scalars['GitObjectID'];
  /** The URL of the integrator's site that has the full details of the check. */
  readonly detailsUrl: Maybe<Scalars['URI']>;
  /** A reference for the run on the integrator's system. */
  readonly externalId: Maybe<Scalars['String']>;
  /** The current status. */
  readonly status: Maybe<GraphQLRequestableCheckStatusState>;
  /** The time that the check run began. */
  readonly startedAt: Maybe<Scalars['DateTime']>;
  /** The final conclusion of the check. */
  readonly conclusion: Maybe<GraphQLCheckConclusionState>;
  /** The time that the check run finished. */
  readonly completedAt: Maybe<Scalars['DateTime']>;
  /** Descriptive details about the run. */
  readonly output: Maybe<GraphQLCheckRunOutput>;
  /** Possible further actions the integrator can perform, which a user may trigger. */
  readonly actions: Maybe<ReadonlyArray<GraphQLCheckRunAction>>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateCheckRun */
export type GraphQLCreateCheckRunPayload = {
  readonly __typename?: 'CreateCheckRunPayload';
  /** The newly created check run. */
  readonly checkRun: Maybe<GraphQLCheckRun>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateCheckSuite */
export type GraphQLCreateCheckSuiteInput = {
  /** The Node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** The SHA of the head commit. */
  readonly headSha: Scalars['GitObjectID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateCheckSuite */
export type GraphQLCreateCheckSuitePayload = {
  readonly __typename?: 'CreateCheckSuitePayload';
  /** The newly created check suite. */
  readonly checkSuite: Maybe<GraphQLCheckSuite>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateCommitOnBranch */
export type GraphQLCreateCommitOnBranchInput = {
  /** The Ref to be updated.  Must be a branch. */
  readonly branch: GraphQLCommittableBranch;
  /** A description of changes to files in this commit. */
  readonly fileChanges: Maybe<GraphQLFileChanges>;
  /** The commit message the be included with the commit. */
  readonly message: GraphQLCommitMessage;
  /** The git commit oid expected at the head of the branch prior to the commit */
  readonly expectedHeadOid: Scalars['GitObjectID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateCommitOnBranch */
export type GraphQLCreateCommitOnBranchPayload = {
  readonly __typename?: 'CreateCommitOnBranchPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new commit. */
  readonly commit: Maybe<GraphQLCommit>;
  /** The ref which has been updated to point to the new commit. */
  readonly ref: Maybe<GraphQLRef>;
};

/** Autogenerated input type of CreateDiscussion */
export type GraphQLCreateDiscussionInput = {
  /** The id of the repository on which to create the discussion. */
  readonly repositoryId: Scalars['ID'];
  /** The title of the discussion. */
  readonly title: Scalars['String'];
  /** The body of the discussion. */
  readonly body: Scalars['String'];
  /** The id of the discussion category to associate with this discussion. */
  readonly categoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateDiscussion */
export type GraphQLCreateDiscussionPayload = {
  readonly __typename?: 'CreateDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The discussion that was just created. */
  readonly discussion: Maybe<GraphQLDiscussion>;
};

/** Autogenerated input type of CreateEnterpriseOrganization */
export type GraphQLCreateEnterpriseOrganizationInput = {
  /** The ID of the enterprise owning the new organization. */
  readonly enterpriseId: Scalars['ID'];
  /** The login of the new organization. */
  readonly login: Scalars['String'];
  /** The profile name of the new organization. */
  readonly profileName: Scalars['String'];
  /** The email used for sending billing receipts. */
  readonly billingEmail: Scalars['String'];
  /** The logins for the administrators of the new organization. */
  readonly adminLogins: ReadonlyArray<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateEnterpriseOrganization */
export type GraphQLCreateEnterpriseOrganizationPayload = {
  readonly __typename?: 'CreateEnterpriseOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise that owns the created organization. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** The organization that was created. */
  readonly organization: Maybe<GraphQLOrganization>;
};

/** Autogenerated input type of CreateEnvironment */
export type GraphQLCreateEnvironmentInput = {
  /** The node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** The name of the environment. */
  readonly name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateEnvironment */
export type GraphQLCreateEnvironmentPayload = {
  readonly __typename?: 'CreateEnvironmentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new or existing environment. */
  readonly environment: Maybe<GraphQLEnvironment>;
};

/** Autogenerated input type of CreateIpAllowListEntry */
export type GraphQLCreateIpAllowListEntryInput = {
  /** The ID of the owner for which to create the new IP allow list entry. */
  readonly ownerId: Scalars['ID'];
  /** An IP address or range of addresses in CIDR notation. */
  readonly allowListValue: Scalars['String'];
  /** An optional name for the IP allow list entry. */
  readonly name: Maybe<Scalars['String']>;
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  readonly isActive: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateIpAllowListEntry */
export type GraphQLCreateIpAllowListEntryPayload = {
  readonly __typename?: 'CreateIpAllowListEntryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The IP allow list entry that was created. */
  readonly ipAllowListEntry: Maybe<GraphQLIpAllowListEntry>;
};

/** Autogenerated input type of CreateIssue */
export type GraphQLCreateIssueInput = {
  /** The Node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** The title for the issue. */
  readonly title: Scalars['String'];
  /** The body for the issue description. */
  readonly body: Maybe<Scalars['String']>;
  /** The Node ID for the user assignee for this issue. */
  readonly assigneeIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** The Node ID of the milestone for this issue. */
  readonly milestoneId: Maybe<Scalars['ID']>;
  /** An array of Node IDs of labels for this issue. */
  readonly labelIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** An array of Node IDs for projects associated with this issue. */
  readonly projectIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */
  readonly issueTemplate: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateIssue */
export type GraphQLCreateIssuePayload = {
  readonly __typename?: 'CreateIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new issue. */
  readonly issue: Maybe<GraphQLIssue>;
};

/** Autogenerated input type of CreateMigrationSource */
export type GraphQLCreateMigrationSourceInput = {
  /** The Octoshift migration source name. */
  readonly name: Scalars['String'];
  /** The Octoshift migration source URL. */
  readonly url: Scalars['String'];
  /** The Octoshift migration source access token. */
  readonly accessToken: Maybe<Scalars['String']>;
  /** The Octoshift migration source type. */
  readonly type: GraphQLMigrationSourceType;
  /** The ID of the organization that will own the Octoshift migration source. */
  readonly ownerId: Scalars['ID'];
  /** The GitHub personal access token of the user importing to the target repository. */
  readonly githubPat: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateMigrationSource */
export type GraphQLCreateMigrationSourcePayload = {
  readonly __typename?: 'CreateMigrationSourcePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The created Octoshift migration source. */
  readonly migrationSource: Maybe<GraphQLMigrationSource>;
};

/** Autogenerated input type of CreateProject */
export type GraphQLCreateProjectInput = {
  /** The owner ID to create the project under. */
  readonly ownerId: Scalars['ID'];
  /** The name of project. */
  readonly name: Scalars['String'];
  /** The description of project. */
  readonly body: Maybe<Scalars['String']>;
  /** The name of the GitHub-provided template. */
  readonly template: Maybe<GraphQLProjectTemplate>;
  /** A list of repository IDs to create as linked repositories for the project */
  readonly repositoryIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateProject */
export type GraphQLCreateProjectPayload = {
  readonly __typename?: 'CreateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new project. */
  readonly project: Maybe<GraphQLProject>;
};

/** Autogenerated input type of CreatePullRequest */
export type GraphQLCreatePullRequestInput = {
  /** The Node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository. You cannot update the base branch on a pull request to point
   * to another repository.
   */
  readonly baseRefName: Scalars['String'];
  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests
   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
   */
  readonly headRefName: Scalars['String'];
  /** The title of the pull request. */
  readonly title: Scalars['String'];
  /** The contents of the pull request. */
  readonly body: Maybe<Scalars['String']>;
  /** Indicates whether maintainers can modify the pull request. */
  readonly maintainerCanModify: Maybe<Scalars['Boolean']>;
  /** Indicates whether this pull request should be a draft. */
  readonly draft: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreatePullRequest */
export type GraphQLCreatePullRequestPayload = {
  readonly __typename?: 'CreatePullRequestPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new pull request. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Autogenerated input type of CreateRef */
export type GraphQLCreateRefInput = {
  /** The Node ID of the Repository to create the Ref in. */
  readonly repositoryId: Scalars['ID'];
  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */
  readonly name: Scalars['String'];
  /** The GitObjectID that the new Ref shall target. Must point to a commit. */
  readonly oid: Scalars['GitObjectID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateRef */
export type GraphQLCreateRefPayload = {
  readonly __typename?: 'CreateRefPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The newly created ref. */
  readonly ref: Maybe<GraphQLRef>;
};

/** Autogenerated input type of CreateRepository */
export type GraphQLCreateRepositoryInput = {
  /** The name of the new repository. */
  readonly name: Scalars['String'];
  /** The ID of the owner for the new repository. */
  readonly ownerId: Maybe<Scalars['ID']>;
  /** A short description of the new repository. */
  readonly description: Maybe<Scalars['String']>;
  /** Indicates the repository's visibility level. */
  readonly visibility: GraphQLRepositoryVisibility;
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  readonly template: Maybe<Scalars['Boolean']>;
  /** The URL for a web page about this repository. */
  readonly homepageUrl: Maybe<Scalars['URI']>;
  /** Indicates if the repository should have the wiki feature enabled. */
  readonly hasWikiEnabled: Maybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the issues feature enabled. */
  readonly hasIssuesEnabled: Maybe<Scalars['Boolean']>;
  /** When an organization is specified as the owner, this ID identifies the team that should be granted access to the new repository. */
  readonly teamId: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateRepository */
export type GraphQLCreateRepositoryPayload = {
  readonly __typename?: 'CreateRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new repository. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** Autogenerated input type of CreateSponsorsTier */
export type GraphQLCreateSponsorsTierInput = {
  /** The ID of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableLogin is not given. */
  readonly sponsorableId: Maybe<Scalars['ID']>;
  /** The username of the user or organization who owns the GitHub Sponsors profile. Defaults to the current user if omitted and sponsorableId is not given. */
  readonly sponsorableLogin: Maybe<Scalars['String']>;
  /** The value of the new tier in US dollars. Valid values: 1-12000. */
  readonly amount: Scalars['Int'];
  /** Whether sponsorships using this tier should happen monthly/yearly or just once. */
  readonly isRecurring: Maybe<Scalars['Boolean']>;
  /** Optional ID of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. */
  readonly repositoryId: Maybe<Scalars['ID']>;
  /** Optional login of the organization owner of the private repository that sponsors at this tier should gain read-only access to. Necessary if repositoryName is given. Will be ignored if repositoryId is given. */
  readonly repositoryOwnerLogin: Maybe<Scalars['String']>;
  /** Optional name of the private repository that sponsors at this tier should gain read-only access to. Must be owned by an organization. Necessary if repositoryOwnerLogin is given. Will be ignored if repositoryId is given. */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** Optional message new sponsors at this tier will receive. */
  readonly welcomeMessage: Maybe<Scalars['String']>;
  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */
  readonly description: Scalars['String'];
  /** Whether to make the tier available immediately for sponsors to choose. Defaults to creating a draft tier that will not be publicly visible. */
  readonly publish: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateSponsorsTier */
export type GraphQLCreateSponsorsTierPayload = {
  readonly __typename?: 'CreateSponsorsTierPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new tier. */
  readonly sponsorsTier: Maybe<GraphQLSponsorsTier>;
};

/** Autogenerated input type of CreateSponsorship */
export type GraphQLCreateSponsorshipInput = {
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  readonly sponsorId: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  readonly sponsorLogin: Maybe<Scalars['String']>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  readonly sponsorableId: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  readonly sponsorableLogin: Maybe<Scalars['String']>;
  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */
  readonly tierId: Maybe<Scalars['ID']>;
  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */
  readonly amount: Maybe<Scalars['Int']>;
  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */
  readonly isRecurring: Maybe<Scalars['Boolean']>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  readonly receiveEmails: Maybe<Scalars['Boolean']>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  readonly privacyLevel: Maybe<GraphQLSponsorshipPrivacy>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateSponsorship */
export type GraphQLCreateSponsorshipPayload = {
  readonly __typename?: 'CreateSponsorshipPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The sponsorship that was started. */
  readonly sponsorship: Maybe<GraphQLSponsorship>;
};

/** Autogenerated input type of CreateTeamDiscussionComment */
export type GraphQLCreateTeamDiscussionCommentInput = {
  /** The ID of the discussion to which the comment belongs. */
  readonly discussionId: Scalars['ID'];
  /** The content of the comment. */
  readonly body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateTeamDiscussionComment */
export type GraphQLCreateTeamDiscussionCommentPayload = {
  readonly __typename?: 'CreateTeamDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new comment. */
  readonly teamDiscussionComment: Maybe<GraphQLTeamDiscussionComment>;
};

/** Autogenerated input type of CreateTeamDiscussion */
export type GraphQLCreateTeamDiscussionInput = {
  /** The ID of the team to which the discussion belongs. */
  readonly teamId: Scalars['ID'];
  /** The title of the discussion. */
  readonly title: Scalars['String'];
  /** The content of the discussion. */
  readonly body: Scalars['String'];
  /** If true, restricts the visibility of this discussion to team members and organization admins. If false or not specified, allows any organization member to view this discussion. */
  readonly private: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateTeamDiscussion */
export type GraphQLCreateTeamDiscussionPayload = {
  readonly __typename?: 'CreateTeamDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new discussion. */
  readonly teamDiscussion: Maybe<GraphQLTeamDiscussion>;
};

/** Represents the contribution a user made by committing to a repository. */
export type GraphQLCreatedCommitContribution = GraphQLContribution & {
  readonly __typename?: 'CreatedCommitContribution';
  /** How many commits were made on this day to this repository by the user. */
  readonly commitCount: Scalars['Int'];
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  readonly isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  readonly occurredAt: Scalars['DateTime'];
  /** The repository the user made a commit in. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this contribution. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  readonly url: Scalars['URI'];
  /** The user who made this contribution. */
  readonly user: GraphQLUser;
};

/** The connection type for CreatedCommitContribution. */
export type GraphQLCreatedCommitContributionConnection = {
  readonly __typename?: 'CreatedCommitContributionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCreatedCommitContributionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCreatedCommitContribution>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of commits across days and repositories in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCreatedCommitContributionEdge = {
  readonly __typename?: 'CreatedCommitContributionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCreatedCommitContribution>;
};

/** Represents the contribution a user made on GitHub by opening an issue. */
export type GraphQLCreatedIssueContribution = GraphQLContribution & {
  readonly __typename?: 'CreatedIssueContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  readonly isRestricted: Scalars['Boolean'];
  /** The issue that was opened. */
  readonly issue: GraphQLIssue;
  /** When this contribution was made. */
  readonly occurredAt: Scalars['DateTime'];
  /** The HTTP path for this contribution. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  readonly url: Scalars['URI'];
  /** The user who made this contribution. */
  readonly user: GraphQLUser;
};

/** The connection type for CreatedIssueContribution. */
export type GraphQLCreatedIssueContributionConnection = {
  readonly __typename?: 'CreatedIssueContributionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCreatedIssueContributionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCreatedIssueContribution>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCreatedIssueContributionEdge = {
  readonly __typename?: 'CreatedIssueContributionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCreatedIssueContribution>;
};

/** Represents either a issue the viewer can access or a restricted contribution. */
export type GraphQLCreatedIssueOrRestrictedContribution = GraphQLCreatedIssueContribution | GraphQLRestrictedContribution;

/** Represents the contribution a user made on GitHub by opening a pull request. */
export type GraphQLCreatedPullRequestContribution = GraphQLContribution & {
  readonly __typename?: 'CreatedPullRequestContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  readonly isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  readonly occurredAt: Scalars['DateTime'];
  /** The pull request that was opened. */
  readonly pullRequest: GraphQLPullRequest;
  /** The HTTP path for this contribution. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  readonly url: Scalars['URI'];
  /** The user who made this contribution. */
  readonly user: GraphQLUser;
};

/** The connection type for CreatedPullRequestContribution. */
export type GraphQLCreatedPullRequestContributionConnection = {
  readonly __typename?: 'CreatedPullRequestContributionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCreatedPullRequestContributionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCreatedPullRequestContribution>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCreatedPullRequestContributionEdge = {
  readonly __typename?: 'CreatedPullRequestContributionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCreatedPullRequestContribution>;
};

/** Represents either a pull request the viewer can access or a restricted contribution. */
export type GraphQLCreatedPullRequestOrRestrictedContribution = GraphQLCreatedPullRequestContribution | GraphQLRestrictedContribution;

/** Represents the contribution a user made by leaving a review on a pull request. */
export type GraphQLCreatedPullRequestReviewContribution = GraphQLContribution & {
  readonly __typename?: 'CreatedPullRequestReviewContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  readonly isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  readonly occurredAt: Scalars['DateTime'];
  /** The pull request the user reviewed. */
  readonly pullRequest: GraphQLPullRequest;
  /** The review the user left on the pull request. */
  readonly pullRequestReview: GraphQLPullRequestReview;
  /** The repository containing the pull request that the user reviewed. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this contribution. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  readonly url: Scalars['URI'];
  /** The user who made this contribution. */
  readonly user: GraphQLUser;
};

/** The connection type for CreatedPullRequestReviewContribution. */
export type GraphQLCreatedPullRequestReviewContributionConnection = {
  readonly __typename?: 'CreatedPullRequestReviewContributionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCreatedPullRequestReviewContributionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCreatedPullRequestReviewContribution>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCreatedPullRequestReviewContributionEdge = {
  readonly __typename?: 'CreatedPullRequestReviewContributionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCreatedPullRequestReviewContribution>;
};

/** Represents the contribution a user made on GitHub by creating a repository. */
export type GraphQLCreatedRepositoryContribution = GraphQLContribution & {
  readonly __typename?: 'CreatedRepositoryContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  readonly isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  readonly occurredAt: Scalars['DateTime'];
  /** The repository that was created. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this contribution. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  readonly url: Scalars['URI'];
  /** The user who made this contribution. */
  readonly user: GraphQLUser;
};

/** The connection type for CreatedRepositoryContribution. */
export type GraphQLCreatedRepositoryContributionConnection = {
  readonly __typename?: 'CreatedRepositoryContributionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLCreatedRepositoryContributionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLCreatedRepositoryContribution>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLCreatedRepositoryContributionEdge = {
  readonly __typename?: 'CreatedRepositoryContributionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLCreatedRepositoryContribution>;
};

/** Represents either a repository the viewer can access or a restricted contribution. */
export type GraphQLCreatedRepositoryOrRestrictedContribution = GraphQLCreatedRepositoryContribution | GraphQLRestrictedContribution;

/** Represents a mention made by one issue or pull request to another. */
export type GraphQLCrossReferencedEvent = GraphQLUniformResourceLocatable & GraphQLNode & {
  readonly __typename?: 'CrossReferencedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Reference originated in a different repository. */
  readonly isCrossRepository: Scalars['Boolean'];
  /** Identifies when the reference was made. */
  readonly referencedAt: Scalars['DateTime'];
  /** The HTTP path for this pull request. */
  readonly resourcePath: Scalars['URI'];
  /** Issue or pull request that made the reference. */
  readonly source: GraphQLReferencedSubject;
  /** Issue or pull request to which the reference was made. */
  readonly target: GraphQLReferencedSubject;
  /** The HTTP URL for this pull request. */
  readonly url: Scalars['URI'];
  /** Checks if the target will be closed when the source is merged. */
  readonly willCloseTarget: Scalars['Boolean'];
};



/** Autogenerated input type of DeclineTopicSuggestion */
export type GraphQLDeclineTopicSuggestionInput = {
  /** The Node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** The name of the suggested topic. */
  readonly name: Scalars['String'];
  /** The reason why the suggested topic is declined. */
  readonly reason: GraphQLTopicSuggestionDeclineReason;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeclineTopicSuggestion */
export type GraphQLDeclineTopicSuggestionPayload = {
  readonly __typename?: 'DeclineTopicSuggestionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The declined topic. */
  readonly topic: Maybe<GraphQLTopic>;
};

/** The possible base permissions for repositories. */
export enum GraphQLDefaultRepositoryPermissionField {
  /** No access */
  NONE = 'NONE',
  /** Can read repos by default */
  READ = 'READ',
  /** Can read and write repos by default */
  WRITE = 'WRITE',
  /** Can read, write, and administrate repos by default */
  ADMIN = 'ADMIN'
}

/** Entities that can be deleted. */
export type GraphQLDeletable = {
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
};

/** Autogenerated input type of DeleteBranchProtectionRule */
export type GraphQLDeleteBranchProtectionRuleInput = {
  /** The global relay id of the branch protection rule to be deleted. */
  readonly branchProtectionRuleId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteBranchProtectionRule */
export type GraphQLDeleteBranchProtectionRulePayload = {
  readonly __typename?: 'DeleteBranchProtectionRulePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteDeployment */
export type GraphQLDeleteDeploymentInput = {
  /** The Node ID of the deployment to be deleted. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteDeployment */
export type GraphQLDeleteDeploymentPayload = {
  readonly __typename?: 'DeleteDeploymentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteDiscussionComment */
export type GraphQLDeleteDiscussionCommentInput = {
  /** The Node id of the discussion comment to delete. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteDiscussionComment */
export type GraphQLDeleteDiscussionCommentPayload = {
  readonly __typename?: 'DeleteDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The discussion comment that was just deleted. */
  readonly comment: Maybe<GraphQLDiscussionComment>;
};

/** Autogenerated input type of DeleteDiscussion */
export type GraphQLDeleteDiscussionInput = {
  /** The id of the discussion to delete. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteDiscussion */
export type GraphQLDeleteDiscussionPayload = {
  readonly __typename?: 'DeleteDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The discussion that was just deleted. */
  readonly discussion: Maybe<GraphQLDiscussion>;
};

/** Autogenerated input type of DeleteEnvironment */
export type GraphQLDeleteEnvironmentInput = {
  /** The Node ID of the environment to be deleted. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteEnvironment */
export type GraphQLDeleteEnvironmentPayload = {
  readonly __typename?: 'DeleteEnvironmentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteIpAllowListEntry */
export type GraphQLDeleteIpAllowListEntryInput = {
  /** The ID of the IP allow list entry to delete. */
  readonly ipAllowListEntryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteIpAllowListEntry */
export type GraphQLDeleteIpAllowListEntryPayload = {
  readonly __typename?: 'DeleteIpAllowListEntryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The IP allow list entry that was deleted. */
  readonly ipAllowListEntry: Maybe<GraphQLIpAllowListEntry>;
};

/** Autogenerated input type of DeleteIssueComment */
export type GraphQLDeleteIssueCommentInput = {
  /** The ID of the comment to delete. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteIssueComment */
export type GraphQLDeleteIssueCommentPayload = {
  readonly __typename?: 'DeleteIssueCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteIssue */
export type GraphQLDeleteIssueInput = {
  /** The ID of the issue to delete. */
  readonly issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteIssue */
export type GraphQLDeleteIssuePayload = {
  readonly __typename?: 'DeleteIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The repository the issue belonged to */
  readonly repository: Maybe<GraphQLRepository>;
};

/** Autogenerated input type of DeleteProjectCard */
export type GraphQLDeleteProjectCardInput = {
  /** The id of the card to delete. */
  readonly cardId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteProjectCard */
export type GraphQLDeleteProjectCardPayload = {
  readonly __typename?: 'DeleteProjectCardPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The column the deleted card was in. */
  readonly column: Maybe<GraphQLProjectColumn>;
  /** The deleted card ID. */
  readonly deletedCardId: Maybe<Scalars['ID']>;
};

/** Autogenerated input type of DeleteProjectColumn */
export type GraphQLDeleteProjectColumnInput = {
  /** The id of the column to delete. */
  readonly columnId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteProjectColumn */
export type GraphQLDeleteProjectColumnPayload = {
  readonly __typename?: 'DeleteProjectColumnPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The deleted column ID. */
  readonly deletedColumnId: Maybe<Scalars['ID']>;
  /** The project the deleted column was in. */
  readonly project: Maybe<GraphQLProject>;
};

/** Autogenerated input type of DeleteProject */
export type GraphQLDeleteProjectInput = {
  /** The Project ID to update. */
  readonly projectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteProjectNextItem */
export type GraphQLDeleteProjectNextItemInput = {
  /** The ID of the Project from which the item should be removed. */
  readonly projectId: Scalars['ID'];
  /** The ID of the item to be removed. */
  readonly itemId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteProjectNextItem */
export type GraphQLDeleteProjectNextItemPayload = {
  readonly __typename?: 'DeleteProjectNextItemPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The ID of the deleted item. */
  readonly deletedItemId: Maybe<Scalars['ID']>;
};

/** Autogenerated return type of DeleteProject */
export type GraphQLDeleteProjectPayload = {
  readonly __typename?: 'DeleteProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The repository or organization the project was removed from. */
  readonly owner: Maybe<GraphQLProjectOwner>;
};

/** Autogenerated input type of DeletePullRequestReviewComment */
export type GraphQLDeletePullRequestReviewCommentInput = {
  /** The ID of the comment to delete. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeletePullRequestReviewComment */
export type GraphQLDeletePullRequestReviewCommentPayload = {
  readonly __typename?: 'DeletePullRequestReviewCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The pull request review the deleted comment belonged to. */
  readonly pullRequestReview: Maybe<GraphQLPullRequestReview>;
};

/** Autogenerated input type of DeletePullRequestReview */
export type GraphQLDeletePullRequestReviewInput = {
  /** The Node ID of the pull request review to delete. */
  readonly pullRequestReviewId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeletePullRequestReview */
export type GraphQLDeletePullRequestReviewPayload = {
  readonly __typename?: 'DeletePullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The deleted pull request review. */
  readonly pullRequestReview: Maybe<GraphQLPullRequestReview>;
};

/** Autogenerated input type of DeleteRef */
export type GraphQLDeleteRefInput = {
  /** The Node ID of the Ref to be deleted. */
  readonly refId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteRef */
export type GraphQLDeleteRefPayload = {
  readonly __typename?: 'DeleteRefPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteTeamDiscussionComment */
export type GraphQLDeleteTeamDiscussionCommentInput = {
  /** The ID of the comment to delete. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteTeamDiscussionComment */
export type GraphQLDeleteTeamDiscussionCommentPayload = {
  readonly __typename?: 'DeleteTeamDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteTeamDiscussion */
export type GraphQLDeleteTeamDiscussionInput = {
  /** The discussion ID to delete. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteTeamDiscussion */
export type GraphQLDeleteTeamDiscussionPayload = {
  readonly __typename?: 'DeleteTeamDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteVerifiableDomain */
export type GraphQLDeleteVerifiableDomainInput = {
  /** The ID of the verifiable domain to delete. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteVerifiableDomain */
export type GraphQLDeleteVerifiableDomainPayload = {
  readonly __typename?: 'DeleteVerifiableDomainPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The owning account from which the domain was deleted. */
  readonly owner: Maybe<GraphQLVerifiableDomainOwner>;
};

/** Represents a 'demilestoned' event on a given issue or pull request. */
export type GraphQLDemilestonedEvent = GraphQLNode & {
  readonly __typename?: 'DemilestonedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Identifies the milestone title associated with the 'demilestoned' event. */
  readonly milestoneTitle: Scalars['String'];
  /** Object referenced by event. */
  readonly subject: GraphQLMilestoneItem;
};

/** A Dependabot Update for a dependency in a repository */
export type GraphQLDependabotUpdate = GraphQLRepositoryNode & {
  readonly __typename?: 'DependabotUpdate';
  /** The error from a dependency update */
  readonly error: Maybe<GraphQLDependabotUpdateError>;
  /** The associated pull request */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
};

/** An error produced from a Dependabot Update */
export type GraphQLDependabotUpdateError = {
  readonly __typename?: 'DependabotUpdateError';
  /** The body of the error */
  readonly body: Scalars['String'];
  /** The error code */
  readonly errorType: Scalars['String'];
  /** The title of the error */
  readonly title: Scalars['String'];
};

/** The possible ecosystems of a dependency graph package. */
export enum GraphQLDependencyGraphEcosystem {
  /** Ruby gems hosted at RubyGems.org */
  RUBYGEMS = 'RUBYGEMS',
  /** JavaScript packages hosted at npmjs.com */
  NPM = 'NPM',
  /** Python packages hosted at PyPI.org */
  PIP = 'PIP',
  /** Java artifacts hosted at the Maven central repository */
  MAVEN = 'MAVEN',
  /** .NET packages hosted at the NuGet Gallery */
  NUGET = 'NUGET',
  /** PHP packages hosted at packagist.org */
  COMPOSER = 'COMPOSER',
  /** Go modules */
  GO = 'GO',
  /** GitHub Actions */
  ACTIONS = 'ACTIONS'
}

/** A repository deploy key. */
export type GraphQLDeployKey = GraphQLNode & {
  readonly __typename?: 'DeployKey';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** The deploy key. */
  readonly key: Scalars['String'];
  /** Whether or not the deploy key is read only. */
  readonly readOnly: Scalars['Boolean'];
  /** The deploy key title. */
  readonly title: Scalars['String'];
  /** Whether or not the deploy key has been verified. */
  readonly verified: Scalars['Boolean'];
};

/** The connection type for DeployKey. */
export type GraphQLDeployKeyConnection = {
  readonly __typename?: 'DeployKeyConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDeployKeyEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDeployKey>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDeployKeyEdge = {
  readonly __typename?: 'DeployKeyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDeployKey>;
};

/** Represents a 'deployed' event on a given pull request. */
export type GraphQLDeployedEvent = GraphQLNode & {
  readonly __typename?: 'DeployedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The deployment associated with the 'deployed' event. */
  readonly deployment: GraphQLDeployment;
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
  /** The ref associated with the 'deployed' event. */
  readonly ref: Maybe<GraphQLRef>;
};

/** Represents triggered deployment instance. */
export type GraphQLDeployment = GraphQLNode & {
  readonly __typename?: 'Deployment';
  /** Identifies the commit sha of the deployment. */
  readonly commit: Maybe<GraphQLCommit>;
  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */
  readonly commitOid: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the actor who triggered the deployment. */
  readonly creator: GraphQLActor;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The deployment description. */
  readonly description: Maybe<Scalars['String']>;
  /** The latest environment to which this deployment was made. */
  readonly environment: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The latest environment to which this deployment was made. */
  readonly latestEnvironment: Maybe<Scalars['String']>;
  /** The latest status of this deployment. */
  readonly latestStatus: Maybe<GraphQLDeploymentStatus>;
  /** The original environment to which this deployment was made. */
  readonly originalEnvironment: Maybe<Scalars['String']>;
  /** Extra information that a deployment system might need. */
  readonly payload: Maybe<Scalars['String']>;
  /** Identifies the Ref of the deployment, if the deployment was created by ref. */
  readonly ref: Maybe<GraphQLRef>;
  /** Identifies the repository associated with the deployment. */
  readonly repository: GraphQLRepository;
  /** The current state of the deployment. */
  readonly state: Maybe<GraphQLDeploymentState>;
  /** A list of statuses associated with the deployment. */
  readonly statuses: Maybe<GraphQLDeploymentStatusConnection>;
  /** The deployment task. */
  readonly task: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};


/** Represents triggered deployment instance. */
export type GraphQLDeploymentStatusesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for Deployment. */
export type GraphQLDeploymentConnection = {
  readonly __typename?: 'DeploymentConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDeployment>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDeploymentEdge = {
  readonly __typename?: 'DeploymentEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDeployment>;
};

/** Represents a 'deployment_environment_changed' event on a given pull request. */
export type GraphQLDeploymentEnvironmentChangedEvent = GraphQLNode & {
  readonly __typename?: 'DeploymentEnvironmentChangedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The deployment status that updated the deployment environment. */
  readonly deploymentStatus: GraphQLDeploymentStatus;
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
};

/** Ordering options for deployment connections */
export type GraphQLDeploymentOrder = {
  /** The field to order deployments by. */
  readonly field: GraphQLDeploymentOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which deployment connections can be ordered. */
export enum GraphQLDeploymentOrderField {
  /** Order collection by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** A protection rule. */
export type GraphQLDeploymentProtectionRule = {
  readonly __typename?: 'DeploymentProtectionRule';
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The teams or users that can review the deployment */
  readonly reviewers: GraphQLDeploymentReviewerConnection;
  /** The timeout in minutes for this protection rule. */
  readonly timeout: Scalars['Int'];
  /** The type of protection rule. */
  readonly type: GraphQLDeploymentProtectionRuleType;
};


/** A protection rule. */
export type GraphQLDeploymentProtectionRuleReviewersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for DeploymentProtectionRule. */
export type GraphQLDeploymentProtectionRuleConnection = {
  readonly __typename?: 'DeploymentProtectionRuleConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentProtectionRuleEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentProtectionRule>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDeploymentProtectionRuleEdge = {
  readonly __typename?: 'DeploymentProtectionRuleEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDeploymentProtectionRule>;
};

/** The possible protection rule types. */
export enum GraphQLDeploymentProtectionRuleType {
  /** Required reviewers */
  REQUIRED_REVIEWERS = 'REQUIRED_REVIEWERS',
  /** Wait timer */
  WAIT_TIMER = 'WAIT_TIMER'
}

/** A request to deploy a workflow run to an environment. */
export type GraphQLDeploymentRequest = {
  readonly __typename?: 'DeploymentRequest';
  /** Whether or not the current user can approve the deployment */
  readonly currentUserCanApprove: Scalars['Boolean'];
  /** The target environment of the deployment */
  readonly environment: GraphQLEnvironment;
  /** The teams or users that can review the deployment */
  readonly reviewers: GraphQLDeploymentReviewerConnection;
  /** The wait timer in minutes configured in the environment */
  readonly waitTimer: Scalars['Int'];
  /** The wait timer in minutes configured in the environment */
  readonly waitTimerStartedAt: Maybe<Scalars['DateTime']>;
};


/** A request to deploy a workflow run to an environment. */
export type GraphQLDeploymentRequestReviewersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for DeploymentRequest. */
export type GraphQLDeploymentRequestConnection = {
  readonly __typename?: 'DeploymentRequestConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentRequestEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentRequest>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDeploymentRequestEdge = {
  readonly __typename?: 'DeploymentRequestEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDeploymentRequest>;
};

/** A deployment review. */
export type GraphQLDeploymentReview = GraphQLNode & {
  readonly __typename?: 'DeploymentReview';
  /** The comment the user left. */
  readonly comment: Scalars['String'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The environments approved or rejected */
  readonly environments: GraphQLEnvironmentConnection;
  readonly id: Scalars['ID'];
  /** The decision of the user. */
  readonly state: GraphQLDeploymentReviewState;
  /** The user that reviewed the deployment. */
  readonly user: GraphQLUser;
};


/** A deployment review. */
export type GraphQLDeploymentReviewEnvironmentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for DeploymentReview. */
export type GraphQLDeploymentReviewConnection = {
  readonly __typename?: 'DeploymentReviewConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentReviewEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentReview>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDeploymentReviewEdge = {
  readonly __typename?: 'DeploymentReviewEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDeploymentReview>;
};

/** The possible states for a deployment review. */
export enum GraphQLDeploymentReviewState {
  /** The deployment was approved. */
  APPROVED = 'APPROVED',
  /** The deployment was rejected. */
  REJECTED = 'REJECTED'
}

/** Users and teams. */
export type GraphQLDeploymentReviewer = GraphQLTeam | GraphQLUser;

/** The connection type for DeploymentReviewer. */
export type GraphQLDeploymentReviewerConnection = {
  readonly __typename?: 'DeploymentReviewerConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentReviewerEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentReviewer>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDeploymentReviewerEdge = {
  readonly __typename?: 'DeploymentReviewerEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDeploymentReviewer>;
};

/** The possible states in which a deployment can be. */
export enum GraphQLDeploymentState {
  /** The pending deployment was not updated after 30 minutes. */
  ABANDONED = 'ABANDONED',
  /** The deployment is currently active. */
  ACTIVE = 'ACTIVE',
  /** An inactive transient deployment. */
  DESTROYED = 'DESTROYED',
  /** The deployment experienced an error. */
  ERROR = 'ERROR',
  /** The deployment has failed. */
  FAILURE = 'FAILURE',
  /** The deployment is inactive. */
  INACTIVE = 'INACTIVE',
  /** The deployment is pending. */
  PENDING = 'PENDING',
  /** The deployment has queued */
  QUEUED = 'QUEUED',
  /** The deployment is in progress. */
  IN_PROGRESS = 'IN_PROGRESS',
  /** The deployment is waiting. */
  WAITING = 'WAITING'
}

/** Describes the status of a given deployment attempt. */
export type GraphQLDeploymentStatus = GraphQLNode & {
  readonly __typename?: 'DeploymentStatus';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the actor who triggered the deployment. */
  readonly creator: GraphQLActor;
  /** Identifies the deployment associated with status. */
  readonly deployment: GraphQLDeployment;
  /** Identifies the description of the deployment. */
  readonly description: Maybe<Scalars['String']>;
  /** Identifies the environment URL of the deployment. */
  readonly environmentUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** Identifies the log URL of the deployment. */
  readonly logUrl: Maybe<Scalars['URI']>;
  /** Identifies the current state of the deployment. */
  readonly state: GraphQLDeploymentStatusState;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** The connection type for DeploymentStatus. */
export type GraphQLDeploymentStatusConnection = {
  readonly __typename?: 'DeploymentStatusConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentStatusEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDeploymentStatus>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDeploymentStatusEdge = {
  readonly __typename?: 'DeploymentStatusEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDeploymentStatus>;
};

/** The possible states for a deployment status. */
export enum GraphQLDeploymentStatusState {
  /** The deployment is pending. */
  PENDING = 'PENDING',
  /** The deployment was successful. */
  SUCCESS = 'SUCCESS',
  /** The deployment has failed. */
  FAILURE = 'FAILURE',
  /** The deployment is inactive. */
  INACTIVE = 'INACTIVE',
  /** The deployment experienced an error. */
  ERROR = 'ERROR',
  /** The deployment is queued */
  QUEUED = 'QUEUED',
  /** The deployment is in progress. */
  IN_PROGRESS = 'IN_PROGRESS',
  /** The deployment is waiting. */
  WAITING = 'WAITING'
}

/** The possible sides of a diff. */
export enum GraphQLDiffSide {
  /** The left side of the diff. */
  LEFT = 'LEFT',
  /** The right side of the diff. */
  RIGHT = 'RIGHT'
}

/** Autogenerated input type of DisablePullRequestAutoMerge */
export type GraphQLDisablePullRequestAutoMergeInput = {
  /** ID of the pull request to disable auto merge on. */
  readonly pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DisablePullRequestAutoMerge */
export type GraphQLDisablePullRequestAutoMergePayload = {
  readonly __typename?: 'DisablePullRequestAutoMergePayload';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The pull request auto merge was disabled on. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Represents a 'disconnected' event on a given issue or pull request. */
export type GraphQLDisconnectedEvent = GraphQLNode & {
  readonly __typename?: 'DisconnectedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Reference originated in a different repository. */
  readonly isCrossRepository: Scalars['Boolean'];
  /** Issue or pull request from which the issue was disconnected. */
  readonly source: GraphQLReferencedSubject;
  /** Issue or pull request which was disconnected. */
  readonly subject: GraphQLReferencedSubject;
};

/** A discussion in a repository. */
export type GraphQLDiscussion = GraphQLComment & GraphQLUpdatable & GraphQLDeletable & GraphQLLabelable & GraphQLLockable & GraphQLRepositoryNode & GraphQLSubscribable & GraphQLReactable & GraphQLVotable & GraphQLNode & {
  readonly __typename?: 'Discussion';
  /** Reason that the conversation was locked. */
  readonly activeLockReason: Maybe<GraphQLLockReason>;
  /** The comment chosen as this discussion's answer, if any. */
  readonly answer: Maybe<GraphQLDiscussionComment>;
  /** The time when a user chose this discussion's answer, if answered. */
  readonly answerChosenAt: Maybe<Scalars['DateTime']>;
  /** The user who chose this discussion's answer, if answered. */
  readonly answerChosenBy: Maybe<GraphQLActor>;
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the subject of the comment. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** The main text of the discussion post. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  readonly bodyText: Scalars['String'];
  /** The category for this discussion. */
  readonly category: GraphQLDiscussionCategory;
  /** The replies to the discussion. */
  readonly comments: GraphQLDiscussionCommentConnection;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** A list of labels associated with the object. */
  readonly labels: Maybe<GraphQLLabelConnection>;
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** `true` if the object is locked */
  readonly locked: Scalars['Boolean'];
  /** The number identifying this discussion within the repository. */
  readonly number: Scalars['Int'];
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
  /** The path for this discussion. */
  readonly resourcePath: Scalars['URI'];
  /** The title of this discussion. */
  readonly title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** Number of upvotes that this subject has received. */
  readonly upvoteCount: Scalars['Int'];
  /** The URL for this discussion. */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  readonly viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Whether or not the current user can add or remove an upvote on this subject. */
  readonly viewerCanUpvote: Scalars['Boolean'];
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
  /** Whether or not the current user has already upvoted this subject. */
  readonly viewerHasUpvoted: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  readonly viewerSubscription: Maybe<GraphQLSubscriptionState>;
};


/** A discussion in a repository. */
export type GraphQLDiscussionCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A discussion in a repository. */
export type GraphQLDiscussionLabelsArgs = {
  orderBy?: Maybe<GraphQLLabelOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A discussion in a repository. */
export type GraphQLDiscussionReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** A discussion in a repository. */
export type GraphQLDiscussionUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** A category for discussions in a repository. */
export type GraphQLDiscussionCategory = GraphQLNode & GraphQLRepositoryNode & {
  readonly __typename?: 'DiscussionCategory';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** A description of this category. */
  readonly description: Maybe<Scalars['String']>;
  /** An emoji representing this category. */
  readonly emoji: Scalars['String'];
  /** This category's emoji rendered as HTML. */
  readonly emojiHTML: Scalars['HTML'];
  readonly id: Scalars['ID'];
  /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */
  readonly isAnswerable: Scalars['Boolean'];
  /** The name of this category. */
  readonly name: Scalars['String'];
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** The connection type for DiscussionCategory. */
export type GraphQLDiscussionCategoryConnection = {
  readonly __typename?: 'DiscussionCategoryConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDiscussionCategoryEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDiscussionCategory>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDiscussionCategoryEdge = {
  readonly __typename?: 'DiscussionCategoryEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDiscussionCategory>;
};

/** A comment on a discussion. */
export type GraphQLDiscussionComment = GraphQLComment & GraphQLDeletable & GraphQLMinimizable & GraphQLUpdatable & GraphQLUpdatableComment & GraphQLReactable & GraphQLVotable & GraphQLNode & {
  readonly __typename?: 'DiscussionComment';
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the subject of the comment. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** The body as Markdown. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  readonly bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The time when this replied-to comment was deleted */
  readonly deletedAt: Maybe<Scalars['DateTime']>;
  /** The discussion this comment was created in */
  readonly discussion: Maybe<GraphQLDiscussion>;
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** Has this comment been chosen as the answer of its discussion? */
  readonly isAnswer: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  readonly isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** Returns why the comment was minimized. */
  readonly minimizedReason: Maybe<Scalars['String']>;
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The threaded replies to this comment. */
  readonly replies: GraphQLDiscussionCommentConnection;
  /** The discussion comment this comment is a reply to */
  readonly replyTo: Maybe<GraphQLDiscussionComment>;
  /** The path for this discussion comment. */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** Number of upvotes that this subject has received. */
  readonly upvoteCount: Scalars['Int'];
  /** The URL for this discussion comment. */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
  /** Can the current user mark this comment as an answer? */
  readonly viewerCanMarkAsAnswer: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  readonly viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Can the current user unmark this comment as an answer? */
  readonly viewerCanUnmarkAsAnswer: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Whether or not the current user can add or remove an upvote on this subject. */
  readonly viewerCanUpvote: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
  /** Whether or not the current user has already upvoted this subject. */
  readonly viewerHasUpvoted: Scalars['Boolean'];
};


/** A comment on a discussion. */
export type GraphQLDiscussionCommentReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** A comment on a discussion. */
export type GraphQLDiscussionCommentRepliesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A comment on a discussion. */
export type GraphQLDiscussionCommentUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for DiscussionComment. */
export type GraphQLDiscussionCommentConnection = {
  readonly __typename?: 'DiscussionCommentConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDiscussionCommentEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDiscussionComment>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDiscussionCommentEdge = {
  readonly __typename?: 'DiscussionCommentEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDiscussionComment>;
};

/** The connection type for Discussion. */
export type GraphQLDiscussionConnection = {
  readonly __typename?: 'DiscussionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLDiscussionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLDiscussion>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLDiscussionEdge = {
  readonly __typename?: 'DiscussionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLDiscussion>;
};

/** Ways in which lists of discussions can be ordered upon return. */
export type GraphQLDiscussionOrder = {
  /** The field by which to order discussions. */
  readonly field: GraphQLDiscussionOrderField;
  /** The direction in which to order discussions by the specified field. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which discussion connections can be ordered. */
export enum GraphQLDiscussionOrderField {
  /** Order discussions by creation time. */
  CREATED_AT = 'CREATED_AT',
  /** Order discussions by most recent modification time. */
  UPDATED_AT = 'UPDATED_AT'
}

/** Autogenerated input type of DismissPullRequestReview */
export type GraphQLDismissPullRequestReviewInput = {
  /** The Node ID of the pull request review to modify. */
  readonly pullRequestReviewId: Scalars['ID'];
  /** The contents of the pull request review dismissal message. */
  readonly message: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DismissPullRequestReview */
export type GraphQLDismissPullRequestReviewPayload = {
  readonly __typename?: 'DismissPullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The dismissed pull request review. */
  readonly pullRequestReview: Maybe<GraphQLPullRequestReview>;
};

/** The possible reasons that a Dependabot alert was dismissed. */
export enum GraphQLDismissReason {
  /** A fix has already been started */
  FIX_STARTED = 'FIX_STARTED',
  /** No bandwidth to fix this */
  NO_BANDWIDTH = 'NO_BANDWIDTH',
  /** Risk is tolerable to this project */
  TOLERABLE_RISK = 'TOLERABLE_RISK',
  /** This alert is inaccurate or incorrect */
  INACCURATE = 'INACCURATE',
  /** Vulnerable code is not actually used */
  NOT_USED = 'NOT_USED'
}

/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */
export type GraphQLDismissRepositoryVulnerabilityAlertInput = {
  /** The Dependabot alert ID to dismiss. */
  readonly repositoryVulnerabilityAlertId: Scalars['ID'];
  /** The reason the Dependabot alert is being dismissed. */
  readonly dismissReason: GraphQLDismissReason;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */
export type GraphQLDismissRepositoryVulnerabilityAlertPayload = {
  readonly __typename?: 'DismissRepositoryVulnerabilityAlertPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The Dependabot alert that was dismissed */
  readonly repositoryVulnerabilityAlert: Maybe<GraphQLRepositoryVulnerabilityAlert>;
};

/** A draft issue within a project. */
export type GraphQLDraftIssue = GraphQLNode & {
  readonly __typename?: 'DraftIssue';
  /** A list of users to assigned to this draft issue. */
  readonly assignees: GraphQLUserConnection;
  /** The body of the draft issue. */
  readonly body: Scalars['String'];
  /** The body of the draft issue rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body of the draft issue rendered to text. */
  readonly bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The actor who created this draft issue. */
  readonly creator: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** The project that contains this draft issue. */
  readonly project: GraphQLProjectNext;
  /** The project item that wraps this draft issue. */
  readonly projectItem: GraphQLProjectNextItem;
  /** The title of the draft issue */
  readonly title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};


/** A draft issue within a project. */
export type GraphQLDraftIssueAssigneesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Specifies a review comment to be left with a Pull Request Review. */
export type GraphQLDraftPullRequestReviewComment = {
  /** Path to the file being commented on. */
  readonly path: Scalars['String'];
  /** Position in the file to leave a comment on. */
  readonly position: Scalars['Int'];
  /** Body of the comment to leave. */
  readonly body: Scalars['String'];
};

/** Specifies a review comment thread to be left with a Pull Request Review. */
export type GraphQLDraftPullRequestReviewThread = {
  /** Path to the file being commented on. */
  readonly path: Scalars['String'];
  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */
  readonly line: Scalars['Int'];
  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */
  readonly side: Maybe<GraphQLDiffSide>;
  /** The first line of the range to which the comment refers. */
  readonly startLine: Maybe<Scalars['Int']>;
  /** The side of the diff on which the start line resides. */
  readonly startSide: Maybe<GraphQLDiffSide>;
  /** Body of the comment to leave. */
  readonly body: Scalars['String'];
};

/** Autogenerated input type of EnablePullRequestAutoMerge */
export type GraphQLEnablePullRequestAutoMergeInput = {
  /** ID of the pull request to enable auto-merge on. */
  readonly pullRequestId: Scalars['ID'];
  /** Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. */
  readonly commitHeadline: Maybe<Scalars['String']>;
  /** Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. */
  readonly commitBody: Maybe<Scalars['String']>;
  /** The merge method to use. If omitted, defaults to 'MERGE' */
  readonly mergeMethod: Maybe<GraphQLPullRequestMergeMethod>;
  /** The email address to associate with this merge. */
  readonly authorEmail: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of EnablePullRequestAutoMerge */
export type GraphQLEnablePullRequestAutoMergePayload = {
  readonly __typename?: 'EnablePullRequestAutoMergePayload';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The pull request auto-merge was enabled on. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** An account to manage multiple organizations with consolidated policy and billing. */
export type GraphQLEnterprise = GraphQLNode & {
  readonly __typename?: 'Enterprise';
  /** A URL pointing to the enterprise's public avatar. */
  readonly avatarUrl: Scalars['URI'];
  /** Enterprise billing information visible to enterprise billing managers. */
  readonly billingInfo: Maybe<GraphQLEnterpriseBillingInfo>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The description of the enterprise. */
  readonly description: Maybe<Scalars['String']>;
  /** The description of the enterprise as HTML. */
  readonly descriptionHTML: Scalars['HTML'];
  readonly id: Scalars['ID'];
  /** The location of the enterprise. */
  readonly location: Maybe<Scalars['String']>;
  /** A list of users who are members of this enterprise. */
  readonly members: GraphQLEnterpriseMemberConnection;
  /** The name of the enterprise. */
  readonly name: Scalars['String'];
  /** A list of organizations that belong to this enterprise. */
  readonly organizations: GraphQLOrganizationConnection;
  /** Enterprise information only visible to enterprise owners. */
  readonly ownerInfo: Maybe<GraphQLEnterpriseOwnerInfo>;
  /** The HTTP path for this enterprise. */
  readonly resourcePath: Scalars['URI'];
  /** The URL-friendly identifier for the enterprise. */
  readonly slug: Scalars['String'];
  /** The HTTP URL for this enterprise. */
  readonly url: Scalars['URI'];
  /**
   * A list of user accounts on this enterprise.
   * @deprecated The `Enterprise.userAccounts` field is being removed. Use the `Enterprise.members` field instead. Removal on 2022-07-01 UTC.
   */
  readonly userAccounts: GraphQLEnterpriseUserAccountConnection;
  /** Is the current viewer an admin of this enterprise? */
  readonly viewerIsAdmin: Scalars['Boolean'];
  /** The URL of the enterprise website. */
  readonly websiteUrl: Maybe<Scalars['URI']>;
};


/** An account to manage multiple organizations with consolidated policy and billing. */
export type GraphQLEnterpriseAvatarUrlArgs = {
  size: Maybe<Scalars['Int']>;
};


/** An account to manage multiple organizations with consolidated policy and billing. */
export type GraphQLEnterpriseMembersArgs = {
  organizationLogins: Maybe<ReadonlyArray<Scalars['String']>>;
  query: Maybe<Scalars['String']>;
  orderBy?: Maybe<GraphQLEnterpriseMemberOrder>;
  role: Maybe<GraphQLEnterpriseUserAccountMembershipRole>;
  deployment: Maybe<GraphQLEnterpriseUserDeployment>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An account to manage multiple organizations with consolidated policy and billing. */
export type GraphQLEnterpriseOrganizationsArgs = {
  query: Maybe<Scalars['String']>;
  viewerOrganizationRole: Maybe<GraphQLRoleInOrganization>;
  orderBy?: Maybe<GraphQLOrganizationOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An account to manage multiple organizations with consolidated policy and billing. */
export type GraphQLEnterpriseUserAccountsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for User. */
export type GraphQLEnterpriseAdministratorConnection = {
  readonly __typename?: 'EnterpriseAdministratorConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseAdministratorEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** A User who is an administrator of an enterprise. */
export type GraphQLEnterpriseAdministratorEdge = {
  readonly __typename?: 'EnterpriseAdministratorEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLUser>;
  /** The role of the administrator. */
  readonly role: GraphQLEnterpriseAdministratorRole;
};

/** An invitation for a user to become an owner or billing manager of an enterprise. */
export type GraphQLEnterpriseAdministratorInvitation = GraphQLNode & {
  readonly __typename?: 'EnterpriseAdministratorInvitation';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The email of the person who was invited to the enterprise. */
  readonly email: Maybe<Scalars['String']>;
  /** The enterprise the invitation is for. */
  readonly enterprise: GraphQLEnterprise;
  readonly id: Scalars['ID'];
  /** The user who was invited to the enterprise. */
  readonly invitee: Maybe<GraphQLUser>;
  /** The user who created the invitation. */
  readonly inviter: Maybe<GraphQLUser>;
  /** The invitee's pending role in the enterprise (owner or billing_manager). */
  readonly role: GraphQLEnterpriseAdministratorRole;
};

/** The connection type for EnterpriseAdministratorInvitation. */
export type GraphQLEnterpriseAdministratorInvitationConnection = {
  readonly __typename?: 'EnterpriseAdministratorInvitationConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseAdministratorInvitationEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseAdministratorInvitation>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLEnterpriseAdministratorInvitationEdge = {
  readonly __typename?: 'EnterpriseAdministratorInvitationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLEnterpriseAdministratorInvitation>;
};

/** Ordering options for enterprise administrator invitation connections */
export type GraphQLEnterpriseAdministratorInvitationOrder = {
  /** The field to order enterprise administrator invitations by. */
  readonly field: GraphQLEnterpriseAdministratorInvitationOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which enterprise administrator invitation connections can be ordered. */
export enum GraphQLEnterpriseAdministratorInvitationOrderField {
  /** Order enterprise administrator member invitations by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** The possible administrator roles in an enterprise account. */
export enum GraphQLEnterpriseAdministratorRole {
  /** Represents an owner of the enterprise account. */
  OWNER = 'OWNER',
  /** Represents a billing manager of the enterprise account. */
  BILLING_MANAGER = 'BILLING_MANAGER'
}

/** Metadata for an audit entry containing enterprise account information. */
export type GraphQLEnterpriseAuditEntryData = {
  /** The HTTP path for this enterprise. */
  readonly enterpriseResourcePath: Maybe<Scalars['URI']>;
  /** The slug of the enterprise. */
  readonly enterpriseSlug: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  readonly enterpriseUrl: Maybe<Scalars['URI']>;
};

/** Enterprise billing information visible to enterprise billing managers and owners. */
export type GraphQLEnterpriseBillingInfo = {
  readonly __typename?: 'EnterpriseBillingInfo';
  /** The number of licenseable users/emails across the enterprise. */
  readonly allLicensableUsersCount: Scalars['Int'];
  /** The number of data packs used by all organizations owned by the enterprise. */
  readonly assetPacks: Scalars['Int'];
  /**
   * The number of available seats across all owned organizations based on the unique number of billable users.
   * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.
   */
  readonly availableSeats: Scalars['Int'];
  /** The bandwidth quota in GB for all organizations owned by the enterprise. */
  readonly bandwidthQuota: Scalars['Float'];
  /** The bandwidth usage in GB for all organizations owned by the enterprise. */
  readonly bandwidthUsage: Scalars['Float'];
  /** The bandwidth usage as a percentage of the bandwidth quota. */
  readonly bandwidthUsagePercentage: Scalars['Int'];
  /**
   * The total seats across all organizations owned by the enterprise.
   * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.
   */
  readonly seats: Scalars['Int'];
  /** The storage quota in GB for all organizations owned by the enterprise. */
  readonly storageQuota: Scalars['Float'];
  /** The storage usage in GB for all organizations owned by the enterprise. */
  readonly storageUsage: Scalars['Float'];
  /** The storage usage as a percentage of the storage quota. */
  readonly storageUsagePercentage: Scalars['Int'];
  /** The number of available licenses across all owned organizations based on the unique number of billable users. */
  readonly totalAvailableLicenses: Scalars['Int'];
  /** The total number of licenses allocated. */
  readonly totalLicenses: Scalars['Int'];
};

/** The possible values for the enterprise base repository permission setting. */
export enum GraphQLEnterpriseDefaultRepositoryPermissionSettingValue {
  /** Organizations in the enterprise choose base repository permissions for their members. */
  NO_POLICY = 'NO_POLICY',
  /** Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories. */
  ADMIN = 'ADMIN',
  /** Organization members will be able to clone, pull, and push all organization repositories. */
  WRITE = 'WRITE',
  /** Organization members will be able to clone and pull all organization repositories. */
  READ = 'READ',
  /** Organization members will only be able to clone and pull public repositories. */
  NONE = 'NONE'
}

/** The possible values for an enabled/disabled enterprise setting. */
export enum GraphQLEnterpriseEnabledDisabledSettingValue {
  /** The setting is enabled for organizations in the enterprise. */
  ENABLED = 'ENABLED',
  /** The setting is disabled for organizations in the enterprise. */
  DISABLED = 'DISABLED',
  /** There is no policy set for organizations in the enterprise. */
  NO_POLICY = 'NO_POLICY'
}

/** The possible values for an enabled/no policy enterprise setting. */
export enum GraphQLEnterpriseEnabledSettingValue {
  /** The setting is enabled for organizations in the enterprise. */
  ENABLED = 'ENABLED',
  /** There is no policy set for organizations in the enterprise. */
  NO_POLICY = 'NO_POLICY'
}

/** An identity provider configured to provision identities for an enterprise. */
export type GraphQLEnterpriseIdentityProvider = GraphQLNode & {
  readonly __typename?: 'EnterpriseIdentityProvider';
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  readonly digestMethod: Maybe<GraphQLSamlDigestAlgorithm>;
  /** The enterprise this identity provider belongs to. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** ExternalIdentities provisioned by this identity provider. */
  readonly externalIdentities: GraphQLExternalIdentityConnection;
  readonly id: Scalars['ID'];
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  readonly idpCertificate: Maybe<Scalars['X509Certificate']>;
  /** The Issuer Entity ID for the SAML identity provider. */
  readonly issuer: Maybe<Scalars['String']>;
  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */
  readonly recoveryCodes: Maybe<ReadonlyArray<Scalars['String']>>;
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  readonly signatureMethod: Maybe<GraphQLSamlSignatureAlgorithm>;
  /** The URL endpoint for the identity provider's SAML SSO. */
  readonly ssoUrl: Maybe<Scalars['URI']>;
};


/** An identity provider configured to provision identities for an enterprise. */
export type GraphQLEnterpriseIdentityProviderExternalIdentitiesArgs = {
  membersOnly: Maybe<Scalars['Boolean']>;
  login: Maybe<Scalars['String']>;
  userName: Maybe<Scalars['String']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** An object that is a member of an enterprise. */
export type GraphQLEnterpriseMember = GraphQLEnterpriseUserAccount | GraphQLUser;

/** The connection type for EnterpriseMember. */
export type GraphQLEnterpriseMemberConnection = {
  readonly __typename?: 'EnterpriseMemberConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseMemberEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseMember>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** A User who is a member of an enterprise through one or more organizations. */
export type GraphQLEnterpriseMemberEdge = {
  readonly __typename?: 'EnterpriseMemberEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /**
   * Whether the user does not have a license for the enterprise.
   * @deprecated All members consume a license Removal on 2021-01-01 UTC.
   */
  readonly isUnlicensed: Scalars['Boolean'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLEnterpriseMember>;
};

/** Ordering options for enterprise member connections. */
export type GraphQLEnterpriseMemberOrder = {
  /** The field to order enterprise members by. */
  readonly field: GraphQLEnterpriseMemberOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which enterprise member connections can be ordered. */
export enum GraphQLEnterpriseMemberOrderField {
  /** Order enterprise members by login */
  LOGIN = 'LOGIN',
  /** Order enterprise members by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** The possible values for the enterprise members can create repositories setting. */
export enum GraphQLEnterpriseMembersCanCreateRepositoriesSettingValue {
  /** Organization administrators choose whether to allow members to create repositories. */
  NO_POLICY = 'NO_POLICY',
  /** Members will be able to create public and private repositories. */
  ALL = 'ALL',
  /** Members will be able to create only public repositories. */
  PUBLIC = 'PUBLIC',
  /** Members will be able to create only private repositories. */
  PRIVATE = 'PRIVATE',
  /** Members will not be able to create public or private repositories. */
  DISABLED = 'DISABLED'
}

/** The possible values for the members can make purchases setting. */
export enum GraphQLEnterpriseMembersCanMakePurchasesSettingValue {
  /** The setting is enabled for organizations in the enterprise. */
  ENABLED = 'ENABLED',
  /** The setting is disabled for organizations in the enterprise. */
  DISABLED = 'DISABLED'
}

/** The connection type for Organization. */
export type GraphQLEnterpriseOrganizationMembershipConnection = {
  readonly __typename?: 'EnterpriseOrganizationMembershipConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseOrganizationMembershipEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLOrganization>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An enterprise organization that a user is a member of. */
export type GraphQLEnterpriseOrganizationMembershipEdge = {
  readonly __typename?: 'EnterpriseOrganizationMembershipEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLOrganization>;
  /** The role of the user in the enterprise membership. */
  readonly role: GraphQLEnterpriseUserAccountMembershipRole;
};

/** The connection type for User. */
export type GraphQLEnterpriseOutsideCollaboratorConnection = {
  readonly __typename?: 'EnterpriseOutsideCollaboratorConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseOutsideCollaboratorEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export type GraphQLEnterpriseOutsideCollaboratorEdge = {
  readonly __typename?: 'EnterpriseOutsideCollaboratorEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /**
   * Whether the outside collaborator does not have a license for the enterprise.
   * @deprecated All outside collaborators consume a license Removal on 2021-01-01 UTC.
   */
  readonly isUnlicensed: Scalars['Boolean'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLUser>;
  /** The enterprise organization repositories this user is a member of. */
  readonly repositories: GraphQLEnterpriseRepositoryInfoConnection;
};


/** A User who is an outside collaborator of an enterprise through one or more organizations. */
export type GraphQLEnterpriseOutsideCollaboratorEdgeRepositoriesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLRepositoryOrder>;
};

/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfo = {
  readonly __typename?: 'EnterpriseOwnerInfo';
  /** A list of all of the administrators for this enterprise. */
  readonly admins: GraphQLEnterpriseAdministratorConnection;
  /** A list of users in the enterprise who currently have two-factor authentication disabled. */
  readonly affiliatedUsersWithTwoFactorDisabled: GraphQLUserConnection;
  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */
  readonly affiliatedUsersWithTwoFactorDisabledExist: Scalars['Boolean'];
  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */
  readonly allowPrivateRepositoryForkingSetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided private repository forking setting value. */
  readonly allowPrivateRepositoryForkingSettingOrganizations: GraphQLOrganizationConnection;
  /** The setting value for base repository permissions for organizations in this enterprise. */
  readonly defaultRepositoryPermissionSetting: GraphQLEnterpriseDefaultRepositoryPermissionSettingValue;
  /** A list of enterprise organizations configured with the provided base repository permission. */
  readonly defaultRepositoryPermissionSettingOrganizations: GraphQLOrganizationConnection;
  /** A list of domains owned by the enterprise. */
  readonly domains: GraphQLVerifiableDomainConnection;
  /** Enterprise Server installations owned by the enterprise. */
  readonly enterpriseServerInstallations: GraphQLEnterpriseServerInstallationConnection;
  /** The setting value for whether the enterprise has an IP allow list enabled. */
  readonly ipAllowListEnabledSetting: GraphQLIpAllowListEnabledSettingValue;
  /** The IP addresses that are allowed to access resources owned by the enterprise. */
  readonly ipAllowListEntries: GraphQLIpAllowListEntryConnection;
  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */
  readonly ipAllowListForInstalledAppsEnabledSetting: GraphQLIpAllowListForInstalledAppsEnabledSettingValue;
  /** Whether or not the base repository permission is currently being updated. */
  readonly isUpdatingDefaultRepositoryPermission: Scalars['Boolean'];
  /** Whether the two-factor authentication requirement is currently being enforced. */
  readonly isUpdatingTwoFactorRequirement: Scalars['Boolean'];
  /** The setting value for whether organization members with admin permissions on a repository can change repository visibility. */
  readonly membersCanChangeRepositoryVisibilitySetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */
  readonly membersCanChangeRepositoryVisibilitySettingOrganizations: GraphQLOrganizationConnection;
  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */
  readonly membersCanCreateInternalRepositoriesSetting: Maybe<Scalars['Boolean']>;
  /** The setting value for whether members of organizations in the enterprise can create private repositories. */
  readonly membersCanCreatePrivateRepositoriesSetting: Maybe<Scalars['Boolean']>;
  /** The setting value for whether members of organizations in the enterprise can create public repositories. */
  readonly membersCanCreatePublicRepositoriesSetting: Maybe<Scalars['Boolean']>;
  /** The setting value for whether members of organizations in the enterprise can create repositories. */
  readonly membersCanCreateRepositoriesSetting: Maybe<GraphQLEnterpriseMembersCanCreateRepositoriesSettingValue>;
  /** A list of enterprise organizations configured with the provided repository creation setting value. */
  readonly membersCanCreateRepositoriesSettingOrganizations: GraphQLOrganizationConnection;
  /** The setting value for whether members with admin permissions for repositories can delete issues. */
  readonly membersCanDeleteIssuesSetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */
  readonly membersCanDeleteIssuesSettingOrganizations: GraphQLOrganizationConnection;
  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */
  readonly membersCanDeleteRepositoriesSetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */
  readonly membersCanDeleteRepositoriesSettingOrganizations: GraphQLOrganizationConnection;
  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */
  readonly membersCanInviteCollaboratorsSetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */
  readonly membersCanInviteCollaboratorsSettingOrganizations: GraphQLOrganizationConnection;
  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */
  readonly membersCanMakePurchasesSetting: GraphQLEnterpriseMembersCanMakePurchasesSettingValue;
  /** The setting value for whether members with admin permissions for repositories can update protected branches. */
  readonly membersCanUpdateProtectedBranchesSetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */
  readonly membersCanUpdateProtectedBranchesSettingOrganizations: GraphQLOrganizationConnection;
  /** The setting value for whether members can view dependency insights. */
  readonly membersCanViewDependencyInsightsSetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */
  readonly membersCanViewDependencyInsightsSettingOrganizations: GraphQLOrganizationConnection;
  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */
  readonly notificationDeliveryRestrictionEnabledSetting: GraphQLNotificationRestrictionSettingValue;
  /** The OIDC Identity Provider for the enterprise. */
  readonly oidcProvider: Maybe<GraphQLOidcProvider>;
  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */
  readonly organizationProjectsSetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided organization projects setting value. */
  readonly organizationProjectsSettingOrganizations: GraphQLOrganizationConnection;
  /** A list of outside collaborators across the repositories in the enterprise. */
  readonly outsideCollaborators: GraphQLEnterpriseOutsideCollaboratorConnection;
  /** A list of pending administrator invitations for the enterprise. */
  readonly pendingAdminInvitations: GraphQLEnterpriseAdministratorInvitationConnection;
  /** A list of pending collaborator invitations across the repositories in the enterprise. */
  readonly pendingCollaboratorInvitations: GraphQLRepositoryInvitationConnection;
  /** A list of pending member invitations for organizations in the enterprise. */
  readonly pendingMemberInvitations: GraphQLEnterprisePendingMemberInvitationConnection;
  /** The setting value for whether repository projects are enabled in this enterprise. */
  readonly repositoryProjectsSetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided repository projects setting value. */
  readonly repositoryProjectsSettingOrganizations: GraphQLOrganizationConnection;
  /** The SAML Identity Provider for the enterprise. When used by a GitHub App, requires an installation token with read and write access to members. */
  readonly samlIdentityProvider: Maybe<GraphQLEnterpriseIdentityProvider>;
  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */
  readonly samlIdentityProviderSettingOrganizations: GraphQLOrganizationConnection;
  /** A list of members with a support entitlement. */
  readonly supportEntitlements: GraphQLEnterpriseMemberConnection;
  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */
  readonly teamDiscussionsSetting: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A list of enterprise organizations configured with the provided team discussions setting value. */
  readonly teamDiscussionsSettingOrganizations: GraphQLOrganizationConnection;
  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */
  readonly twoFactorRequiredSetting: GraphQLEnterpriseEnabledSettingValue;
  /** A list of enterprise organizations configured with the two-factor authentication setting value. */
  readonly twoFactorRequiredSettingOrganizations: GraphQLOrganizationConnection;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoAdminsArgs = {
  query: Maybe<Scalars['String']>;
  role: Maybe<GraphQLEnterpriseAdministratorRole>;
  orderBy?: Maybe<GraphQLEnterpriseMemberOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoAffiliatedUsersWithTwoFactorDisabledArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoAllowPrivateRepositoryForkingSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoDefaultRepositoryPermissionSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: GraphQLDefaultRepositoryPermissionField;
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoDomainsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<GraphQLVerifiableDomainOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoEnterpriseServerInstallationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  connectedOnly?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<GraphQLEnterpriseServerInstallationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoIpAllowListEntriesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLIpAllowListEntryOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoMembersCanCreateRepositoriesSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: GraphQLOrganizationMembersCanCreateRepositoriesSettingValue;
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoMembersCanDeleteIssuesSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoMembersCanDeleteRepositoriesSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoMembersCanInviteCollaboratorsSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoMembersCanUpdateProtectedBranchesSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoMembersCanViewDependencyInsightsSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoOrganizationProjectsSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoOutsideCollaboratorsArgs = {
  login: Maybe<Scalars['String']>;
  query: Maybe<Scalars['String']>;
  orderBy?: Maybe<GraphQLEnterpriseMemberOrder>;
  visibility: Maybe<GraphQLRepositoryVisibility>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoPendingAdminInvitationsArgs = {
  query: Maybe<Scalars['String']>;
  orderBy?: Maybe<GraphQLEnterpriseAdministratorInvitationOrder>;
  role: Maybe<GraphQLEnterpriseAdministratorRole>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoPendingCollaboratorInvitationsArgs = {
  query: Maybe<Scalars['String']>;
  orderBy?: Maybe<GraphQLRepositoryInvitationOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoPendingMemberInvitationsArgs = {
  query: Maybe<Scalars['String']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoRepositoryProjectsSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoSamlIdentityProviderSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: GraphQLIdentityProviderConfigurationState;
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoSupportEntitlementsArgs = {
  orderBy?: Maybe<GraphQLEnterpriseMemberOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoTeamDiscussionsSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};


/** Enterprise information only visible to enterprise owners. */
export type GraphQLEnterpriseOwnerInfoTwoFactorRequiredSettingOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  value: Scalars['Boolean'];
  orderBy?: Maybe<GraphQLOrganizationOrder>;
};

/** The connection type for OrganizationInvitation. */
export type GraphQLEnterprisePendingMemberInvitationConnection = {
  readonly __typename?: 'EnterprisePendingMemberInvitationConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterprisePendingMemberInvitationEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLOrganizationInvitation>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
  /** Identifies the total count of unique users in the connection. */
  readonly totalUniqueUserCount: Scalars['Int'];
};

/** An invitation to be a member in an enterprise organization. */
export type GraphQLEnterprisePendingMemberInvitationEdge = {
  readonly __typename?: 'EnterprisePendingMemberInvitationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /**
   * Whether the invitation has a license for the enterprise.
   * @deprecated All pending members consume a license Removal on 2020-07-01 UTC.
   */
  readonly isUnlicensed: Scalars['Boolean'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLOrganizationInvitation>;
};

/** A subset of repository information queryable from an enterprise. */
export type GraphQLEnterpriseRepositoryInfo = GraphQLNode & {
  readonly __typename?: 'EnterpriseRepositoryInfo';
  readonly id: Scalars['ID'];
  /** Identifies if the repository is private or internal. */
  readonly isPrivate: Scalars['Boolean'];
  /** The repository's name. */
  readonly name: Scalars['String'];
  /** The repository's name with owner. */
  readonly nameWithOwner: Scalars['String'];
};

/** The connection type for EnterpriseRepositoryInfo. */
export type GraphQLEnterpriseRepositoryInfoConnection = {
  readonly __typename?: 'EnterpriseRepositoryInfoConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseRepositoryInfoEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseRepositoryInfo>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLEnterpriseRepositoryInfoEdge = {
  readonly __typename?: 'EnterpriseRepositoryInfoEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLEnterpriseRepositoryInfo>;
};

/** An Enterprise Server installation. */
export type GraphQLEnterpriseServerInstallation = GraphQLNode & {
  readonly __typename?: 'EnterpriseServerInstallation';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The customer name to which the Enterprise Server installation belongs. */
  readonly customerName: Scalars['String'];
  /** The host name of the Enterprise Server installation. */
  readonly hostName: Scalars['String'];
  readonly id: Scalars['ID'];
  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */
  readonly isConnected: Scalars['Boolean'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** User accounts on this Enterprise Server installation. */
  readonly userAccounts: GraphQLEnterpriseServerUserAccountConnection;
  /** User accounts uploads for the Enterprise Server installation. */
  readonly userAccountsUploads: GraphQLEnterpriseServerUserAccountsUploadConnection;
};


/** An Enterprise Server installation. */
export type GraphQLEnterpriseServerInstallationUserAccountsArgs = {
  orderBy?: Maybe<GraphQLEnterpriseServerUserAccountOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Enterprise Server installation. */
export type GraphQLEnterpriseServerInstallationUserAccountsUploadsArgs = {
  orderBy?: Maybe<GraphQLEnterpriseServerUserAccountsUploadOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for EnterpriseServerInstallation. */
export type GraphQLEnterpriseServerInstallationConnection = {
  readonly __typename?: 'EnterpriseServerInstallationConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseServerInstallationEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseServerInstallation>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLEnterpriseServerInstallationEdge = {
  readonly __typename?: 'EnterpriseServerInstallationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLEnterpriseServerInstallation>;
};

/** Ordering options for Enterprise Server installation connections. */
export type GraphQLEnterpriseServerInstallationOrder = {
  /** The field to order Enterprise Server installations by. */
  readonly field: GraphQLEnterpriseServerInstallationOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which Enterprise Server installation connections can be ordered. */
export enum GraphQLEnterpriseServerInstallationOrderField {
  /** Order Enterprise Server installations by host name */
  HOST_NAME = 'HOST_NAME',
  /** Order Enterprise Server installations by customer name */
  CUSTOMER_NAME = 'CUSTOMER_NAME',
  /** Order Enterprise Server installations by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** A user account on an Enterprise Server installation. */
export type GraphQLEnterpriseServerUserAccount = GraphQLNode & {
  readonly __typename?: 'EnterpriseServerUserAccount';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** User emails belonging to this user account. */
  readonly emails: GraphQLEnterpriseServerUserAccountEmailConnection;
  /** The Enterprise Server installation on which this user account exists. */
  readonly enterpriseServerInstallation: GraphQLEnterpriseServerInstallation;
  readonly id: Scalars['ID'];
  /** Whether the user account is a site administrator on the Enterprise Server installation. */
  readonly isSiteAdmin: Scalars['Boolean'];
  /** The login of the user account on the Enterprise Server installation. */
  readonly login: Scalars['String'];
  /** The profile name of the user account on the Enterprise Server installation. */
  readonly profileName: Maybe<Scalars['String']>;
  /** The date and time when the user account was created on the Enterprise Server installation. */
  readonly remoteCreatedAt: Scalars['DateTime'];
  /** The ID of the user account on the Enterprise Server installation. */
  readonly remoteUserId: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};


/** A user account on an Enterprise Server installation. */
export type GraphQLEnterpriseServerUserAccountEmailsArgs = {
  orderBy?: Maybe<GraphQLEnterpriseServerUserAccountEmailOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for EnterpriseServerUserAccount. */
export type GraphQLEnterpriseServerUserAccountConnection = {
  readonly __typename?: 'EnterpriseServerUserAccountConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseServerUserAccountEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseServerUserAccount>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLEnterpriseServerUserAccountEdge = {
  readonly __typename?: 'EnterpriseServerUserAccountEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLEnterpriseServerUserAccount>;
};

/** An email belonging to a user account on an Enterprise Server installation. */
export type GraphQLEnterpriseServerUserAccountEmail = GraphQLNode & {
  readonly __typename?: 'EnterpriseServerUserAccountEmail';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The email address. */
  readonly email: Scalars['String'];
  readonly id: Scalars['ID'];
  /** Indicates whether this is the primary email of the associated user account. */
  readonly isPrimary: Scalars['Boolean'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The user account to which the email belongs. */
  readonly userAccount: GraphQLEnterpriseServerUserAccount;
};

/** The connection type for EnterpriseServerUserAccountEmail. */
export type GraphQLEnterpriseServerUserAccountEmailConnection = {
  readonly __typename?: 'EnterpriseServerUserAccountEmailConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseServerUserAccountEmailEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseServerUserAccountEmail>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLEnterpriseServerUserAccountEmailEdge = {
  readonly __typename?: 'EnterpriseServerUserAccountEmailEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLEnterpriseServerUserAccountEmail>;
};

/** Ordering options for Enterprise Server user account email connections. */
export type GraphQLEnterpriseServerUserAccountEmailOrder = {
  /** The field to order emails by. */
  readonly field: GraphQLEnterpriseServerUserAccountEmailOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which Enterprise Server user account email connections can be ordered. */
export enum GraphQLEnterpriseServerUserAccountEmailOrderField {
  /** Order emails by email */
  EMAIL = 'EMAIL'
}

/** Ordering options for Enterprise Server user account connections. */
export type GraphQLEnterpriseServerUserAccountOrder = {
  /** The field to order user accounts by. */
  readonly field: GraphQLEnterpriseServerUserAccountOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which Enterprise Server user account connections can be ordered. */
export enum GraphQLEnterpriseServerUserAccountOrderField {
  /** Order user accounts by login */
  LOGIN = 'LOGIN',
  /** Order user accounts by creation time on the Enterprise Server installation */
  REMOTE_CREATED_AT = 'REMOTE_CREATED_AT'
}

/** A user accounts upload from an Enterprise Server installation. */
export type GraphQLEnterpriseServerUserAccountsUpload = GraphQLNode & {
  readonly __typename?: 'EnterpriseServerUserAccountsUpload';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The enterprise to which this upload belongs. */
  readonly enterprise: GraphQLEnterprise;
  /** The Enterprise Server installation for which this upload was generated. */
  readonly enterpriseServerInstallation: GraphQLEnterpriseServerInstallation;
  readonly id: Scalars['ID'];
  /** The name of the file uploaded. */
  readonly name: Scalars['String'];
  /** The synchronization state of the upload */
  readonly syncState: GraphQLEnterpriseServerUserAccountsUploadSyncState;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** The connection type for EnterpriseServerUserAccountsUpload. */
export type GraphQLEnterpriseServerUserAccountsUploadConnection = {
  readonly __typename?: 'EnterpriseServerUserAccountsUploadConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseServerUserAccountsUploadEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseServerUserAccountsUpload>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLEnterpriseServerUserAccountsUploadEdge = {
  readonly __typename?: 'EnterpriseServerUserAccountsUploadEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLEnterpriseServerUserAccountsUpload>;
};

/** Ordering options for Enterprise Server user accounts upload connections. */
export type GraphQLEnterpriseServerUserAccountsUploadOrder = {
  /** The field to order user accounts uploads by. */
  readonly field: GraphQLEnterpriseServerUserAccountsUploadOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which Enterprise Server user accounts upload connections can be ordered. */
export enum GraphQLEnterpriseServerUserAccountsUploadOrderField {
  /** Order user accounts uploads by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** Synchronization state of the Enterprise Server user accounts upload */
export enum GraphQLEnterpriseServerUserAccountsUploadSyncState {
  /** The synchronization of the upload is pending. */
  PENDING = 'PENDING',
  /** The synchronization of the upload succeeded. */
  SUCCESS = 'SUCCESS',
  /** The synchronization of the upload failed. */
  FAILURE = 'FAILURE'
}

/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export type GraphQLEnterpriseUserAccount = GraphQLActor & GraphQLNode & {
  readonly __typename?: 'EnterpriseUserAccount';
  /** A URL pointing to the enterprise user account's public avatar. */
  readonly avatarUrl: Scalars['URI'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The enterprise in which this user account exists. */
  readonly enterprise: GraphQLEnterprise;
  readonly id: Scalars['ID'];
  /** An identifier for the enterprise user account, a login or email address */
  readonly login: Scalars['String'];
  /** The name of the enterprise user account */
  readonly name: Maybe<Scalars['String']>;
  /** A list of enterprise organizations this user is a member of. */
  readonly organizations: GraphQLEnterpriseOrganizationMembershipConnection;
  /** The HTTP path for this user. */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this user. */
  readonly url: Scalars['URI'];
  /** The user within the enterprise. */
  readonly user: Maybe<GraphQLUser>;
};


/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export type GraphQLEnterpriseUserAccountAvatarUrlArgs = {
  size: Maybe<Scalars['Int']>;
};


/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */
export type GraphQLEnterpriseUserAccountOrganizationsArgs = {
  query: Maybe<Scalars['String']>;
  orderBy?: Maybe<GraphQLOrganizationOrder>;
  role: Maybe<GraphQLEnterpriseUserAccountMembershipRole>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for EnterpriseUserAccount. */
export type GraphQLEnterpriseUserAccountConnection = {
  readonly __typename?: 'EnterpriseUserAccountConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseUserAccountEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLEnterpriseUserAccount>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLEnterpriseUserAccountEdge = {
  readonly __typename?: 'EnterpriseUserAccountEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLEnterpriseUserAccount>;
};

/** The possible roles for enterprise membership. */
export enum GraphQLEnterpriseUserAccountMembershipRole {
  /** The user is a member of the enterprise membership. */
  MEMBER = 'MEMBER',
  /** The user is an owner of the enterprise membership. */
  OWNER = 'OWNER'
}

/** The possible GitHub Enterprise deployments where this user can exist. */
export enum GraphQLEnterpriseUserDeployment {
  /** The user is part of a GitHub Enterprise Cloud deployment. */
  CLOUD = 'CLOUD',
  /** The user is part of a GitHub Enterprise Server deployment. */
  SERVER = 'SERVER'
}

/** An environment. */
export type GraphQLEnvironment = GraphQLNode & {
  readonly __typename?: 'Environment';
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The name of the environment */
  readonly name: Scalars['String'];
  /** The protection rules defined for this environment */
  readonly protectionRules: GraphQLDeploymentProtectionRuleConnection;
};


/** An environment. */
export type GraphQLEnvironmentProtectionRulesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for Environment. */
export type GraphQLEnvironmentConnection = {
  readonly __typename?: 'EnvironmentConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLEnvironmentEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLEnvironment>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLEnvironmentEdge = {
  readonly __typename?: 'EnvironmentEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLEnvironment>;
};

/** An external identity provisioned by SAML SSO or SCIM. */
export type GraphQLExternalIdentity = GraphQLNode & {
  readonly __typename?: 'ExternalIdentity';
  /** The GUID for this identity */
  readonly guid: Scalars['String'];
  readonly id: Scalars['ID'];
  /** Organization invitation for this SCIM-provisioned external identity */
  readonly organizationInvitation: Maybe<GraphQLOrganizationInvitation>;
  /** SAML Identity attributes */
  readonly samlIdentity: Maybe<GraphQLExternalIdentitySamlAttributes>;
  /** SCIM Identity attributes */
  readonly scimIdentity: Maybe<GraphQLExternalIdentityScimAttributes>;
  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */
  readonly user: Maybe<GraphQLUser>;
};

/** The connection type for ExternalIdentity. */
export type GraphQLExternalIdentityConnection = {
  readonly __typename?: 'ExternalIdentityConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLExternalIdentityEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLExternalIdentity>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLExternalIdentityEdge = {
  readonly __typename?: 'ExternalIdentityEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLExternalIdentity>;
};

/** SAML attributes for the External Identity */
export type GraphQLExternalIdentitySamlAttributes = {
  readonly __typename?: 'ExternalIdentitySamlAttributes';
  /** The emails associated with the SAML identity */
  readonly emails: Maybe<ReadonlyArray<GraphQLUserEmailMetadata>>;
  /** Family name of the SAML identity */
  readonly familyName: Maybe<Scalars['String']>;
  /** Given name of the SAML identity */
  readonly givenName: Maybe<Scalars['String']>;
  /** The groups linked to this identity in IDP */
  readonly groups: Maybe<ReadonlyArray<Scalars['String']>>;
  /** The NameID of the SAML identity */
  readonly nameId: Maybe<Scalars['String']>;
  /** The userName of the SAML identity */
  readonly username: Maybe<Scalars['String']>;
};

/** SCIM attributes for the External Identity */
export type GraphQLExternalIdentityScimAttributes = {
  readonly __typename?: 'ExternalIdentityScimAttributes';
  /** The emails associated with the SCIM identity */
  readonly emails: Maybe<ReadonlyArray<GraphQLUserEmailMetadata>>;
  /** Family name of the SCIM identity */
  readonly familyName: Maybe<Scalars['String']>;
  /** Given name of the SCIM identity */
  readonly givenName: Maybe<Scalars['String']>;
  /** The groups linked to this identity in IDP */
  readonly groups: Maybe<ReadonlyArray<Scalars['String']>>;
  /** The userName of the SCIM identity */
  readonly username: Maybe<Scalars['String']>;
};

/** A command to add a file at the given path with the given contents as part of a commit.  Any existing file at that that path will be replaced. */
export type GraphQLFileAddition = {
  /** The path in the repository where the file will be located */
  readonly path: Scalars['String'];
  /** The base64 encoded contents of the file */
  readonly contents: Scalars['Base64String'];
};

/**
 * A description of a set of changes to a file tree to be made as part of
 * a git commit, modeled as zero or more file `additions` and zero or more
 * file `deletions`.
 *
 * Both fields are optional; omitting both will produce a commit with no
 * file changes.
 *
 * `deletions` and `additions` describe changes to files identified
 * by their path in the git tree using unix-style path separators, i.e.
 * `/`.  The root of a git tree is an empty string, so paths are not
 * slash-prefixed.
 *
 * `path` values must be unique across all `additions` and `deletions`
 * provided.  Any duplication will result in a validation error.
 *
 * ### Encoding
 *
 * File contents must be provided in full for each `FileAddition`.
 *
 * The `contents` of a `FileAddition` must be encoded using RFC 4648
 * compliant base64, i.e. correct padding is required and no characters
 * outside the standard alphabet may be used.  Invalid base64
 * encoding will be rejected with a validation error.
 *
 * The encoded contents may be binary.
 *
 * For text files, no assumptions are made about the character encoding of
 * the file contents (after base64 decoding).  No charset transcoding or
 * line-ending normalization will be performed; it is the client's
 * responsibility to manage the character encoding of files they provide.
 * However, for maximum compatibility we recommend using UTF-8 encoding
 * and ensuring that all files in a repository use a consistent
 * line-ending convention (`\n` or `\r\n`), and that all files end
 * with a newline.
 *
 * ### Modeling file changes
 *
 * Each of the the five types of conceptual changes that can be made in a
 * git commit can be described using the `FileChanges` type as follows:
 *
 * 1. New file addition: create file `hello world\n` at path `docs/README.txt`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 * 2. Existing file modification: change existing `docs/README.txt` to have new
 *    content `new content here\n`:
 *
 *        {
 *          "additions" [
 *            {
 *              "path": "docs/README.txt",
 *              "contents": base64encode("new content here\n")
 *            }
 *          ]
 *        }
 *
 * 3. Existing file deletion: remove existing file `docs/README.txt`.
 *    Note that the path is required to exist -- specifying a
 *    path that does not exist on the given branch will abort the
 *    commit and return an error.
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt"
 *            }
 *          ]
 *        }
 *
 *
 * 4. File rename with no changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to the same content at
 *    `newdocs/README.txt`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("hello world\n")
 *            }
 *          ]
 *        }
 *
 *
 * 5. File rename with changes: rename `docs/README.txt` with
 *    previous content `hello world\n` to a file at path
 *    `newdocs/README.txt` with content `new contents\n`:
 *
 *        {
 *          "deletions" [
 *            {
 *              "path": "docs/README.txt",
 *            }
 *          ],
 *          "additions" [
 *            {
 *              "path": "newdocs/README.txt",
 *              "contents": base64encode("new contents\n")
 *            }
 *          ]
 *        }
 */
export type GraphQLFileChanges = {
  /** Files to delete. */
  readonly deletions: Maybe<ReadonlyArray<GraphQLFileDeletion>>;
  /** File to add or change. */
  readonly additions: Maybe<ReadonlyArray<GraphQLFileAddition>>;
};

/** A command to delete the file at the given path as part of a commit. */
export type GraphQLFileDeletion = {
  /** The path to delete */
  readonly path: Scalars['String'];
};

/** The possible viewed states of a file . */
export enum GraphQLFileViewedState {
  /** The file has new changes since last viewed. */
  DISMISSED = 'DISMISSED',
  /** The file has been marked as viewed. */
  VIEWED = 'VIEWED',
  /** The file has not been marked as viewed. */
  UNVIEWED = 'UNVIEWED'
}

/** Autogenerated input type of FollowUser */
export type GraphQLFollowUserInput = {
  /** ID of the user to follow. */
  readonly userId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of FollowUser */
export type GraphQLFollowUserPayload = {
  readonly __typename?: 'FollowUserPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The user that was followed. */
  readonly user: Maybe<GraphQLUser>;
};

/** The connection type for User. */
export type GraphQLFollowerConnection = {
  readonly __typename?: 'FollowerConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLUserEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** The connection type for User. */
export type GraphQLFollowingConnection = {
  readonly __typename?: 'FollowingConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLUserEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** A funding platform link for a repository. */
export type GraphQLFundingLink = {
  readonly __typename?: 'FundingLink';
  /** The funding platform this link is for. */
  readonly platform: GraphQLFundingPlatform;
  /** The configured URL for this funding link. */
  readonly url: Scalars['URI'];
};

/** The possible funding platforms for repository funding links. */
export enum GraphQLFundingPlatform {
  /** GitHub funding platform. */
  GITHUB = 'GITHUB',
  /** Patreon funding platform. */
  PATREON = 'PATREON',
  /** Open Collective funding platform. */
  OPEN_COLLECTIVE = 'OPEN_COLLECTIVE',
  /** Ko-fi funding platform. */
  KO_FI = 'KO_FI',
  /** Tidelift funding platform. */
  TIDELIFT = 'TIDELIFT',
  /** Community Bridge funding platform. */
  COMMUNITY_BRIDGE = 'COMMUNITY_BRIDGE',
  /** Liberapay funding platform. */
  LIBERAPAY = 'LIBERAPAY',
  /** IssueHunt funding platform. */
  ISSUEHUNT = 'ISSUEHUNT',
  /** Otechie funding platform. */
  OTECHIE = 'OTECHIE',
  /** LFX Crowdfunding funding platform. */
  LFX_CROWDFUNDING = 'LFX_CROWDFUNDING',
  /** Custom funding platform. */
  CUSTOM = 'CUSTOM'
}

/** A generic hovercard context with a message and icon */
export type GraphQLGenericHovercardContext = GraphQLHovercardContext & {
  readonly __typename?: 'GenericHovercardContext';
  /** A string describing this context */
  readonly message: Scalars['String'];
  /** An octicon to accompany this context */
  readonly octicon: Scalars['String'];
};

/** A Gist. */
export type GraphQLGist = GraphQLNode & GraphQLStarrable & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'Gist';
  /** A list of comments associated with the gist */
  readonly comments: GraphQLGistCommentConnection;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The gist description. */
  readonly description: Maybe<Scalars['String']>;
  /** The files in this gist. */
  readonly files: Maybe<ReadonlyArray<Maybe<GraphQLGistFile>>>;
  /** A list of forks associated with the gist */
  readonly forks: GraphQLGistConnection;
  readonly id: Scalars['ID'];
  /** Identifies if the gist is a fork. */
  readonly isFork: Scalars['Boolean'];
  /** Whether the gist is public or not. */
  readonly isPublic: Scalars['Boolean'];
  /** The gist name. */
  readonly name: Scalars['String'];
  /** The gist owner. */
  readonly owner: Maybe<GraphQLRepositoryOwner>;
  /** Identifies when the gist was last pushed to. */
  readonly pushedAt: Maybe<Scalars['DateTime']>;
  /** The HTML path to this resource. */
  readonly resourcePath: Scalars['URI'];
  /** Returns a count of how many stargazers there are on this object */
  readonly stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  readonly stargazers: GraphQLStargazerConnection;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this Gist. */
  readonly url: Scalars['URI'];
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  readonly viewerHasStarred: Scalars['Boolean'];
};


/** A Gist. */
export type GraphQLGistCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A Gist. */
export type GraphQLGistFilesArgs = {
  limit?: Maybe<Scalars['Int']>;
  oid: Maybe<Scalars['GitObjectID']>;
};


/** A Gist. */
export type GraphQLGistForksArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLGistOrder>;
};


/** A Gist. */
export type GraphQLGistStargazersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLStarOrder>;
};

/** Represents a comment on an Gist. */
export type GraphQLGistComment = GraphQLNode & GraphQLComment & GraphQLDeletable & GraphQLMinimizable & GraphQLUpdatable & GraphQLUpdatableComment & {
  readonly __typename?: 'GistComment';
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the gist. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** Identifies the comment body. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  readonly bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  /** The associated gist. */
  readonly gist: GraphQLGist;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  readonly isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** Returns why the comment was minimized. */
  readonly minimizedReason: Maybe<Scalars['String']>;
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  readonly viewerCanMinimize: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
};


/** Represents a comment on an Gist. */
export type GraphQLGistCommentUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for GistComment. */
export type GraphQLGistCommentConnection = {
  readonly __typename?: 'GistCommentConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLGistCommentEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLGistComment>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLGistCommentEdge = {
  readonly __typename?: 'GistCommentEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLGistComment>;
};

/** The connection type for Gist. */
export type GraphQLGistConnection = {
  readonly __typename?: 'GistConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLGistEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLGist>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLGistEdge = {
  readonly __typename?: 'GistEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLGist>;
};

/** A file in a gist. */
export type GraphQLGistFile = {
  readonly __typename?: 'GistFile';
  /** The file name encoded to remove characters that are invalid in URL paths. */
  readonly encodedName: Maybe<Scalars['String']>;
  /** The gist file encoding. */
  readonly encoding: Maybe<Scalars['String']>;
  /** The file extension from the file name. */
  readonly extension: Maybe<Scalars['String']>;
  /** Indicates if this file is an image. */
  readonly isImage: Scalars['Boolean'];
  /** Whether the file's contents were truncated. */
  readonly isTruncated: Scalars['Boolean'];
  /** The programming language this file is written in. */
  readonly language: Maybe<GraphQLLanguage>;
  /** The gist file name. */
  readonly name: Maybe<Scalars['String']>;
  /** The gist file size in bytes. */
  readonly size: Maybe<Scalars['Int']>;
  /** UTF8 text data or null if the file is binary */
  readonly text: Maybe<Scalars['String']>;
};


/** A file in a gist. */
export type GraphQLGistFileTextArgs = {
  truncate: Maybe<Scalars['Int']>;
};

/** Ordering options for gist connections */
export type GraphQLGistOrder = {
  /** The field to order repositories by. */
  readonly field: GraphQLGistOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which gist connections can be ordered. */
export enum GraphQLGistOrderField {
  /** Order gists by creation time */
  CREATED_AT = 'CREATED_AT',
  /** Order gists by update time */
  UPDATED_AT = 'UPDATED_AT',
  /** Order gists by push time */
  PUSHED_AT = 'PUSHED_AT'
}

/** The privacy of a Gist */
export enum GraphQLGistPrivacy {
  /** Public */
  PUBLIC = 'PUBLIC',
  /** Secret */
  SECRET = 'SECRET',
  /** Gists that are public and secret */
  ALL = 'ALL'
}

/** Represents an actor in a Git commit (ie. an author or committer). */
export type GraphQLGitActor = {
  readonly __typename?: 'GitActor';
  /** A URL pointing to the author's public avatar. */
  readonly avatarUrl: Scalars['URI'];
  /** The timestamp of the Git action (authoring or committing). */
  readonly date: Maybe<Scalars['GitTimestamp']>;
  /** The email in the Git commit. */
  readonly email: Maybe<Scalars['String']>;
  /** The name in the Git commit. */
  readonly name: Maybe<Scalars['String']>;
  /** The GitHub user corresponding to the email field. Null if no such user exists. */
  readonly user: Maybe<GraphQLUser>;
};


/** Represents an actor in a Git commit (ie. an author or committer). */
export type GraphQLGitActorAvatarUrlArgs = {
  size: Maybe<Scalars['Int']>;
};

/** The connection type for GitActor. */
export type GraphQLGitActorConnection = {
  readonly __typename?: 'GitActorConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLGitActorEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLGitActor>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLGitActorEdge = {
  readonly __typename?: 'GitActorEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLGitActor>;
};

/** Represents information about the GitHub instance. */
export type GraphQLGitHubMetadata = {
  readonly __typename?: 'GitHubMetadata';
  /** Returns a String that's a SHA of `github-services` */
  readonly gitHubServicesSha: Scalars['GitObjectID'];
  /** IP addresses that users connect to for git operations */
  readonly gitIpAddresses: Maybe<ReadonlyArray<Scalars['String']>>;
  /** IP addresses that service hooks are sent from */
  readonly hookIpAddresses: Maybe<ReadonlyArray<Scalars['String']>>;
  /** IP addresses that the importer connects from */
  readonly importerIpAddresses: Maybe<ReadonlyArray<Scalars['String']>>;
  /** Whether or not users are verified */
  readonly isPasswordAuthenticationVerifiable: Scalars['Boolean'];
  /** IP addresses for GitHub Pages' A records */
  readonly pagesIpAddresses: Maybe<ReadonlyArray<Scalars['String']>>;
};

/** Represents a Git object. */
export type GraphQLGitObject = {
  /** An abbreviated version of the Git object ID */
  readonly abbreviatedOid: Scalars['String'];
  /** The HTTP path for this Git object */
  readonly commitResourcePath: Scalars['URI'];
  /** The HTTP URL for this Git object */
  readonly commitUrl: Scalars['URI'];
  readonly id: Scalars['ID'];
  /** The Git object ID */
  readonly oid: Scalars['GitObjectID'];
  /** The Repository the Git object belongs to */
  readonly repository: GraphQLRepository;
};



/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */
export type GraphQLGitSignature = {
  /** Email used to sign this object. */
  readonly email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  readonly isValid: Scalars['Boolean'];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  readonly payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  readonly signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  readonly signer: Maybe<GraphQLUser>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  readonly state: GraphQLGitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  readonly wasSignedByGitHub: Scalars['Boolean'];
};

/** The state of a Git signature. */
export enum GraphQLGitSignatureState {
  /** Valid signature and verified by GitHub */
  VALID = 'VALID',
  /** Invalid signature */
  INVALID = 'INVALID',
  /** Malformed signature */
  MALFORMED_SIG = 'MALFORMED_SIG',
  /** Key used for signing not known to GitHub */
  UNKNOWN_KEY = 'UNKNOWN_KEY',
  /** Invalid email used for signing */
  BAD_EMAIL = 'BAD_EMAIL',
  /** Email used for signing unverified on GitHub */
  UNVERIFIED_EMAIL = 'UNVERIFIED_EMAIL',
  /** Email used for signing not known to GitHub */
  NO_USER = 'NO_USER',
  /** Unknown signature type */
  UNKNOWN_SIG_TYPE = 'UNKNOWN_SIG_TYPE',
  /** Unsigned */
  UNSIGNED = 'UNSIGNED',
  /** Internal error - the GPG verification service is unavailable at the moment */
  GPGVERIFY_UNAVAILABLE = 'GPGVERIFY_UNAVAILABLE',
  /** Internal error - the GPG verification service misbehaved */
  GPGVERIFY_ERROR = 'GPGVERIFY_ERROR',
  /** The usage flags for the key that signed this don't allow signing */
  NOT_SIGNING_KEY = 'NOT_SIGNING_KEY',
  /** Signing key expired */
  EXPIRED_KEY = 'EXPIRED_KEY',
  /** Valid signature, pending certificate revocation checking */
  OCSP_PENDING = 'OCSP_PENDING',
  /** Valid signature, though certificate revocation check failed */
  OCSP_ERROR = 'OCSP_ERROR',
  /** The signing certificate or its chain could not be verified */
  BAD_CERT = 'BAD_CERT',
  /** One or more certificates in chain has been revoked */
  OCSP_REVOKED = 'OCSP_REVOKED'
}


/** Represents a GPG signature on a Commit or Tag. */
export type GraphQLGpgSignature = GraphQLGitSignature & {
  readonly __typename?: 'GpgSignature';
  /** Email used to sign this object. */
  readonly email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  readonly isValid: Scalars['Boolean'];
  /** Hex-encoded ID of the key that signed this object. */
  readonly keyId: Maybe<Scalars['String']>;
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  readonly payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  readonly signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  readonly signer: Maybe<GraphQLUser>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  readonly state: GraphQLGitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  readonly wasSignedByGitHub: Scalars['Boolean'];
};

/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */
export type GraphQLGrantEnterpriseOrganizationsMigratorRoleInput = {
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  readonly enterpriseId: Scalars['ID'];
  /** The login of the user to grant the migrator role */
  readonly login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
export type GraphQLGrantEnterpriseOrganizationsMigratorRolePayload = {
  readonly __typename?: 'GrantEnterpriseOrganizationsMigratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The organizations that had the migrator role applied to for the given user. */
  readonly organizations: Maybe<GraphQLOrganizationConnection>;
};


/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */
export type GraphQLGrantEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of GrantMigratorRole */
export type GraphQLGrantMigratorRoleInput = {
  /** The ID of the organization that the user/team belongs to. */
  readonly organizationId: Scalars['ID'];
  /** The user login or Team slug to grant the migrator role. */
  readonly actor: Scalars['String'];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  readonly actorType: GraphQLActorType;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of GrantMigratorRole */
export type GraphQLGrantMigratorRolePayload = {
  readonly __typename?: 'GrantMigratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** Did the operation succeed? */
  readonly success: Maybe<Scalars['Boolean']>;
};


/** Represents a 'head_ref_deleted' event on a given pull request. */
export type GraphQLHeadRefDeletedEvent = GraphQLNode & {
  readonly __typename?: 'HeadRefDeletedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the Ref associated with the `head_ref_deleted` event. */
  readonly headRef: Maybe<GraphQLRef>;
  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */
  readonly headRefName: Scalars['String'];
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
};

/** Represents a 'head_ref_force_pushed' event on a given pull request. */
export type GraphQLHeadRefForcePushedEvent = GraphQLNode & {
  readonly __typename?: 'HeadRefForcePushedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */
  readonly afterCommit: Maybe<GraphQLCommit>;
  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */
  readonly beforeCommit: Maybe<GraphQLCommit>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */
  readonly ref: Maybe<GraphQLRef>;
};

/** Represents a 'head_ref_restored' event on a given pull request. */
export type GraphQLHeadRefRestoredEvent = GraphQLNode & {
  readonly __typename?: 'HeadRefRestoredEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
};

/** Detail needed to display a hovercard for a user */
export type GraphQLHovercard = {
  readonly __typename?: 'Hovercard';
  /** Each of the contexts for this hovercard */
  readonly contexts: ReadonlyArray<GraphQLHovercardContext>;
};

/** An individual line of a hovercard */
export type GraphQLHovercardContext = {
  /** A string describing this context */
  readonly message: Scalars['String'];
  /** An octicon to accompany this context */
  readonly octicon: Scalars['String'];
};

/** The possible states in which authentication can be configured with an identity provider. */
export enum GraphQLIdentityProviderConfigurationState {
  /** Authentication with an identity provider is configured and enforced. */
  ENFORCED = 'ENFORCED',
  /** Authentication with an identity provider is configured but not enforced. */
  CONFIGURED = 'CONFIGURED',
  /** Authentication with an identity provider is not configured. */
  UNCONFIGURED = 'UNCONFIGURED'
}

/** Autogenerated input type of InviteEnterpriseAdmin */
export type GraphQLInviteEnterpriseAdminInput = {
  /** The ID of the enterprise to which you want to invite an administrator. */
  readonly enterpriseId: Scalars['ID'];
  /** The login of a user to invite as an administrator. */
  readonly invitee: Maybe<Scalars['String']>;
  /** The email of the person to invite as an administrator. */
  readonly email: Maybe<Scalars['String']>;
  /** The role of the administrator. */
  readonly role: Maybe<GraphQLEnterpriseAdministratorRole>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of InviteEnterpriseAdmin */
export type GraphQLInviteEnterpriseAdminPayload = {
  readonly __typename?: 'InviteEnterpriseAdminPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The created enterprise administrator invitation. */
  readonly invitation: Maybe<GraphQLEnterpriseAdministratorInvitation>;
};

/** The possible values for the IP allow list enabled setting. */
export enum GraphQLIpAllowListEnabledSettingValue {
  /** The setting is enabled for the owner. */
  ENABLED = 'ENABLED',
  /** The setting is disabled for the owner. */
  DISABLED = 'DISABLED'
}

/** An IP address or range of addresses that is allowed to access an owner's resources. */
export type GraphQLIpAllowListEntry = GraphQLNode & {
  readonly __typename?: 'IpAllowListEntry';
  /** A single IP address or range of IP addresses in CIDR notation. */
  readonly allowListValue: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Whether the entry is currently active. */
  readonly isActive: Scalars['Boolean'];
  /** The name of the IP allow list entry. */
  readonly name: Maybe<Scalars['String']>;
  /** The owner of the IP allow list entry. */
  readonly owner: GraphQLIpAllowListOwner;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** The connection type for IpAllowListEntry. */
export type GraphQLIpAllowListEntryConnection = {
  readonly __typename?: 'IpAllowListEntryConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLIpAllowListEntryEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLIpAllowListEntry>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLIpAllowListEntryEdge = {
  readonly __typename?: 'IpAllowListEntryEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLIpAllowListEntry>;
};

/** Ordering options for IP allow list entry connections. */
export type GraphQLIpAllowListEntryOrder = {
  /** The field to order IP allow list entries by. */
  readonly field: GraphQLIpAllowListEntryOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which IP allow list entry connections can be ordered. */
export enum GraphQLIpAllowListEntryOrderField {
  /** Order IP allow list entries by creation time. */
  CREATED_AT = 'CREATED_AT',
  /** Order IP allow list entries by the allow list value. */
  ALLOW_LIST_VALUE = 'ALLOW_LIST_VALUE'
}

/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */
export enum GraphQLIpAllowListForInstalledAppsEnabledSettingValue {
  /** The setting is enabled for the owner. */
  ENABLED = 'ENABLED',
  /** The setting is disabled for the owner. */
  DISABLED = 'DISABLED'
}

/** Types that can own an IP allow list. */
export type GraphQLIpAllowListOwner = GraphQLApp | GraphQLEnterprise | GraphQLOrganization;

/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssue = GraphQLNode & GraphQLAssignable & GraphQLClosable & GraphQLComment & GraphQLUpdatable & GraphQLUpdatableComment & GraphQLLabelable & GraphQLLockable & GraphQLReactable & GraphQLRepositoryNode & GraphQLSubscribable & GraphQLUniformResourceLocatable & GraphQLProjectNextOwner & {
  readonly __typename?: 'Issue';
  /** Reason that the conversation was locked. */
  readonly activeLockReason: Maybe<GraphQLLockReason>;
  /** A list of Users assigned to this object. */
  readonly assignees: GraphQLUserConnection;
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the subject of the comment. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** Identifies the body of the issue. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The http path for this issue body */
  readonly bodyResourcePath: Scalars['URI'];
  /** Identifies the body of the issue rendered to text. */
  readonly bodyText: Scalars['String'];
  /** The http URL for this issue body */
  readonly bodyUrl: Scalars['URI'];
  /** `true` if the object is closed (definition of closed may depend on type) */
  readonly closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  readonly closedAt: Maybe<Scalars['DateTime']>;
  /** A list of comments associated with the Issue. */
  readonly comments: GraphQLIssueCommentConnection;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  /** The hovercard information for this issue */
  readonly hovercard: GraphQLHovercard;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** Indicates whether or not this issue is currently pinned to the repository issues list */
  readonly isPinned: Maybe<Scalars['Boolean']>;
  /** Is this issue read by the viewer */
  readonly isReadByViewer: Maybe<Scalars['Boolean']>;
  /** A list of labels associated with the object. */
  readonly labels: Maybe<GraphQLLabelConnection>;
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** `true` if the object is locked */
  readonly locked: Scalars['Boolean'];
  /** Identifies the milestone associated with the issue. */
  readonly milestone: Maybe<GraphQLMilestone>;
  /** Identifies the issue number. */
  readonly number: Scalars['Int'];
  /** A list of Users that are participating in the Issue conversation. */
  readonly participants: GraphQLUserConnection;
  /** List of project cards associated with this issue. */
  readonly projectCards: GraphQLProjectCardConnection;
  /** Find a project by project (beta) number. */
  readonly projectNext: Maybe<GraphQLProjectNext>;
  /** List of project (beta) items associated with this issue. */
  readonly projectNextItems: GraphQLProjectNextItemConnection;
  /** A list of projects (beta) under the owner. */
  readonly projectsNext: GraphQLProjectNextConnection;
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this issue */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the state of the issue. */
  readonly state: GraphQLIssueState;
  /**
   * A list of events, comments, commits, etc. associated with the issue.
   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
   */
  readonly timeline: GraphQLIssueTimelineConnection;
  /** A list of events, comments, commits, etc. associated with the issue. */
  readonly timelineItems: GraphQLIssueTimelineItemsConnection;
  /** Identifies the issue title. */
  readonly title: Scalars['String'];
  /** Identifies the issue title rendered to HTML. */
  readonly titleHTML: Scalars['String'];
  /** A list of issues that track this issue */
  readonly trackedInIssues: GraphQLIssueConnection;
  /** A list of issues tracked inside the current issue */
  readonly trackedIssues: GraphQLIssueConnection;
  /** The number of tracked issues for this issue */
  readonly trackedIssuesCount: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this issue */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  readonly viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  readonly viewerSubscription: Maybe<GraphQLSubscriptionState>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueAssigneesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueCommentsArgs = {
  orderBy: Maybe<GraphQLIssueCommentOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueHovercardArgs = {
  includeNotificationContexts?: Maybe<Scalars['Boolean']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueLabelsArgs = {
  orderBy?: Maybe<GraphQLLabelOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueParticipantsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueProjectCardsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  archivedStates?: Maybe<ReadonlyArray<Maybe<GraphQLProjectCardArchivedState>>>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueProjectNextArgs = {
  number: Scalars['Int'];
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueProjectNextItemsArgs = {
  includeArchived?: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueProjectsNextArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
  sortBy?: Maybe<GraphQLProjectNextOrderField>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueTimelineArgs = {
  since: Maybe<Scalars['DateTime']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueTimelineItemsArgs = {
  since: Maybe<Scalars['DateTime']>;
  skip: Maybe<Scalars['Int']>;
  itemTypes: Maybe<ReadonlyArray<GraphQLIssueTimelineItemsItemType>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueTrackedInIssuesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueTrackedIssuesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueTrackedIssuesCountArgs = {
  states: Maybe<ReadonlyArray<Maybe<GraphQLTrackedIssueStates>>>;
};


/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */
export type GraphQLIssueUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Represents a comment on an Issue. */
export type GraphQLIssueComment = GraphQLNode & GraphQLComment & GraphQLDeletable & GraphQLMinimizable & GraphQLUpdatable & GraphQLUpdatableComment & GraphQLReactable & GraphQLRepositoryNode & {
  readonly __typename?: 'IssueComment';
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the subject of the comment. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** The body as Markdown. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  readonly bodyText: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  readonly isMinimized: Scalars['Boolean'];
  /** Identifies the issue associated with the comment. */
  readonly issue: GraphQLIssue;
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** Returns why the comment was minimized. */
  readonly minimizedReason: Maybe<Scalars['String']>;
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /**
   * Returns the pull request associated with the comment, if this comment was made on a
   * pull request.
   */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this issue comment */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this issue comment */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  readonly viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
};


/** Represents a comment on an Issue. */
export type GraphQLIssueCommentReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** Represents a comment on an Issue. */
export type GraphQLIssueCommentUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for IssueComment. */
export type GraphQLIssueCommentConnection = {
  readonly __typename?: 'IssueCommentConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLIssueCommentEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLIssueComment>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLIssueCommentEdge = {
  readonly __typename?: 'IssueCommentEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLIssueComment>;
};

/** Ways in which lists of issue comments can be ordered upon return. */
export type GraphQLIssueCommentOrder = {
  /** The field in which to order issue comments by. */
  readonly field: GraphQLIssueCommentOrderField;
  /** The direction in which to order issue comments by the specified field. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which issue comment connections can be ordered. */
export enum GraphQLIssueCommentOrderField {
  /** Order issue comments by update time */
  UPDATED_AT = 'UPDATED_AT'
}

/** The connection type for Issue. */
export type GraphQLIssueConnection = {
  readonly __typename?: 'IssueConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLIssueEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLIssue>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** This aggregates issues opened by a user within one repository. */
export type GraphQLIssueContributionsByRepository = {
  readonly __typename?: 'IssueContributionsByRepository';
  /** The issue contributions. */
  readonly contributions: GraphQLCreatedIssueContributionConnection;
  /** The repository in which the issues were opened. */
  readonly repository: GraphQLRepository;
};


/** This aggregates issues opened by a user within one repository. */
export type GraphQLIssueContributionsByRepositoryContributionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLContributionOrder>;
};

/** An edge in a connection. */
export type GraphQLIssueEdge = {
  readonly __typename?: 'IssueEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLIssue>;
};

/** Ways in which to filter lists of issues. */
export type GraphQLIssueFilters = {
  /** List issues assigned to given name. Pass in `null` for issues with no assigned user, and `*` for issues assigned to any user. */
  readonly assignee: Maybe<Scalars['String']>;
  /** List issues created by given name. */
  readonly createdBy: Maybe<Scalars['String']>;
  /** List issues where the list of label names exist on the issue. */
  readonly labels: Maybe<ReadonlyArray<Scalars['String']>>;
  /** List issues where the given name is mentioned in the issue. */
  readonly mentioned: Maybe<Scalars['String']>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its database ID. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  readonly milestone: Maybe<Scalars['String']>;
  /** List issues by given milestone argument. If an string representation of an integer is passed, it should refer to a milestone by its number field. Pass in `null` for issues with no milestone, and `*` for issues that are assigned to any milestone. */
  readonly milestoneNumber: Maybe<Scalars['String']>;
  /** List issues that have been updated at or after the given date. */
  readonly since: Maybe<Scalars['DateTime']>;
  /** List issues filtered by the list of states given. */
  readonly states: Maybe<ReadonlyArray<GraphQLIssueState>>;
  /** List issues subscribed to by viewer. */
  readonly viewerSubscribed: Maybe<Scalars['Boolean']>;
};

/** Used for return value of Repository.issueOrPullRequest. */
export type GraphQLIssueOrPullRequest = GraphQLIssue | GraphQLPullRequest;

/** Ways in which lists of issues can be ordered upon return. */
export type GraphQLIssueOrder = {
  /** The field in which to order issues by. */
  readonly field: GraphQLIssueOrderField;
  /** The direction in which to order issues by the specified field. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which issue connections can be ordered. */
export enum GraphQLIssueOrderField {
  /** Order issues by creation time */
  CREATED_AT = 'CREATED_AT',
  /** Order issues by update time */
  UPDATED_AT = 'UPDATED_AT',
  /** Order issues by comment count */
  COMMENTS = 'COMMENTS'
}

/** The possible states of an issue. */
export enum GraphQLIssueState {
  /** An issue that is still open */
  OPEN = 'OPEN',
  /** An issue that has been closed */
  CLOSED = 'CLOSED'
}

/** A repository issue template. */
export type GraphQLIssueTemplate = {
  readonly __typename?: 'IssueTemplate';
  /** The template purpose. */
  readonly about: Maybe<Scalars['String']>;
  /** The suggested issue body. */
  readonly body: Maybe<Scalars['String']>;
  /** The template name. */
  readonly name: Scalars['String'];
  /** The suggested issue title. */
  readonly title: Maybe<Scalars['String']>;
};

/** The connection type for IssueTimelineItem. */
export type GraphQLIssueTimelineConnection = {
  readonly __typename?: 'IssueTimelineConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLIssueTimelineItemEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLIssueTimelineItem>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An item in an issue timeline */
export type GraphQLIssueTimelineItem = GraphQLAssignedEvent | GraphQLClosedEvent | GraphQLCommit | GraphQLCrossReferencedEvent | GraphQLDemilestonedEvent | GraphQLIssueComment | GraphQLLabeledEvent | GraphQLLockedEvent | GraphQLMilestonedEvent | GraphQLReferencedEvent | GraphQLRenamedTitleEvent | GraphQLReopenedEvent | GraphQLSubscribedEvent | GraphQLTransferredEvent | GraphQLUnassignedEvent | GraphQLUnlabeledEvent | GraphQLUnlockedEvent | GraphQLUnsubscribedEvent | GraphQLUserBlockedEvent;

/** An edge in a connection. */
export type GraphQLIssueTimelineItemEdge = {
  readonly __typename?: 'IssueTimelineItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLIssueTimelineItem>;
};

/** An item in an issue timeline */
export type GraphQLIssueTimelineItems = GraphQLAddedToProjectEvent | GraphQLAssignedEvent | GraphQLClosedEvent | GraphQLCommentDeletedEvent | GraphQLConnectedEvent | GraphQLConvertedNoteToIssueEvent | GraphQLConvertedToDiscussionEvent | GraphQLCrossReferencedEvent | GraphQLDemilestonedEvent | GraphQLDisconnectedEvent | GraphQLIssueComment | GraphQLLabeledEvent | GraphQLLockedEvent | GraphQLMarkedAsDuplicateEvent | GraphQLMentionedEvent | GraphQLMilestonedEvent | GraphQLMovedColumnsInProjectEvent | GraphQLPinnedEvent | GraphQLReferencedEvent | GraphQLRemovedFromProjectEvent | GraphQLRenamedTitleEvent | GraphQLReopenedEvent | GraphQLSubscribedEvent | GraphQLTransferredEvent | GraphQLUnassignedEvent | GraphQLUnlabeledEvent | GraphQLUnlockedEvent | GraphQLUnmarkedAsDuplicateEvent | GraphQLUnpinnedEvent | GraphQLUnsubscribedEvent | GraphQLUserBlockedEvent;

/** The connection type for IssueTimelineItems. */
export type GraphQLIssueTimelineItemsConnection = {
  readonly __typename?: 'IssueTimelineItemsConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLIssueTimelineItemsEdge>>>;
  /** Identifies the count of items after applying `before` and `after` filters. */
  readonly filteredCount: Scalars['Int'];
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLIssueTimelineItems>>>;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  readonly pageCount: Scalars['Int'];
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
  /** Identifies the date and time when the timeline was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** An edge in a connection. */
export type GraphQLIssueTimelineItemsEdge = {
  readonly __typename?: 'IssueTimelineItemsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLIssueTimelineItems>;
};

/** The possible item types found in a timeline. */
export enum GraphQLIssueTimelineItemsItemType {
  /** Represents a comment on an Issue. */
  ISSUE_COMMENT = 'ISSUE_COMMENT',
  /** Represents a mention made by one issue or pull request to another. */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',
  /** Represents an 'assigned' event on any assignable object. */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',
  /** Represents a 'closed' event on any `Closable`. */
  CLOSED_EVENT = 'CLOSED_EVENT',
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',
  /** Represents a 'connected' event on a given issue or pull request. */
  CONNECTED_EVENT = 'CONNECTED_EVENT',
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  /** Represents a 'converted_to_discussion' event on a given issue. */
  CONVERTED_TO_DISCUSSION_EVENT = 'CONVERTED_TO_DISCUSSION_EVENT',
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',
  /** Represents a 'disconnected' event on a given issue or pull request. */
  DISCONNECTED_EVENT = 'DISCONNECTED_EVENT',
  /** Represents a 'labeled' event on a given issue or pull request. */
  LABELED_EVENT = 'LABELED_EVENT',
  /** Represents a 'locked' event on a given issue or pull request. */
  LOCKED_EVENT = 'LOCKED_EVENT',
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT',
  /** Represents a 'mentioned' event on a given issue or pull request. */
  MENTIONED_EVENT = 'MENTIONED_EVENT',
  /** Represents a 'milestoned' event on a given issue or pull request. */
  MILESTONED_EVENT = 'MILESTONED_EVENT',
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  /** Represents a 'pinned' event on a given issue or pull request. */
  PINNED_EVENT = 'PINNED_EVENT',
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  REFERENCED_EVENT = 'REFERENCED_EVENT',
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',
  /** Represents a 'renamed' event on a given issue or pull request */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',
  /** Represents a 'reopened' event on any `Closable`. */
  REOPENED_EVENT = 'REOPENED_EVENT',
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',
  /** Represents a 'transferred' event on a given issue or pull request. */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',
  /** Represents an 'unassigned' event on any assignable object. */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  UNLABELED_EVENT = 'UNLABELED_EVENT',
  /** Represents an 'unlocked' event on a given issue or pull request. */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',
  /** Represents a 'user_blocked' event on a given user. */
  USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT',
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT',
  /** Represents an 'unpinned' event on a given issue or pull request. */
  UNPINNED_EVENT = 'UNPINNED_EVENT',
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT'
}

/** Represents a user signing up for a GitHub account. */
export type GraphQLJoinedGitHubContribution = GraphQLContribution & {
  readonly __typename?: 'JoinedGitHubContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  readonly isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  readonly occurredAt: Scalars['DateTime'];
  /** The HTTP path for this contribution. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  readonly url: Scalars['URI'];
  /** The user who made this contribution. */
  readonly user: GraphQLUser;
};

/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export type GraphQLLabel = GraphQLNode & {
  readonly __typename?: 'Label';
  /** Identifies the label color. */
  readonly color: Scalars['String'];
  /** Identifies the date and time when the label was created. */
  readonly createdAt: Maybe<Scalars['DateTime']>;
  /** A brief description of this label. */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** Indicates whether or not this is a default label. */
  readonly isDefault: Scalars['Boolean'];
  /** A list of issues associated with this label. */
  readonly issues: GraphQLIssueConnection;
  /** Identifies the label name. */
  readonly name: Scalars['String'];
  /** A list of pull requests associated with this label. */
  readonly pullRequests: GraphQLPullRequestConnection;
  /** The repository associated with this label. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this label. */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the label was last updated. */
  readonly updatedAt: Maybe<Scalars['DateTime']>;
  /** The HTTP URL for this label. */
  readonly url: Scalars['URI'];
};


/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export type GraphQLLabelIssuesArgs = {
  orderBy: Maybe<GraphQLIssueOrder>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  states: Maybe<ReadonlyArray<GraphQLIssueState>>;
  filterBy: Maybe<GraphQLIssueFilters>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */
export type GraphQLLabelPullRequestsArgs = {
  states: Maybe<ReadonlyArray<GraphQLPullRequestState>>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  headRefName: Maybe<Scalars['String']>;
  baseRefName: Maybe<Scalars['String']>;
  orderBy: Maybe<GraphQLIssueOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for Label. */
export type GraphQLLabelConnection = {
  readonly __typename?: 'LabelConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLLabelEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLLabel>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLLabelEdge = {
  readonly __typename?: 'LabelEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLLabel>;
};

/** Ways in which lists of labels can be ordered upon return. */
export type GraphQLLabelOrder = {
  /** The field in which to order labels by. */
  readonly field: GraphQLLabelOrderField;
  /** The direction in which to order labels by the specified field. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which label connections can be ordered. */
export enum GraphQLLabelOrderField {
  /** Order labels by name  */
  NAME = 'NAME',
  /** Order labels by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** An object that can have labels assigned to it. */
export type GraphQLLabelable = {
  /** A list of labels associated with the object. */
  readonly labels: Maybe<GraphQLLabelConnection>;
};


/** An object that can have labels assigned to it. */
export type GraphQLLabelableLabelsArgs = {
  orderBy?: Maybe<GraphQLLabelOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Represents a 'labeled' event on a given issue or pull request. */
export type GraphQLLabeledEvent = GraphQLNode & {
  readonly __typename?: 'LabeledEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Identifies the label associated with the 'labeled' event. */
  readonly label: GraphQLLabel;
  /** Identifies the `Labelable` associated with the event. */
  readonly labelable: GraphQLLabelable;
};

/** Represents a given language found in repositories. */
export type GraphQLLanguage = GraphQLNode & {
  readonly __typename?: 'Language';
  /** The color defined for the current language. */
  readonly color: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The name of the current language. */
  readonly name: Scalars['String'];
};

/** A list of languages associated with the parent. */
export type GraphQLLanguageConnection = {
  readonly __typename?: 'LanguageConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLLanguageEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLLanguage>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
  /** The total size in bytes of files written in that language. */
  readonly totalSize: Scalars['Int'];
};

/** Represents the language of a repository. */
export type GraphQLLanguageEdge = {
  readonly __typename?: 'LanguageEdge';
  readonly cursor: Scalars['String'];
  readonly node: GraphQLLanguage;
  /** The number of bytes of code written in the language. */
  readonly size: Scalars['Int'];
};

/** Ordering options for language connections. */
export type GraphQLLanguageOrder = {
  /** The field to order languages by. */
  readonly field: GraphQLLanguageOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which language connections can be ordered. */
export enum GraphQLLanguageOrderField {
  /** Order languages by the size of all files containing the language */
  SIZE = 'SIZE'
}

/** A repository's open source license */
export type GraphQLLicense = GraphQLNode & {
  readonly __typename?: 'License';
  /** The full text of the license */
  readonly body: Scalars['String'];
  /** The conditions set by the license */
  readonly conditions: ReadonlyArray<Maybe<GraphQLLicenseRule>>;
  /** A human-readable description of the license */
  readonly description: Maybe<Scalars['String']>;
  /** Whether the license should be featured */
  readonly featured: Scalars['Boolean'];
  /** Whether the license should be displayed in license pickers */
  readonly hidden: Scalars['Boolean'];
  readonly id: Scalars['ID'];
  /** Instructions on how to implement the license */
  readonly implementation: Maybe<Scalars['String']>;
  /** The lowercased SPDX ID of the license */
  readonly key: Scalars['String'];
  /** The limitations set by the license */
  readonly limitations: ReadonlyArray<Maybe<GraphQLLicenseRule>>;
  /** The license full name specified by <https://spdx.org/licenses> */
  readonly name: Scalars['String'];
  /** Customary short name if applicable (e.g, GPLv3) */
  readonly nickname: Maybe<Scalars['String']>;
  /** The permissions set by the license */
  readonly permissions: ReadonlyArray<Maybe<GraphQLLicenseRule>>;
  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */
  readonly pseudoLicense: Scalars['Boolean'];
  /** Short identifier specified by <https://spdx.org/licenses> */
  readonly spdxId: Maybe<Scalars['String']>;
  /** URL to the license on <https://choosealicense.com> */
  readonly url: Maybe<Scalars['URI']>;
};

/** Describes a License's conditions, permissions, and limitations */
export type GraphQLLicenseRule = {
  readonly __typename?: 'LicenseRule';
  /** A description of the rule */
  readonly description: Scalars['String'];
  /** The machine-readable rule key */
  readonly key: Scalars['String'];
  /** The human-readable rule label */
  readonly label: Scalars['String'];
};

/** Autogenerated input type of LinkRepositoryToProject */
export type GraphQLLinkRepositoryToProjectInput = {
  /** The ID of the Project to link to a Repository */
  readonly projectId: Scalars['ID'];
  /** The ID of the Repository to link to a Project. */
  readonly repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of LinkRepositoryToProject */
export type GraphQLLinkRepositoryToProjectPayload = {
  readonly __typename?: 'LinkRepositoryToProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The linked Project. */
  readonly project: Maybe<GraphQLProject>;
  /** The linked Repository. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** Autogenerated input type of LockLockable */
export type GraphQLLockLockableInput = {
  /** ID of the item to be locked. */
  readonly lockableId: Scalars['ID'];
  /** A reason for why the item will be locked. */
  readonly lockReason: Maybe<GraphQLLockReason>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of LockLockable */
export type GraphQLLockLockablePayload = {
  readonly __typename?: 'LockLockablePayload';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The item that was locked. */
  readonly lockedRecord: Maybe<GraphQLLockable>;
};

/** The possible reasons that an issue or pull request was locked. */
export enum GraphQLLockReason {
  /** The issue or pull request was locked because the conversation was off-topic. */
  OFF_TOPIC = 'OFF_TOPIC',
  /** The issue or pull request was locked because the conversation was too heated. */
  TOO_HEATED = 'TOO_HEATED',
  /** The issue or pull request was locked because the conversation was resolved. */
  RESOLVED = 'RESOLVED',
  /** The issue or pull request was locked because the conversation was spam. */
  SPAM = 'SPAM'
}

/** An object that can be locked. */
export type GraphQLLockable = {
  /** Reason that the conversation was locked. */
  readonly activeLockReason: Maybe<GraphQLLockReason>;
  /** `true` if the object is locked */
  readonly locked: Scalars['Boolean'];
};

/** Represents a 'locked' event on a given issue or pull request. */
export type GraphQLLockedEvent = GraphQLNode & {
  readonly __typename?: 'LockedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Reason that the conversation was locked (optional). */
  readonly lockReason: Maybe<GraphQLLockReason>;
  /** Object that was locked. */
  readonly lockable: GraphQLLockable;
};

/** A placeholder user for attribution of imported data on GitHub. */
export type GraphQLMannequin = GraphQLNode & GraphQLActor & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'Mannequin';
  /** A URL pointing to the GitHub App's public avatar. */
  readonly avatarUrl: Scalars['URI'];
  /** The user that has claimed the data attributed to this mannequin. */
  readonly claimant: Maybe<GraphQLUser>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The mannequin's email on the source instance. */
  readonly email: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The username of the actor. */
  readonly login: Scalars['String'];
  /** The HTML path to this resource. */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The URL to this resource. */
  readonly url: Scalars['URI'];
};


/** A placeholder user for attribution of imported data on GitHub. */
export type GraphQLMannequinAvatarUrlArgs = {
  size: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of MarkDiscussionCommentAsAnswer */
export type GraphQLMarkDiscussionCommentAsAnswerInput = {
  /** The Node ID of the discussion comment to mark as an answer. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of MarkDiscussionCommentAsAnswer */
export type GraphQLMarkDiscussionCommentAsAnswerPayload = {
  readonly __typename?: 'MarkDiscussionCommentAsAnswerPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The discussion that includes the chosen comment. */
  readonly discussion: Maybe<GraphQLDiscussion>;
};

/** Autogenerated input type of MarkFileAsViewed */
export type GraphQLMarkFileAsViewedInput = {
  /** The Node ID of the pull request. */
  readonly pullRequestId: Scalars['ID'];
  /** The path of the file to mark as viewed */
  readonly path: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of MarkFileAsViewed */
export type GraphQLMarkFileAsViewedPayload = {
  readonly __typename?: 'MarkFileAsViewedPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated pull request. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Autogenerated input type of MarkPullRequestReadyForReview */
export type GraphQLMarkPullRequestReadyForReviewInput = {
  /** ID of the pull request to be marked as ready for review. */
  readonly pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of MarkPullRequestReadyForReview */
export type GraphQLMarkPullRequestReadyForReviewPayload = {
  readonly __typename?: 'MarkPullRequestReadyForReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The pull request that is ready for review. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
export type GraphQLMarkedAsDuplicateEvent = GraphQLNode & {
  readonly __typename?: 'MarkedAsDuplicateEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** The authoritative issue or pull request which has been duplicated by another. */
  readonly canonical: Maybe<GraphQLIssueOrPullRequest>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The issue or pull request which has been marked as a duplicate of another. */
  readonly duplicate: Maybe<GraphQLIssueOrPullRequest>;
  readonly id: Scalars['ID'];
  /** Canonical and duplicate belong to different repositories. */
  readonly isCrossRepository: Scalars['Boolean'];
};

/** A public description of a Marketplace category. */
export type GraphQLMarketplaceCategory = GraphQLNode & {
  readonly __typename?: 'MarketplaceCategory';
  /** The category's description. */
  readonly description: Maybe<Scalars['String']>;
  /** The technical description of how apps listed in this category work with GitHub. */
  readonly howItWorks: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The category's name. */
  readonly name: Scalars['String'];
  /** How many Marketplace listings have this as their primary category. */
  readonly primaryListingCount: Scalars['Int'];
  /** The HTTP path for this Marketplace category. */
  readonly resourcePath: Scalars['URI'];
  /** How many Marketplace listings have this as their secondary category. */
  readonly secondaryListingCount: Scalars['Int'];
  /** The short name of the category used in its URL. */
  readonly slug: Scalars['String'];
  /** The HTTP URL for this Marketplace category. */
  readonly url: Scalars['URI'];
};

/** A listing in the GitHub integration marketplace. */
export type GraphQLMarketplaceListing = GraphQLNode & {
  readonly __typename?: 'MarketplaceListing';
  /** The GitHub App this listing represents. */
  readonly app: Maybe<GraphQLApp>;
  /** URL to the listing owner's company site. */
  readonly companyUrl: Maybe<Scalars['URI']>;
  /** The HTTP path for configuring access to the listing's integration or OAuth app */
  readonly configurationResourcePath: Scalars['URI'];
  /** The HTTP URL for configuring access to the listing's integration or OAuth app */
  readonly configurationUrl: Scalars['URI'];
  /** URL to the listing's documentation. */
  readonly documentationUrl: Maybe<Scalars['URI']>;
  /** The listing's detailed description. */
  readonly extendedDescription: Maybe<Scalars['String']>;
  /** The listing's detailed description rendered to HTML. */
  readonly extendedDescriptionHTML: Scalars['HTML'];
  /** The listing's introductory description. */
  readonly fullDescription: Scalars['String'];
  /** The listing's introductory description rendered to HTML. */
  readonly fullDescriptionHTML: Scalars['HTML'];
  /** Does this listing have any plans with a free trial? */
  readonly hasPublishedFreeTrialPlans: Scalars['Boolean'];
  /** Does this listing have a terms of service link? */
  readonly hasTermsOfService: Scalars['Boolean'];
  /** Whether the creator of the app is a verified org */
  readonly hasVerifiedOwner: Scalars['Boolean'];
  /** A technical description of how this app works with GitHub. */
  readonly howItWorks: Maybe<Scalars['String']>;
  /** The listing's technical description rendered to HTML. */
  readonly howItWorksHTML: Scalars['HTML'];
  readonly id: Scalars['ID'];
  /** URL to install the product to the viewer's account or organization. */
  readonly installationUrl: Maybe<Scalars['URI']>;
  /** Whether this listing's app has been installed for the current viewer */
  readonly installedForViewer: Scalars['Boolean'];
  /** Whether this listing has been removed from the Marketplace. */
  readonly isArchived: Scalars['Boolean'];
  /** Whether this listing is still an editable draft that has not been submitted for review and is not publicly visible in the Marketplace. */
  readonly isDraft: Scalars['Boolean'];
  /** Whether the product this listing represents is available as part of a paid plan. */
  readonly isPaid: Scalars['Boolean'];
  /** Whether this listing has been approved for display in the Marketplace. */
  readonly isPublic: Scalars['Boolean'];
  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */
  readonly isRejected: Scalars['Boolean'];
  /** Whether this listing has been approved for unverified display in the Marketplace. */
  readonly isUnverified: Scalars['Boolean'];
  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */
  readonly isUnverifiedPending: Scalars['Boolean'];
  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  readonly isVerificationPendingFromDraft: Scalars['Boolean'];
  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */
  readonly isVerificationPendingFromUnverified: Scalars['Boolean'];
  /** Whether this listing has been approved for verified display in the Marketplace. */
  readonly isVerified: Scalars['Boolean'];
  /** The hex color code, without the leading '#', for the logo background. */
  readonly logoBackgroundColor: Scalars['String'];
  /** URL for the listing's logo image. */
  readonly logoUrl: Maybe<Scalars['URI']>;
  /** The listing's full name. */
  readonly name: Scalars['String'];
  /** The listing's very short description without a trailing period or ampersands. */
  readonly normalizedShortDescription: Scalars['String'];
  /** URL to the listing's detailed pricing. */
  readonly pricingUrl: Maybe<Scalars['URI']>;
  /** The category that best describes the listing. */
  readonly primaryCategory: GraphQLMarketplaceCategory;
  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */
  readonly privacyPolicyUrl: Scalars['URI'];
  /** The HTTP path for the Marketplace listing. */
  readonly resourcePath: Scalars['URI'];
  /** The URLs for the listing's screenshots. */
  readonly screenshotUrls: ReadonlyArray<Maybe<Scalars['String']>>;
  /** An alternate category that describes the listing. */
  readonly secondaryCategory: Maybe<GraphQLMarketplaceCategory>;
  /** The listing's very short description. */
  readonly shortDescription: Scalars['String'];
  /** The short name of the listing used in its URL. */
  readonly slug: Scalars['String'];
  /** URL to the listing's status page. */
  readonly statusUrl: Maybe<Scalars['URI']>;
  /** An email address for support for this listing's app. */
  readonly supportEmail: Maybe<Scalars['String']>;
  /** Either a URL or an email address for support for this listing's app, may return an empty string for listings that do not require a support URL. */
  readonly supportUrl: Scalars['URI'];
  /** URL to the listing's terms of service. */
  readonly termsOfServiceUrl: Maybe<Scalars['URI']>;
  /** The HTTP URL for the Marketplace listing. */
  readonly url: Scalars['URI'];
  /** Can the current viewer add plans for this Marketplace listing. */
  readonly viewerCanAddPlans: Scalars['Boolean'];
  /** Can the current viewer approve this Marketplace listing. */
  readonly viewerCanApprove: Scalars['Boolean'];
  /** Can the current viewer delist this Marketplace listing. */
  readonly viewerCanDelist: Scalars['Boolean'];
  /** Can the current viewer edit this Marketplace listing. */
  readonly viewerCanEdit: Scalars['Boolean'];
  /**
   * Can the current viewer edit the primary and secondary category of this
   * Marketplace listing.
   */
  readonly viewerCanEditCategories: Scalars['Boolean'];
  /** Can the current viewer edit the plans for this Marketplace listing. */
  readonly viewerCanEditPlans: Scalars['Boolean'];
  /**
   * Can the current viewer return this Marketplace listing to draft state
   * so it becomes editable again.
   */
  readonly viewerCanRedraft: Scalars['Boolean'];
  /**
   * Can the current viewer reject this Marketplace listing by returning it to
   * an editable draft state or rejecting it entirely.
   */
  readonly viewerCanReject: Scalars['Boolean'];
  /**
   * Can the current viewer request this listing be reviewed for display in
   * the Marketplace as verified.
   */
  readonly viewerCanRequestApproval: Scalars['Boolean'];
  /** Indicates whether the current user has an active subscription to this Marketplace listing. */
  readonly viewerHasPurchased: Scalars['Boolean'];
  /**
   * Indicates if the current user has purchased a subscription to this Marketplace listing
   * for all of the organizations the user owns.
   */
  readonly viewerHasPurchasedForAllOrganizations: Scalars['Boolean'];
  /** Does the current viewer role allow them to administer this Marketplace listing. */
  readonly viewerIsListingAdmin: Scalars['Boolean'];
};


/** A listing in the GitHub integration marketplace. */
export type GraphQLMarketplaceListingLogoUrlArgs = {
  size?: Maybe<Scalars['Int']>;
};

/** Look up Marketplace Listings */
export type GraphQLMarketplaceListingConnection = {
  readonly __typename?: 'MarketplaceListingConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLMarketplaceListingEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLMarketplaceListing>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLMarketplaceListingEdge = {
  readonly __typename?: 'MarketplaceListingEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLMarketplaceListing>;
};

/** Entities that have members who can set status messages. */
export type GraphQLMemberStatusable = {
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  readonly memberStatuses: GraphQLUserStatusConnection;
};


/** Entities that have members who can set status messages. */
export type GraphQLMemberStatusableMemberStatusesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLUserStatusOrder>;
};

/** Audit log entry for a members_can_delete_repos.clear event. */
export type GraphQLMembersCanDeleteReposClearAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLEnterpriseAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'MembersCanDeleteReposClearAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  readonly enterpriseResourcePath: Maybe<Scalars['URI']>;
  /** The slug of the enterprise. */
  readonly enterpriseSlug: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  readonly enterpriseUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a members_can_delete_repos.disable event. */
export type GraphQLMembersCanDeleteReposDisableAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLEnterpriseAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'MembersCanDeleteReposDisableAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  readonly enterpriseResourcePath: Maybe<Scalars['URI']>;
  /** The slug of the enterprise. */
  readonly enterpriseSlug: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  readonly enterpriseUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a members_can_delete_repos.enable event. */
export type GraphQLMembersCanDeleteReposEnableAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLEnterpriseAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'MembersCanDeleteReposEnableAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  readonly enterpriseResourcePath: Maybe<Scalars['URI']>;
  /** The slug of the enterprise. */
  readonly enterpriseSlug: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  readonly enterpriseUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Represents a 'mentioned' event on a given issue or pull request. */
export type GraphQLMentionedEvent = GraphQLNode & {
  readonly __typename?: 'MentionedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
};

/** Autogenerated input type of MergeBranch */
export type GraphQLMergeBranchInput = {
  /** The Node ID of the Repository containing the base branch that will be modified. */
  readonly repositoryId: Scalars['ID'];
  /** The name of the base branch that the provided head will be merged into. */
  readonly base: Scalars['String'];
  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */
  readonly head: Scalars['String'];
  /** Message to use for the merge commit. If omitted, a default will be used. */
  readonly commitMessage: Maybe<Scalars['String']>;
  /** The email address to associate with this commit. */
  readonly authorEmail: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of MergeBranch */
export type GraphQLMergeBranchPayload = {
  readonly __typename?: 'MergeBranchPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The resulting merge Commit. */
  readonly mergeCommit: Maybe<GraphQLCommit>;
};

/** Autogenerated input type of MergePullRequest */
export type GraphQLMergePullRequestInput = {
  /** ID of the pull request to be merged. */
  readonly pullRequestId: Scalars['ID'];
  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */
  readonly commitHeadline: Maybe<Scalars['String']>;
  /** Commit body to use for the merge commit; if omitted, a default message will be used */
  readonly commitBody: Maybe<Scalars['String']>;
  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */
  readonly expectedHeadOid: Maybe<Scalars['GitObjectID']>;
  /** The merge method to use. If omitted, defaults to 'MERGE' */
  readonly mergeMethod: Maybe<GraphQLPullRequestMergeMethod>;
  /** The email address to associate with this merge. */
  readonly authorEmail: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of MergePullRequest */
export type GraphQLMergePullRequestPayload = {
  readonly __typename?: 'MergePullRequestPayload';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The pull request that was merged. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Whether or not a PullRequest can be merged. */
export enum GraphQLMergeableState {
  /** The pull request can be merged. */
  MERGEABLE = 'MERGEABLE',
  /** The pull request cannot be merged due to merge conflicts. */
  CONFLICTING = 'CONFLICTING',
  /** The mergeability of the pull request is still being calculated. */
  UNKNOWN = 'UNKNOWN'
}

/** Represents a 'merged' event on a given pull request. */
export type GraphQLMergedEvent = GraphQLNode & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'MergedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the commit associated with the `merge` event. */
  readonly commit: Maybe<GraphQLCommit>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Identifies the Ref associated with the `merge` event. */
  readonly mergeRef: Maybe<GraphQLRef>;
  /** Identifies the name of the Ref associated with the `merge` event. */
  readonly mergeRefName: Scalars['String'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
  /** The HTTP path for this merged event. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this merged event. */
  readonly url: Scalars['URI'];
};

/** Represents an Octoshift migration. */
export type GraphQLMigration = {
  /** The Octoshift migration flag to continue on error. */
  readonly continueOnError: Scalars['Boolean'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The reason the migration failed. */
  readonly failureReason: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The Octoshift migration source. */
  readonly migrationSource: GraphQLMigrationSource;
  /** The Octoshift migration source URL. */
  readonly sourceUrl: Scalars['URI'];
  /** The Octoshift migration state. */
  readonly state: GraphQLMigrationState;
};

/** An Octoshift migration source. */
export type GraphQLMigrationSource = GraphQLNode & {
  readonly __typename?: 'MigrationSource';
  readonly id: Scalars['ID'];
  /** The Octoshift migration source name. */
  readonly name: Scalars['String'];
  /** The Octoshift migration source type. */
  readonly type: GraphQLMigrationSourceType;
  /** The Octoshift migration source URL. */
  readonly url: Scalars['URI'];
};

/** Represents the different Octoshift migration sources. */
export enum GraphQLMigrationSourceType {
  /** A GitLab migration source. */
  GITLAB = 'GITLAB',
  /** An Azure DevOps migration source. */
  AZURE_DEVOPS = 'AZURE_DEVOPS',
  /** A Bitbucket Server migration source. */
  BITBUCKET_SERVER = 'BITBUCKET_SERVER',
  /** A GitHub migration source. */
  GITHUB = 'GITHUB',
  /** A GitHub Migration API source. */
  GITHUB_ARCHIVE = 'GITHUB_ARCHIVE'
}

/** The Octoshift migration state. */
export enum GraphQLMigrationState {
  /** The Octoshift migration has not started. */
  NOT_STARTED = 'NOT_STARTED',
  /** The Octoshift migration has been queued. */
  QUEUED = 'QUEUED',
  /** The Octoshift migration is in progress. */
  IN_PROGRESS = 'IN_PROGRESS',
  /** The Octoshift migration has succeeded. */
  SUCCEEDED = 'SUCCEEDED',
  /** The Octoshift migration has failed. */
  FAILED = 'FAILED'
}

/** Represents a Milestone object on a given repository. */
export type GraphQLMilestone = GraphQLNode & GraphQLClosable & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'Milestone';
  /** `true` if the object is closed (definition of closed may depend on type) */
  readonly closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  readonly closedAt: Maybe<Scalars['DateTime']>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the actor who created the milestone. */
  readonly creator: Maybe<GraphQLActor>;
  /** Identifies the description of the milestone. */
  readonly description: Maybe<Scalars['String']>;
  /** Identifies the due date of the milestone. */
  readonly dueOn: Maybe<Scalars['DateTime']>;
  readonly id: Scalars['ID'];
  /** A list of issues associated with the milestone. */
  readonly issues: GraphQLIssueConnection;
  /** Identifies the number of the milestone. */
  readonly number: Scalars['Int'];
  /** Identifies the percentage complete for the milestone */
  readonly progressPercentage: Scalars['Float'];
  /** A list of pull requests associated with the milestone. */
  readonly pullRequests: GraphQLPullRequestConnection;
  /** The repository associated with this milestone. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this milestone */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the state of the milestone. */
  readonly state: GraphQLMilestoneState;
  /** Identifies the title of the milestone. */
  readonly title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this milestone */
  readonly url: Scalars['URI'];
};


/** Represents a Milestone object on a given repository. */
export type GraphQLMilestoneIssuesArgs = {
  orderBy: Maybe<GraphQLIssueOrder>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  states: Maybe<ReadonlyArray<GraphQLIssueState>>;
  filterBy: Maybe<GraphQLIssueFilters>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Represents a Milestone object on a given repository. */
export type GraphQLMilestonePullRequestsArgs = {
  states: Maybe<ReadonlyArray<GraphQLPullRequestState>>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  headRefName: Maybe<Scalars['String']>;
  baseRefName: Maybe<Scalars['String']>;
  orderBy: Maybe<GraphQLIssueOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for Milestone. */
export type GraphQLMilestoneConnection = {
  readonly __typename?: 'MilestoneConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLMilestoneEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLMilestone>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLMilestoneEdge = {
  readonly __typename?: 'MilestoneEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLMilestone>;
};

/** Types that can be inside a Milestone. */
export type GraphQLMilestoneItem = GraphQLIssue | GraphQLPullRequest;

/** Ordering options for milestone connections. */
export type GraphQLMilestoneOrder = {
  /** The field to order milestones by. */
  readonly field: GraphQLMilestoneOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which milestone connections can be ordered. */
export enum GraphQLMilestoneOrderField {
  /** Order milestones by when they are due. */
  DUE_DATE = 'DUE_DATE',
  /** Order milestones by when they were created. */
  CREATED_AT = 'CREATED_AT',
  /** Order milestones by when they were last updated. */
  UPDATED_AT = 'UPDATED_AT',
  /** Order milestones by their number. */
  NUMBER = 'NUMBER'
}

/** The possible states of a milestone. */
export enum GraphQLMilestoneState {
  /** A milestone that is still open. */
  OPEN = 'OPEN',
  /** A milestone that has been closed. */
  CLOSED = 'CLOSED'
}

/** Represents a 'milestoned' event on a given issue or pull request. */
export type GraphQLMilestonedEvent = GraphQLNode & {
  readonly __typename?: 'MilestonedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Identifies the milestone title associated with the 'milestoned' event. */
  readonly milestoneTitle: Scalars['String'];
  /** Object referenced by event. */
  readonly subject: GraphQLMilestoneItem;
};

/** Entities that can be minimized. */
export type GraphQLMinimizable = {
  /** Returns whether or not a comment has been minimized. */
  readonly isMinimized: Scalars['Boolean'];
  /** Returns why the comment was minimized. */
  readonly minimizedReason: Maybe<Scalars['String']>;
  /** Check if the current viewer can minimize this object. */
  readonly viewerCanMinimize: Scalars['Boolean'];
};

/** Autogenerated input type of MinimizeComment */
export type GraphQLMinimizeCommentInput = {
  /** The Node ID of the subject to modify. */
  readonly subjectId: Scalars['ID'];
  /** The classification of comment */
  readonly classifier: GraphQLReportedContentClassifiers;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of MinimizeComment */
export type GraphQLMinimizeCommentPayload = {
  readonly __typename?: 'MinimizeCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The comment that was minimized. */
  readonly minimizedComment: Maybe<GraphQLMinimizable>;
};

/** Autogenerated input type of MoveProjectCard */
export type GraphQLMoveProjectCardInput = {
  /** The id of the card to move. */
  readonly cardId: Scalars['ID'];
  /** The id of the column to move it into. */
  readonly columnId: Scalars['ID'];
  /** Place the new card after the card with this id. Pass null to place it at the top. */
  readonly afterCardId: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of MoveProjectCard */
export type GraphQLMoveProjectCardPayload = {
  readonly __typename?: 'MoveProjectCardPayload';
  /** The new edge of the moved card. */
  readonly cardEdge: Maybe<GraphQLProjectCardEdge>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of MoveProjectColumn */
export type GraphQLMoveProjectColumnInput = {
  /** The id of the column to move. */
  readonly columnId: Scalars['ID'];
  /** Place the new column after the column with this id. Pass null to place it at the front. */
  readonly afterColumnId: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of MoveProjectColumn */
export type GraphQLMoveProjectColumnPayload = {
  readonly __typename?: 'MoveProjectColumnPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new edge of the moved column. */
  readonly columnEdge: Maybe<GraphQLProjectColumnEdge>;
};

/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
export type GraphQLMovedColumnsInProjectEvent = GraphQLNode & {
  readonly __typename?: 'MovedColumnsInProjectEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
};

/** The root query for implementing GraphQL mutations. */
export type GraphQLMutation = {
  readonly __typename?: 'Mutation';
  /** Clear all of a customer's queued migrations */
  readonly abortQueuedMigrations: Maybe<GraphQLAbortQueuedMigrationsPayload>;
  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */
  readonly acceptEnterpriseAdministratorInvitation: Maybe<GraphQLAcceptEnterpriseAdministratorInvitationPayload>;
  /** Applies a suggested topic to the repository. */
  readonly acceptTopicSuggestion: Maybe<GraphQLAcceptTopicSuggestionPayload>;
  /** Adds assignees to an assignable object. */
  readonly addAssigneesToAssignable: Maybe<GraphQLAddAssigneesToAssignablePayload>;
  /** Adds a comment to an Issue or Pull Request. */
  readonly addComment: Maybe<GraphQLAddCommentPayload>;
  /** Adds a comment to a Discussion, possibly as a reply to another comment. */
  readonly addDiscussionComment: Maybe<GraphQLAddDiscussionCommentPayload>;
  /** Adds a support entitlement to an enterprise member. */
  readonly addEnterpriseSupportEntitlement: Maybe<GraphQLAddEnterpriseSupportEntitlementPayload>;
  /** Adds labels to a labelable object. */
  readonly addLabelsToLabelable: Maybe<GraphQLAddLabelsToLabelablePayload>;
  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */
  readonly addProjectCard: Maybe<GraphQLAddProjectCardPayload>;
  /** Adds a column to a Project. */
  readonly addProjectColumn: Maybe<GraphQLAddProjectColumnPayload>;
  /** Adds an existing item (Issue or PullRequest) to a Project. */
  readonly addProjectNextItem: Maybe<GraphQLAddProjectNextItemPayload>;
  /** Adds a review to a Pull Request. */
  readonly addPullRequestReview: Maybe<GraphQLAddPullRequestReviewPayload>;
  /** Adds a comment to a review. */
  readonly addPullRequestReviewComment: Maybe<GraphQLAddPullRequestReviewCommentPayload>;
  /** Adds a new thread to a pending Pull Request Review. */
  readonly addPullRequestReviewThread: Maybe<GraphQLAddPullRequestReviewThreadPayload>;
  /** Adds a reaction to a subject. */
  readonly addReaction: Maybe<GraphQLAddReactionPayload>;
  /** Adds a star to a Starrable. */
  readonly addStar: Maybe<GraphQLAddStarPayload>;
  /** Add an upvote to a discussion or discussion comment. */
  readonly addUpvote: Maybe<GraphQLAddUpvotePayload>;
  /** Adds a verifiable domain to an owning account. */
  readonly addVerifiableDomain: Maybe<GraphQLAddVerifiableDomainPayload>;
  /** Approve all pending deployments under one or more environments */
  readonly approveDeployments: Maybe<GraphQLApproveDeploymentsPayload>;
  /** Approve a verifiable domain for notification delivery. */
  readonly approveVerifiableDomain: Maybe<GraphQLApproveVerifiableDomainPayload>;
  /** Marks a repository as archived. */
  readonly archiveRepository: Maybe<GraphQLArchiveRepositoryPayload>;
  /** Cancels a pending invitation for an administrator to join an enterprise. */
  readonly cancelEnterpriseAdminInvitation: Maybe<GraphQLCancelEnterpriseAdminInvitationPayload>;
  /** Cancel an active sponsorship. */
  readonly cancelSponsorship: Maybe<GraphQLCancelSponsorshipPayload>;
  /** Update your status on GitHub. */
  readonly changeUserStatus: Maybe<GraphQLChangeUserStatusPayload>;
  /** Clears all labels from a labelable object. */
  readonly clearLabelsFromLabelable: Maybe<GraphQLClearLabelsFromLabelablePayload>;
  /** Creates a new project by cloning configuration from an existing project. */
  readonly cloneProject: Maybe<GraphQLCloneProjectPayload>;
  /** Create a new repository with the same files and directory structure as a template repository. */
  readonly cloneTemplateRepository: Maybe<GraphQLCloneTemplateRepositoryPayload>;
  /** Close an issue. */
  readonly closeIssue: Maybe<GraphQLCloseIssuePayload>;
  /** Close a pull request. */
  readonly closePullRequest: Maybe<GraphQLClosePullRequestPayload>;
  /** Convert a project note card to one associated with a newly created issue. */
  readonly convertProjectCardNoteToIssue: Maybe<GraphQLConvertProjectCardNoteToIssuePayload>;
  /** Converts a pull request to draft */
  readonly convertPullRequestToDraft: Maybe<GraphQLConvertPullRequestToDraftPayload>;
  /** Create a new branch protection rule */
  readonly createBranchProtectionRule: Maybe<GraphQLCreateBranchProtectionRulePayload>;
  /** Create a check run. */
  readonly createCheckRun: Maybe<GraphQLCreateCheckRunPayload>;
  /** Create a check suite */
  readonly createCheckSuite: Maybe<GraphQLCreateCheckSuitePayload>;
  /**
   * Appends a commit to the given branch as the authenticated user.
   *
   * This mutation creates a commit whose parent is the HEAD of the provided
   * branch and also updates that branch to point to the new commit.
   * It can be thought of as similar to `git commit`.
   *
   * ### Locating a Branch
   *
   * Commits are appended to a `branch` of type `Ref`.
   * This must refer to a git branch (i.e.  the fully qualified path must
   * begin with `refs/heads/`, although including this prefix is optional.
   *
   * Callers may specify the `branch` to commit to either by its global node
   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
   * more details see the documentation for `CommittableBranch`.
   *
   * ### Describing Changes
   *
   * `fileChanges` are specified as a `FilesChanges` object describing
   * `FileAdditions` and `FileDeletions`.
   *
   * Please see the documentation for `FileChanges` for more information on
   * how to use this argument to describe any set of file changes.
   *
   * ### Authorship
   *
   * Similar to the web commit interface, this mutation does not support
   * specifying the author or committer of the commit and will not add
   * support for this in the future.
   *
   * A commit created by a successful execution of this mutation will be
   * authored by the owner of the credential which authenticates the API
   * request.  The committer will be identical to that of commits authored
   * using the web interface.
   *
   * If you need full control over author and committer information, please
   * use the Git Database REST API instead.
   *
   * ### Commit Signing
   *
   * Commits made using this mutation are automatically signed by GitHub if
   * supported and will be marked as verified in the user interface.
   */
  readonly createCommitOnBranch: Maybe<GraphQLCreateCommitOnBranchPayload>;
  /** Create a discussion. */
  readonly createDiscussion: Maybe<GraphQLCreateDiscussionPayload>;
  /** Creates an organization as part of an enterprise account. */
  readonly createEnterpriseOrganization: Maybe<GraphQLCreateEnterpriseOrganizationPayload>;
  /** Creates an environment or simply returns it if already exists. */
  readonly createEnvironment: Maybe<GraphQLCreateEnvironmentPayload>;
  /** Creates a new IP allow list entry. */
  readonly createIpAllowListEntry: Maybe<GraphQLCreateIpAllowListEntryPayload>;
  /** Creates a new issue. */
  readonly createIssue: Maybe<GraphQLCreateIssuePayload>;
  /** Creates an Octoshift migration source. */
  readonly createMigrationSource: Maybe<GraphQLCreateMigrationSourcePayload>;
  /** Creates a new project. */
  readonly createProject: Maybe<GraphQLCreateProjectPayload>;
  /** Create a new pull request */
  readonly createPullRequest: Maybe<GraphQLCreatePullRequestPayload>;
  /** Create a new Git Ref. */
  readonly createRef: Maybe<GraphQLCreateRefPayload>;
  /** Create a new repository. */
  readonly createRepository: Maybe<GraphQLCreateRepositoryPayload>;
  /** Create a new payment tier for your GitHub Sponsors profile. */
  readonly createSponsorsTier: Maybe<GraphQLCreateSponsorsTierPayload>;
  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */
  readonly createSponsorship: Maybe<GraphQLCreateSponsorshipPayload>;
  /** Creates a new team discussion. */
  readonly createTeamDiscussion: Maybe<GraphQLCreateTeamDiscussionPayload>;
  /** Creates a new team discussion comment. */
  readonly createTeamDiscussionComment: Maybe<GraphQLCreateTeamDiscussionCommentPayload>;
  /** Rejects a suggested topic for the repository. */
  readonly declineTopicSuggestion: Maybe<GraphQLDeclineTopicSuggestionPayload>;
  /** Delete a branch protection rule */
  readonly deleteBranchProtectionRule: Maybe<GraphQLDeleteBranchProtectionRulePayload>;
  /** Deletes a deployment. */
  readonly deleteDeployment: Maybe<GraphQLDeleteDeploymentPayload>;
  /** Delete a discussion and all of its replies. */
  readonly deleteDiscussion: Maybe<GraphQLDeleteDiscussionPayload>;
  /** Delete a discussion comment. If it has replies, wipe it instead. */
  readonly deleteDiscussionComment: Maybe<GraphQLDeleteDiscussionCommentPayload>;
  /** Deletes an environment */
  readonly deleteEnvironment: Maybe<GraphQLDeleteEnvironmentPayload>;
  /** Deletes an IP allow list entry. */
  readonly deleteIpAllowListEntry: Maybe<GraphQLDeleteIpAllowListEntryPayload>;
  /** Deletes an Issue object. */
  readonly deleteIssue: Maybe<GraphQLDeleteIssuePayload>;
  /** Deletes an IssueComment object. */
  readonly deleteIssueComment: Maybe<GraphQLDeleteIssueCommentPayload>;
  /** Deletes a project. */
  readonly deleteProject: Maybe<GraphQLDeleteProjectPayload>;
  /** Deletes a project card. */
  readonly deleteProjectCard: Maybe<GraphQLDeleteProjectCardPayload>;
  /** Deletes a project column. */
  readonly deleteProjectColumn: Maybe<GraphQLDeleteProjectColumnPayload>;
  /** Deletes an item from a Project. */
  readonly deleteProjectNextItem: Maybe<GraphQLDeleteProjectNextItemPayload>;
  /** Deletes a pull request review. */
  readonly deletePullRequestReview: Maybe<GraphQLDeletePullRequestReviewPayload>;
  /** Deletes a pull request review comment. */
  readonly deletePullRequestReviewComment: Maybe<GraphQLDeletePullRequestReviewCommentPayload>;
  /** Delete a Git Ref. */
  readonly deleteRef: Maybe<GraphQLDeleteRefPayload>;
  /** Deletes a team discussion. */
  readonly deleteTeamDiscussion: Maybe<GraphQLDeleteTeamDiscussionPayload>;
  /** Deletes a team discussion comment. */
  readonly deleteTeamDiscussionComment: Maybe<GraphQLDeleteTeamDiscussionCommentPayload>;
  /** Deletes a verifiable domain. */
  readonly deleteVerifiableDomain: Maybe<GraphQLDeleteVerifiableDomainPayload>;
  /** Disable auto merge on the given pull request */
  readonly disablePullRequestAutoMerge: Maybe<GraphQLDisablePullRequestAutoMergePayload>;
  /** Dismisses an approved or rejected pull request review. */
  readonly dismissPullRequestReview: Maybe<GraphQLDismissPullRequestReviewPayload>;
  /** Dismisses the Dependabot alert. */
  readonly dismissRepositoryVulnerabilityAlert: Maybe<GraphQLDismissRepositoryVulnerabilityAlertPayload>;
  /** Enable the default auto-merge on a pull request. */
  readonly enablePullRequestAutoMerge: Maybe<GraphQLEnablePullRequestAutoMergePayload>;
  /** Follow a user. */
  readonly followUser: Maybe<GraphQLFollowUserPayload>;
  /** Grant the migrator role to a user for all organizations under an enterprise account. */
  readonly grantEnterpriseOrganizationsMigratorRole: Maybe<GraphQLGrantEnterpriseOrganizationsMigratorRolePayload>;
  /** Grant the migrator role to a user or a team. */
  readonly grantMigratorRole: Maybe<GraphQLGrantMigratorRolePayload>;
  /** Invite someone to become an administrator of the enterprise. */
  readonly inviteEnterpriseAdmin: Maybe<GraphQLInviteEnterpriseAdminPayload>;
  /** Creates a repository link for a project. */
  readonly linkRepositoryToProject: Maybe<GraphQLLinkRepositoryToProjectPayload>;
  /** Lock a lockable object */
  readonly lockLockable: Maybe<GraphQLLockLockablePayload>;
  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */
  readonly markDiscussionCommentAsAnswer: Maybe<GraphQLMarkDiscussionCommentAsAnswerPayload>;
  /** Mark a pull request file as viewed */
  readonly markFileAsViewed: Maybe<GraphQLMarkFileAsViewedPayload>;
  /** Marks a pull request ready for review. */
  readonly markPullRequestReadyForReview: Maybe<GraphQLMarkPullRequestReadyForReviewPayload>;
  /** Merge a head into a branch. */
  readonly mergeBranch: Maybe<GraphQLMergeBranchPayload>;
  /** Merge a pull request. */
  readonly mergePullRequest: Maybe<GraphQLMergePullRequestPayload>;
  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */
  readonly minimizeComment: Maybe<GraphQLMinimizeCommentPayload>;
  /** Moves a project card to another place. */
  readonly moveProjectCard: Maybe<GraphQLMoveProjectCardPayload>;
  /** Moves a project column to another place. */
  readonly moveProjectColumn: Maybe<GraphQLMoveProjectColumnPayload>;
  /** Pin an issue to a repository */
  readonly pinIssue: Maybe<GraphQLPinIssuePayload>;
  /** Regenerates the identity provider recovery codes for an enterprise */
  readonly regenerateEnterpriseIdentityProviderRecoveryCodes: Maybe<GraphQLRegenerateEnterpriseIdentityProviderRecoveryCodesPayload>;
  /** Regenerates a verifiable domain's verification token. */
  readonly regenerateVerifiableDomainToken: Maybe<GraphQLRegenerateVerifiableDomainTokenPayload>;
  /** Reject all pending deployments under one or more environments */
  readonly rejectDeployments: Maybe<GraphQLRejectDeploymentsPayload>;
  /** Removes assignees from an assignable object. */
  readonly removeAssigneesFromAssignable: Maybe<GraphQLRemoveAssigneesFromAssignablePayload>;
  /** Removes an administrator from the enterprise. */
  readonly removeEnterpriseAdmin: Maybe<GraphQLRemoveEnterpriseAdminPayload>;
  /** Removes the identity provider from an enterprise */
  readonly removeEnterpriseIdentityProvider: Maybe<GraphQLRemoveEnterpriseIdentityProviderPayload>;
  /** Removes an organization from the enterprise */
  readonly removeEnterpriseOrganization: Maybe<GraphQLRemoveEnterpriseOrganizationPayload>;
  /** Removes a support entitlement from an enterprise member. */
  readonly removeEnterpriseSupportEntitlement: Maybe<GraphQLRemoveEnterpriseSupportEntitlementPayload>;
  /** Removes labels from a Labelable object. */
  readonly removeLabelsFromLabelable: Maybe<GraphQLRemoveLabelsFromLabelablePayload>;
  /** Removes outside collaborator from all repositories in an organization. */
  readonly removeOutsideCollaborator: Maybe<GraphQLRemoveOutsideCollaboratorPayload>;
  /** Removes a reaction from a subject. */
  readonly removeReaction: Maybe<GraphQLRemoveReactionPayload>;
  /** Removes a star from a Starrable. */
  readonly removeStar: Maybe<GraphQLRemoveStarPayload>;
  /** Remove an upvote to a discussion or discussion comment. */
  readonly removeUpvote: Maybe<GraphQLRemoveUpvotePayload>;
  /** Reopen a issue. */
  readonly reopenIssue: Maybe<GraphQLReopenIssuePayload>;
  /** Reopen a pull request. */
  readonly reopenPullRequest: Maybe<GraphQLReopenPullRequestPayload>;
  /** Set review requests on a pull request. */
  readonly requestReviews: Maybe<GraphQLRequestReviewsPayload>;
  /** Rerequests an existing check suite. */
  readonly rerequestCheckSuite: Maybe<GraphQLRerequestCheckSuitePayload>;
  /** Marks a review thread as resolved. */
  readonly resolveReviewThread: Maybe<GraphQLResolveReviewThreadPayload>;
  /** Revoke the migrator role to a user for all organizations under an enterprise account. */
  readonly revokeEnterpriseOrganizationsMigratorRole: Maybe<GraphQLRevokeEnterpriseOrganizationsMigratorRolePayload>;
  /** Revoke the migrator role from a user or a team. */
  readonly revokeMigratorRole: Maybe<GraphQLRevokeMigratorRolePayload>;
  /** Creates or updates the identity provider for an enterprise. */
  readonly setEnterpriseIdentityProvider: Maybe<GraphQLSetEnterpriseIdentityProviderPayload>;
  /** Set an organization level interaction limit for an organization's public repositories. */
  readonly setOrganizationInteractionLimit: Maybe<GraphQLSetOrganizationInteractionLimitPayload>;
  /** Sets an interaction limit setting for a repository. */
  readonly setRepositoryInteractionLimit: Maybe<GraphQLSetRepositoryInteractionLimitPayload>;
  /** Set a user level interaction limit for an user's public repositories. */
  readonly setUserInteractionLimit: Maybe<GraphQLSetUserInteractionLimitPayload>;
  /** Start a repository migration. */
  readonly startRepositoryMigration: Maybe<GraphQLStartRepositoryMigrationPayload>;
  /** Submits a pending pull request review. */
  readonly submitPullRequestReview: Maybe<GraphQLSubmitPullRequestReviewPayload>;
  /** Transfer an issue to a different repository */
  readonly transferIssue: Maybe<GraphQLTransferIssuePayload>;
  /** Unarchives a repository. */
  readonly unarchiveRepository: Maybe<GraphQLUnarchiveRepositoryPayload>;
  /** Unfollow a user. */
  readonly unfollowUser: Maybe<GraphQLUnfollowUserPayload>;
  /** Deletes a repository link from a project. */
  readonly unlinkRepositoryFromProject: Maybe<GraphQLUnlinkRepositoryFromProjectPayload>;
  /** Unlock a lockable object */
  readonly unlockLockable: Maybe<GraphQLUnlockLockablePayload>;
  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */
  readonly unmarkDiscussionCommentAsAnswer: Maybe<GraphQLUnmarkDiscussionCommentAsAnswerPayload>;
  /** Unmark a pull request file as viewed */
  readonly unmarkFileAsViewed: Maybe<GraphQLUnmarkFileAsViewedPayload>;
  /** Unmark an issue as a duplicate of another issue. */
  readonly unmarkIssueAsDuplicate: Maybe<GraphQLUnmarkIssueAsDuplicatePayload>;
  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */
  readonly unminimizeComment: Maybe<GraphQLUnminimizeCommentPayload>;
  /** Unpin a pinned issue from a repository */
  readonly unpinIssue: Maybe<GraphQLUnpinIssuePayload>;
  /** Marks a review thread as unresolved. */
  readonly unresolveReviewThread: Maybe<GraphQLUnresolveReviewThreadPayload>;
  /** Create a new branch protection rule */
  readonly updateBranchProtectionRule: Maybe<GraphQLUpdateBranchProtectionRulePayload>;
  /** Update a check run */
  readonly updateCheckRun: Maybe<GraphQLUpdateCheckRunPayload>;
  /** Modifies the settings of an existing check suite */
  readonly updateCheckSuitePreferences: Maybe<GraphQLUpdateCheckSuitePreferencesPayload>;
  /** Update a discussion */
  readonly updateDiscussion: Maybe<GraphQLUpdateDiscussionPayload>;
  /** Update the contents of a comment on a Discussion */
  readonly updateDiscussionComment: Maybe<GraphQLUpdateDiscussionCommentPayload>;
  /** Updates the role of an enterprise administrator. */
  readonly updateEnterpriseAdministratorRole: Maybe<GraphQLUpdateEnterpriseAdministratorRolePayload>;
  /** Sets whether private repository forks are enabled for an enterprise. */
  readonly updateEnterpriseAllowPrivateRepositoryForkingSetting: Maybe<GraphQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload>;
  /** Sets the base repository permission for organizations in an enterprise. */
  readonly updateEnterpriseDefaultRepositoryPermissionSetting: Maybe<GraphQLUpdateEnterpriseDefaultRepositoryPermissionSettingPayload>;
  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */
  readonly updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: Maybe<GraphQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload>;
  /** Sets the members can create repositories setting for an enterprise. */
  readonly updateEnterpriseMembersCanCreateRepositoriesSetting: Maybe<GraphQLUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload>;
  /** Sets the members can delete issues setting for an enterprise. */
  readonly updateEnterpriseMembersCanDeleteIssuesSetting: Maybe<GraphQLUpdateEnterpriseMembersCanDeleteIssuesSettingPayload>;
  /** Sets the members can delete repositories setting for an enterprise. */
  readonly updateEnterpriseMembersCanDeleteRepositoriesSetting: Maybe<GraphQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload>;
  /** Sets whether members can invite collaborators are enabled for an enterprise. */
  readonly updateEnterpriseMembersCanInviteCollaboratorsSetting: Maybe<GraphQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload>;
  /** Sets whether or not an organization admin can make purchases. */
  readonly updateEnterpriseMembersCanMakePurchasesSetting: Maybe<GraphQLUpdateEnterpriseMembersCanMakePurchasesSettingPayload>;
  /** Sets the members can update protected branches setting for an enterprise. */
  readonly updateEnterpriseMembersCanUpdateProtectedBranchesSetting: Maybe<GraphQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload>;
  /** Sets the members can view dependency insights for an enterprise. */
  readonly updateEnterpriseMembersCanViewDependencyInsightsSetting: Maybe<GraphQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload>;
  /** Sets whether organization projects are enabled for an enterprise. */
  readonly updateEnterpriseOrganizationProjectsSetting: Maybe<GraphQLUpdateEnterpriseOrganizationProjectsSettingPayload>;
  /** Updates the role of an enterprise owner with an organization. */
  readonly updateEnterpriseOwnerOrganizationRole: Maybe<GraphQLUpdateEnterpriseOwnerOrganizationRolePayload>;
  /** Updates an enterprise's profile. */
  readonly updateEnterpriseProfile: Maybe<GraphQLUpdateEnterpriseProfilePayload>;
  /** Sets whether repository projects are enabled for a enterprise. */
  readonly updateEnterpriseRepositoryProjectsSetting: Maybe<GraphQLUpdateEnterpriseRepositoryProjectsSettingPayload>;
  /** Sets whether team discussions are enabled for an enterprise. */
  readonly updateEnterpriseTeamDiscussionsSetting: Maybe<GraphQLUpdateEnterpriseTeamDiscussionsSettingPayload>;
  /** Sets whether two factor authentication is required for all users in an enterprise. */
  readonly updateEnterpriseTwoFactorAuthenticationRequiredSetting: Maybe<GraphQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload>;
  /** Updates an environment. */
  readonly updateEnvironment: Maybe<GraphQLUpdateEnvironmentPayload>;
  /** Sets whether an IP allow list is enabled on an owner. */
  readonly updateIpAllowListEnabledSetting: Maybe<GraphQLUpdateIpAllowListEnabledSettingPayload>;
  /** Updates an IP allow list entry. */
  readonly updateIpAllowListEntry: Maybe<GraphQLUpdateIpAllowListEntryPayload>;
  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */
  readonly updateIpAllowListForInstalledAppsEnabledSetting: Maybe<GraphQLUpdateIpAllowListForInstalledAppsEnabledSettingPayload>;
  /** Updates an Issue. */
  readonly updateIssue: Maybe<GraphQLUpdateIssuePayload>;
  /** Updates an IssueComment object. */
  readonly updateIssueComment: Maybe<GraphQLUpdateIssueCommentPayload>;
  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */
  readonly updateNotificationRestrictionSetting: Maybe<GraphQLUpdateNotificationRestrictionSettingPayload>;
  /** Sets whether private repository forks are enabled for an organization. */
  readonly updateOrganizationAllowPrivateRepositoryForkingSetting: Maybe<GraphQLUpdateOrganizationAllowPrivateRepositoryForkingSettingPayload>;
  /** Updates an existing project. */
  readonly updateProject: Maybe<GraphQLUpdateProjectPayload>;
  /** Updates an existing project card. */
  readonly updateProjectCard: Maybe<GraphQLUpdateProjectCardPayload>;
  /** Updates an existing project column. */
  readonly updateProjectColumn: Maybe<GraphQLUpdateProjectColumnPayload>;
  /** Updates an existing project (beta). */
  readonly updateProjectNext: Maybe<GraphQLUpdateProjectNextPayload>;
  /** Updates a field of an item from a Project. */
  readonly updateProjectNextItemField: Maybe<GraphQLUpdateProjectNextItemFieldPayload>;
  /** Update a pull request */
  readonly updatePullRequest: Maybe<GraphQLUpdatePullRequestPayload>;
  /** Merge HEAD from upstream branch into pull request branch */
  readonly updatePullRequestBranch: Maybe<GraphQLUpdatePullRequestBranchPayload>;
  /** Updates the body of a pull request review. */
  readonly updatePullRequestReview: Maybe<GraphQLUpdatePullRequestReviewPayload>;
  /** Updates a pull request review comment. */
  readonly updatePullRequestReviewComment: Maybe<GraphQLUpdatePullRequestReviewCommentPayload>;
  /** Update a Git Ref. */
  readonly updateRef: Maybe<GraphQLUpdateRefPayload>;
  /** Update information about a repository. */
  readonly updateRepository: Maybe<GraphQLUpdateRepositoryPayload>;
  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */
  readonly updateSponsorshipPreferences: Maybe<GraphQLUpdateSponsorshipPreferencesPayload>;
  /** Updates the state for subscribable subjects. */
  readonly updateSubscription: Maybe<GraphQLUpdateSubscriptionPayload>;
  /** Updates a team discussion. */
  readonly updateTeamDiscussion: Maybe<GraphQLUpdateTeamDiscussionPayload>;
  /** Updates a discussion comment. */
  readonly updateTeamDiscussionComment: Maybe<GraphQLUpdateTeamDiscussionCommentPayload>;
  /** Replaces the repository's topics with the given topics. */
  readonly updateTopics: Maybe<GraphQLUpdateTopicsPayload>;
  /** Verify that a verifiable domain has the expected DNS record. */
  readonly verifyVerifiableDomain: Maybe<GraphQLVerifyVerifiableDomainPayload>;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAbortQueuedMigrationsArgs = {
  input: GraphQLAbortQueuedMigrationsInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAcceptEnterpriseAdministratorInvitationArgs = {
  input: GraphQLAcceptEnterpriseAdministratorInvitationInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAcceptTopicSuggestionArgs = {
  input: GraphQLAcceptTopicSuggestionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddAssigneesToAssignableArgs = {
  input: GraphQLAddAssigneesToAssignableInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddCommentArgs = {
  input: GraphQLAddCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddDiscussionCommentArgs = {
  input: GraphQLAddDiscussionCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddEnterpriseSupportEntitlementArgs = {
  input: GraphQLAddEnterpriseSupportEntitlementInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddLabelsToLabelableArgs = {
  input: GraphQLAddLabelsToLabelableInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddProjectCardArgs = {
  input: GraphQLAddProjectCardInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddProjectColumnArgs = {
  input: GraphQLAddProjectColumnInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddProjectNextItemArgs = {
  input: GraphQLAddProjectNextItemInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddPullRequestReviewArgs = {
  input: GraphQLAddPullRequestReviewInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddPullRequestReviewCommentArgs = {
  input: GraphQLAddPullRequestReviewCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddPullRequestReviewThreadArgs = {
  input: GraphQLAddPullRequestReviewThreadInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddReactionArgs = {
  input: GraphQLAddReactionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddStarArgs = {
  input: GraphQLAddStarInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddUpvoteArgs = {
  input: GraphQLAddUpvoteInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationAddVerifiableDomainArgs = {
  input: GraphQLAddVerifiableDomainInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationApproveDeploymentsArgs = {
  input: GraphQLApproveDeploymentsInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationApproveVerifiableDomainArgs = {
  input: GraphQLApproveVerifiableDomainInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationArchiveRepositoryArgs = {
  input: GraphQLArchiveRepositoryInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCancelEnterpriseAdminInvitationArgs = {
  input: GraphQLCancelEnterpriseAdminInvitationInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCancelSponsorshipArgs = {
  input: GraphQLCancelSponsorshipInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationChangeUserStatusArgs = {
  input: GraphQLChangeUserStatusInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationClearLabelsFromLabelableArgs = {
  input: GraphQLClearLabelsFromLabelableInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCloneProjectArgs = {
  input: GraphQLCloneProjectInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCloneTemplateRepositoryArgs = {
  input: GraphQLCloneTemplateRepositoryInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCloseIssueArgs = {
  input: GraphQLCloseIssueInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationClosePullRequestArgs = {
  input: GraphQLClosePullRequestInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationConvertProjectCardNoteToIssueArgs = {
  input: GraphQLConvertProjectCardNoteToIssueInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationConvertPullRequestToDraftArgs = {
  input: GraphQLConvertPullRequestToDraftInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateBranchProtectionRuleArgs = {
  input: GraphQLCreateBranchProtectionRuleInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateCheckRunArgs = {
  input: GraphQLCreateCheckRunInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateCheckSuiteArgs = {
  input: GraphQLCreateCheckSuiteInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateCommitOnBranchArgs = {
  input: GraphQLCreateCommitOnBranchInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateDiscussionArgs = {
  input: GraphQLCreateDiscussionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateEnterpriseOrganizationArgs = {
  input: GraphQLCreateEnterpriseOrganizationInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateEnvironmentArgs = {
  input: GraphQLCreateEnvironmentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateIpAllowListEntryArgs = {
  input: GraphQLCreateIpAllowListEntryInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateIssueArgs = {
  input: GraphQLCreateIssueInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateMigrationSourceArgs = {
  input: GraphQLCreateMigrationSourceInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateProjectArgs = {
  input: GraphQLCreateProjectInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreatePullRequestArgs = {
  input: GraphQLCreatePullRequestInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateRefArgs = {
  input: GraphQLCreateRefInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateRepositoryArgs = {
  input: GraphQLCreateRepositoryInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateSponsorsTierArgs = {
  input: GraphQLCreateSponsorsTierInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateSponsorshipArgs = {
  input: GraphQLCreateSponsorshipInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateTeamDiscussionArgs = {
  input: GraphQLCreateTeamDiscussionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationCreateTeamDiscussionCommentArgs = {
  input: GraphQLCreateTeamDiscussionCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeclineTopicSuggestionArgs = {
  input: GraphQLDeclineTopicSuggestionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteBranchProtectionRuleArgs = {
  input: GraphQLDeleteBranchProtectionRuleInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteDeploymentArgs = {
  input: GraphQLDeleteDeploymentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteDiscussionArgs = {
  input: GraphQLDeleteDiscussionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteDiscussionCommentArgs = {
  input: GraphQLDeleteDiscussionCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteEnvironmentArgs = {
  input: GraphQLDeleteEnvironmentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteIpAllowListEntryArgs = {
  input: GraphQLDeleteIpAllowListEntryInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteIssueArgs = {
  input: GraphQLDeleteIssueInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteIssueCommentArgs = {
  input: GraphQLDeleteIssueCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteProjectArgs = {
  input: GraphQLDeleteProjectInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteProjectCardArgs = {
  input: GraphQLDeleteProjectCardInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteProjectColumnArgs = {
  input: GraphQLDeleteProjectColumnInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteProjectNextItemArgs = {
  input: GraphQLDeleteProjectNextItemInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeletePullRequestReviewArgs = {
  input: GraphQLDeletePullRequestReviewInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeletePullRequestReviewCommentArgs = {
  input: GraphQLDeletePullRequestReviewCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteRefArgs = {
  input: GraphQLDeleteRefInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteTeamDiscussionArgs = {
  input: GraphQLDeleteTeamDiscussionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteTeamDiscussionCommentArgs = {
  input: GraphQLDeleteTeamDiscussionCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDeleteVerifiableDomainArgs = {
  input: GraphQLDeleteVerifiableDomainInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDisablePullRequestAutoMergeArgs = {
  input: GraphQLDisablePullRequestAutoMergeInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDismissPullRequestReviewArgs = {
  input: GraphQLDismissPullRequestReviewInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationDismissRepositoryVulnerabilityAlertArgs = {
  input: GraphQLDismissRepositoryVulnerabilityAlertInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationEnablePullRequestAutoMergeArgs = {
  input: GraphQLEnablePullRequestAutoMergeInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationFollowUserArgs = {
  input: GraphQLFollowUserInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationGrantEnterpriseOrganizationsMigratorRoleArgs = {
  input: GraphQLGrantEnterpriseOrganizationsMigratorRoleInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationGrantMigratorRoleArgs = {
  input: GraphQLGrantMigratorRoleInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationInviteEnterpriseAdminArgs = {
  input: GraphQLInviteEnterpriseAdminInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationLinkRepositoryToProjectArgs = {
  input: GraphQLLinkRepositoryToProjectInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationLockLockableArgs = {
  input: GraphQLLockLockableInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationMarkDiscussionCommentAsAnswerArgs = {
  input: GraphQLMarkDiscussionCommentAsAnswerInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationMarkFileAsViewedArgs = {
  input: GraphQLMarkFileAsViewedInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationMarkPullRequestReadyForReviewArgs = {
  input: GraphQLMarkPullRequestReadyForReviewInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationMergeBranchArgs = {
  input: GraphQLMergeBranchInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationMergePullRequestArgs = {
  input: GraphQLMergePullRequestInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationMinimizeCommentArgs = {
  input: GraphQLMinimizeCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationMoveProjectCardArgs = {
  input: GraphQLMoveProjectCardInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationMoveProjectColumnArgs = {
  input: GraphQLMoveProjectColumnInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationPinIssueArgs = {
  input: GraphQLPinIssueInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRegenerateEnterpriseIdentityProviderRecoveryCodesArgs = {
  input: GraphQLRegenerateEnterpriseIdentityProviderRecoveryCodesInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRegenerateVerifiableDomainTokenArgs = {
  input: GraphQLRegenerateVerifiableDomainTokenInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRejectDeploymentsArgs = {
  input: GraphQLRejectDeploymentsInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveAssigneesFromAssignableArgs = {
  input: GraphQLRemoveAssigneesFromAssignableInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveEnterpriseAdminArgs = {
  input: GraphQLRemoveEnterpriseAdminInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveEnterpriseIdentityProviderArgs = {
  input: GraphQLRemoveEnterpriseIdentityProviderInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveEnterpriseOrganizationArgs = {
  input: GraphQLRemoveEnterpriseOrganizationInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveEnterpriseSupportEntitlementArgs = {
  input: GraphQLRemoveEnterpriseSupportEntitlementInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveLabelsFromLabelableArgs = {
  input: GraphQLRemoveLabelsFromLabelableInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveOutsideCollaboratorArgs = {
  input: GraphQLRemoveOutsideCollaboratorInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveReactionArgs = {
  input: GraphQLRemoveReactionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveStarArgs = {
  input: GraphQLRemoveStarInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRemoveUpvoteArgs = {
  input: GraphQLRemoveUpvoteInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationReopenIssueArgs = {
  input: GraphQLReopenIssueInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationReopenPullRequestArgs = {
  input: GraphQLReopenPullRequestInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRequestReviewsArgs = {
  input: GraphQLRequestReviewsInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRerequestCheckSuiteArgs = {
  input: GraphQLRerequestCheckSuiteInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationResolveReviewThreadArgs = {
  input: GraphQLResolveReviewThreadInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRevokeEnterpriseOrganizationsMigratorRoleArgs = {
  input: GraphQLRevokeEnterpriseOrganizationsMigratorRoleInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationRevokeMigratorRoleArgs = {
  input: GraphQLRevokeMigratorRoleInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationSetEnterpriseIdentityProviderArgs = {
  input: GraphQLSetEnterpriseIdentityProviderInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationSetOrganizationInteractionLimitArgs = {
  input: GraphQLSetOrganizationInteractionLimitInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationSetRepositoryInteractionLimitArgs = {
  input: GraphQLSetRepositoryInteractionLimitInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationSetUserInteractionLimitArgs = {
  input: GraphQLSetUserInteractionLimitInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationStartRepositoryMigrationArgs = {
  input: GraphQLStartRepositoryMigrationInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationSubmitPullRequestReviewArgs = {
  input: GraphQLSubmitPullRequestReviewInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationTransferIssueArgs = {
  input: GraphQLTransferIssueInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnarchiveRepositoryArgs = {
  input: GraphQLUnarchiveRepositoryInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnfollowUserArgs = {
  input: GraphQLUnfollowUserInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnlinkRepositoryFromProjectArgs = {
  input: GraphQLUnlinkRepositoryFromProjectInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnlockLockableArgs = {
  input: GraphQLUnlockLockableInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnmarkDiscussionCommentAsAnswerArgs = {
  input: GraphQLUnmarkDiscussionCommentAsAnswerInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnmarkFileAsViewedArgs = {
  input: GraphQLUnmarkFileAsViewedInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnmarkIssueAsDuplicateArgs = {
  input: GraphQLUnmarkIssueAsDuplicateInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnminimizeCommentArgs = {
  input: GraphQLUnminimizeCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnpinIssueArgs = {
  input: GraphQLUnpinIssueInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUnresolveReviewThreadArgs = {
  input: GraphQLUnresolveReviewThreadInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateBranchProtectionRuleArgs = {
  input: GraphQLUpdateBranchProtectionRuleInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateCheckRunArgs = {
  input: GraphQLUpdateCheckRunInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateCheckSuitePreferencesArgs = {
  input: GraphQLUpdateCheckSuitePreferencesInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateDiscussionArgs = {
  input: GraphQLUpdateDiscussionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateDiscussionCommentArgs = {
  input: GraphQLUpdateDiscussionCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseAdministratorRoleArgs = {
  input: GraphQLUpdateEnterpriseAdministratorRoleInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs = {
  input: GraphQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseDefaultRepositoryPermissionSettingArgs = {
  input: GraphQLUpdateEnterpriseDefaultRepositoryPermissionSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs = {
  input: GraphQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs = {
  input: GraphQLUpdateEnterpriseMembersCanCreateRepositoriesSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseMembersCanDeleteIssuesSettingArgs = {
  input: GraphQLUpdateEnterpriseMembersCanDeleteIssuesSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs = {
  input: GraphQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs = {
  input: GraphQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseMembersCanMakePurchasesSettingArgs = {
  input: GraphQLUpdateEnterpriseMembersCanMakePurchasesSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs = {
  input: GraphQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs = {
  input: GraphQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseOrganizationProjectsSettingArgs = {
  input: GraphQLUpdateEnterpriseOrganizationProjectsSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseOwnerOrganizationRoleArgs = {
  input: GraphQLUpdateEnterpriseOwnerOrganizationRoleInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseProfileArgs = {
  input: GraphQLUpdateEnterpriseProfileInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseRepositoryProjectsSettingArgs = {
  input: GraphQLUpdateEnterpriseRepositoryProjectsSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseTeamDiscussionsSettingArgs = {
  input: GraphQLUpdateEnterpriseTeamDiscussionsSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs = {
  input: GraphQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateEnvironmentArgs = {
  input: GraphQLUpdateEnvironmentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateIpAllowListEnabledSettingArgs = {
  input: GraphQLUpdateIpAllowListEnabledSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateIpAllowListEntryArgs = {
  input: GraphQLUpdateIpAllowListEntryInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateIpAllowListForInstalledAppsEnabledSettingArgs = {
  input: GraphQLUpdateIpAllowListForInstalledAppsEnabledSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateIssueArgs = {
  input: GraphQLUpdateIssueInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateIssueCommentArgs = {
  input: GraphQLUpdateIssueCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateNotificationRestrictionSettingArgs = {
  input: GraphQLUpdateNotificationRestrictionSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateOrganizationAllowPrivateRepositoryForkingSettingArgs = {
  input: GraphQLUpdateOrganizationAllowPrivateRepositoryForkingSettingInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateProjectArgs = {
  input: GraphQLUpdateProjectInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateProjectCardArgs = {
  input: GraphQLUpdateProjectCardInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateProjectColumnArgs = {
  input: GraphQLUpdateProjectColumnInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateProjectNextArgs = {
  input: GraphQLUpdateProjectNextInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateProjectNextItemFieldArgs = {
  input: GraphQLUpdateProjectNextItemFieldInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdatePullRequestArgs = {
  input: GraphQLUpdatePullRequestInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdatePullRequestBranchArgs = {
  input: GraphQLUpdatePullRequestBranchInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdatePullRequestReviewArgs = {
  input: GraphQLUpdatePullRequestReviewInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdatePullRequestReviewCommentArgs = {
  input: GraphQLUpdatePullRequestReviewCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateRefArgs = {
  input: GraphQLUpdateRefInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateRepositoryArgs = {
  input: GraphQLUpdateRepositoryInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateSponsorshipPreferencesArgs = {
  input: GraphQLUpdateSponsorshipPreferencesInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateSubscriptionArgs = {
  input: GraphQLUpdateSubscriptionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateTeamDiscussionArgs = {
  input: GraphQLUpdateTeamDiscussionInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateTeamDiscussionCommentArgs = {
  input: GraphQLUpdateTeamDiscussionCommentInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationUpdateTopicsArgs = {
  input: GraphQLUpdateTopicsInput;
};


/** The root query for implementing GraphQL mutations. */
export type GraphQLMutationVerifyVerifiableDomainArgs = {
  input: GraphQLVerifyVerifiableDomainInput;
};

/** An object with an ID. */
export type GraphQLNode = {
  /** ID of the object. */
  readonly id: Scalars['ID'];
};

/** The possible values for the notification restriction setting. */
export enum GraphQLNotificationRestrictionSettingValue {
  /** The setting is enabled for the owner. */
  ENABLED = 'ENABLED',
  /** The setting is disabled for the owner. */
  DISABLED = 'DISABLED'
}

/** An OIDC identity provider configured to provision identities for an enterprise. */
export type GraphQLOidcProvider = GraphQLNode & {
  readonly __typename?: 'OIDCProvider';
  /** The enterprise this identity provider belongs to. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** ExternalIdentities provisioned by this identity provider. */
  readonly externalIdentities: GraphQLExternalIdentityConnection;
  readonly id: Scalars['ID'];
  /** The OIDC identity provider type */
  readonly providerType: GraphQLOidcProviderType;
  /** The id of the tenant this provider is attached to */
  readonly tenantId: Scalars['String'];
};


/** An OIDC identity provider configured to provision identities for an enterprise. */
export type GraphQLOidcProviderExternalIdentitiesArgs = {
  membersOnly: Maybe<Scalars['Boolean']>;
  login: Maybe<Scalars['String']>;
  userName: Maybe<Scalars['String']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The OIDC identity provider type */
export enum GraphQLOidcProviderType {
  /** Azure Active Directory */
  AAD = 'AAD'
}

/** Metadata for an audit entry with action oauth_application.* */
export type GraphQLOauthApplicationAuditEntryData = {
  /** The name of the OAuth Application. */
  readonly oauthApplicationName: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  readonly oauthApplicationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the OAuth Application */
  readonly oauthApplicationUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a oauth_application.create event. */
export type GraphQLOauthApplicationCreateAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOauthApplicationAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OauthApplicationCreateAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The application URL of the OAuth Application. */
  readonly applicationUrl: Maybe<Scalars['URI']>;
  /** The callback URL of the OAuth Application. */
  readonly callbackUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The name of the OAuth Application. */
  readonly oauthApplicationName: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  readonly oauthApplicationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the OAuth Application */
  readonly oauthApplicationUrl: Maybe<Scalars['URI']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The rate limit of the OAuth Application. */
  readonly rateLimit: Maybe<Scalars['Int']>;
  /** The state of the OAuth Application. */
  readonly state: Maybe<GraphQLOauthApplicationCreateAuditEntryState>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The state of an OAuth Application when it was created. */
export enum GraphQLOauthApplicationCreateAuditEntryState {
  /** The OAuth Application was active and allowed to have OAuth Accesses. */
  ACTIVE = 'ACTIVE',
  /** The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns. */
  SUSPENDED = 'SUSPENDED',
  /** The OAuth Application was in the process of being deleted. */
  PENDING_DELETION = 'PENDING_DELETION'
}

/** The corresponding operation type for the action */
export enum GraphQLOperationType {
  /** An existing resource was accessed */
  ACCESS = 'ACCESS',
  /** A resource performed an authentication event */
  AUTHENTICATION = 'AUTHENTICATION',
  /** A new resource was created */
  CREATE = 'CREATE',
  /** An existing resource was modified */
  MODIFY = 'MODIFY',
  /** An existing resource was removed */
  REMOVE = 'REMOVE',
  /** An existing resource was restored */
  RESTORE = 'RESTORE',
  /** An existing resource was transferred between multiple resources */
  TRANSFER = 'TRANSFER'
}

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum GraphQLOrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  ASC = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  DESC = 'DESC'
}

/** Audit log entry for a org.add_billing_manager */
export type GraphQLOrgAddBillingManagerAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgAddBillingManagerAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The email address used to invite a billing manager for the organization. */
  readonly invitationEmail: Maybe<Scalars['String']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.add_member */
export type GraphQLOrgAddMemberAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgAddMemberAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The permission level of the member added to the organization. */
  readonly permission: Maybe<GraphQLOrgAddMemberAuditEntryPermission>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The permissions available to members on an Organization. */
export enum GraphQLOrgAddMemberAuditEntryPermission {
  /** Can read and clone repositories. */
  READ = 'READ',
  /** Can read, clone, push, and add collaborators to repositories. */
  ADMIN = 'ADMIN'
}

/** Audit log entry for a org.block_user */
export type GraphQLOrgBlockUserAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgBlockUserAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The blocked user. */
  readonly blockedUser: Maybe<GraphQLUser>;
  /** The username of the blocked user. */
  readonly blockedUserName: Maybe<Scalars['String']>;
  /** The HTTP path for the blocked user. */
  readonly blockedUserResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the blocked user. */
  readonly blockedUserUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.config.disable_collaborators_only event. */
export type GraphQLOrgConfigDisableCollaboratorsOnlyAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgConfigDisableCollaboratorsOnlyAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.config.enable_collaborators_only event. */
export type GraphQLOrgConfigEnableCollaboratorsOnlyAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgConfigEnableCollaboratorsOnlyAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.create event. */
export type GraphQLOrgCreateAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgCreateAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The billing plan for the Organization. */
  readonly billingPlan: Maybe<GraphQLOrgCreateAuditEntryBillingPlan>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The billing plans available for organizations. */
export enum GraphQLOrgCreateAuditEntryBillingPlan {
  /** Free Plan */
  FREE = 'FREE',
  /** Team Plan */
  BUSINESS = 'BUSINESS',
  /** Enterprise Cloud Plan */
  BUSINESS_PLUS = 'BUSINESS_PLUS',
  /** Legacy Unlimited Plan */
  UNLIMITED = 'UNLIMITED',
  /** Tiered Per Seat Plan */
  TIERED_PER_SEAT = 'TIERED_PER_SEAT'
}

/** Audit log entry for a org.disable_oauth_app_restrictions event. */
export type GraphQLOrgDisableOauthAppRestrictionsAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgDisableOauthAppRestrictionsAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.disable_saml event. */
export type GraphQLOrgDisableSamlAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgDisableSamlAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The SAML provider's digest algorithm URL. */
  readonly digestMethodUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The SAML provider's issuer URL. */
  readonly issuerUrl: Maybe<Scalars['URI']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The SAML provider's signature algorithm URL. */
  readonly signatureMethodUrl: Maybe<Scalars['URI']>;
  /** The SAML provider's single sign-on URL. */
  readonly singleSignOnUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.disable_two_factor_requirement event. */
export type GraphQLOrgDisableTwoFactorRequirementAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgDisableTwoFactorRequirementAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.enable_oauth_app_restrictions event. */
export type GraphQLOrgEnableOauthAppRestrictionsAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgEnableOauthAppRestrictionsAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.enable_saml event. */
export type GraphQLOrgEnableSamlAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgEnableSamlAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The SAML provider's digest algorithm URL. */
  readonly digestMethodUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The SAML provider's issuer URL. */
  readonly issuerUrl: Maybe<Scalars['URI']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The SAML provider's signature algorithm URL. */
  readonly signatureMethodUrl: Maybe<Scalars['URI']>;
  /** The SAML provider's single sign-on URL. */
  readonly singleSignOnUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.enable_two_factor_requirement event. */
export type GraphQLOrgEnableTwoFactorRequirementAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgEnableTwoFactorRequirementAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Ordering options for an organization's enterprise owner connections. */
export type GraphQLOrgEnterpriseOwnerOrder = {
  /** The field to order enterprise owners by. */
  readonly field: GraphQLOrgEnterpriseOwnerOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which enterprise owners can be ordered. */
export enum GraphQLOrgEnterpriseOwnerOrderField {
  /** Order enterprise owners by login. */
  LOGIN = 'LOGIN'
}

/** Audit log entry for a org.invite_member event. */
export type GraphQLOrgInviteMemberAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgInviteMemberAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The email address of the organization invitation. */
  readonly email: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The organization invitation. */
  readonly organizationInvitation: Maybe<GraphQLOrganizationInvitation>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.invite_to_business event. */
export type GraphQLOrgInviteToBusinessAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLEnterpriseAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgInviteToBusinessAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  readonly enterpriseResourcePath: Maybe<Scalars['URI']>;
  /** The slug of the enterprise. */
  readonly enterpriseSlug: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  readonly enterpriseUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.oauth_app_access_approved event. */
export type GraphQLOrgOauthAppAccessApprovedAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOauthApplicationAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgOauthAppAccessApprovedAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The name of the OAuth Application. */
  readonly oauthApplicationName: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  readonly oauthApplicationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the OAuth Application */
  readonly oauthApplicationUrl: Maybe<Scalars['URI']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.oauth_app_access_denied event. */
export type GraphQLOrgOauthAppAccessDeniedAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOauthApplicationAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgOauthAppAccessDeniedAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The name of the OAuth Application. */
  readonly oauthApplicationName: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  readonly oauthApplicationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the OAuth Application */
  readonly oauthApplicationUrl: Maybe<Scalars['URI']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.oauth_app_access_requested event. */
export type GraphQLOrgOauthAppAccessRequestedAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOauthApplicationAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgOauthAppAccessRequestedAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The name of the OAuth Application. */
  readonly oauthApplicationName: Maybe<Scalars['String']>;
  /** The HTTP path for the OAuth Application */
  readonly oauthApplicationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the OAuth Application */
  readonly oauthApplicationUrl: Maybe<Scalars['URI']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.remove_billing_manager event. */
export type GraphQLOrgRemoveBillingManagerAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgRemoveBillingManagerAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The reason for the billing manager being removed. */
  readonly reason: Maybe<GraphQLOrgRemoveBillingManagerAuditEntryReason>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The reason a billing manager was removed from an Organization. */
export enum GraphQLOrgRemoveBillingManagerAuditEntryReason {
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',
  /** SAML external identity missing */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',
  /** SAML SSO enforcement requires an external identity */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY'
}

/** Audit log entry for a org.remove_member event. */
export type GraphQLOrgRemoveMemberAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgRemoveMemberAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The types of membership the member has with the organization. */
  readonly membershipTypes: Maybe<ReadonlyArray<GraphQLOrgRemoveMemberAuditEntryMembershipType>>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The reason for the member being removed. */
  readonly reason: Maybe<GraphQLOrgRemoveMemberAuditEntryReason>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The type of membership a user has with an Organization. */
export enum GraphQLOrgRemoveMemberAuditEntryMembershipType {
  /** A direct member is a user that is a member of the Organization. */
  DIRECT_MEMBER = 'DIRECT_MEMBER',
  /** Organization administrators have full access and can change several settings, including the names of repositories that belong to the Organization and Owners team membership. In addition, organization admins can delete the organization and all of its repositories. */
  ADMIN = 'ADMIN',
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  BILLING_MANAGER = 'BILLING_MANAGER',
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the Organization. */
  UNAFFILIATED = 'UNAFFILIATED',
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR'
}

/** The reason a member was removed from an Organization. */
export enum GraphQLOrgRemoveMemberAuditEntryReason {
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',
  /** SAML external identity missing */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING',
  /** SAML SSO enforcement requires an external identity */
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',
  /** User account has been deleted */
  USER_ACCOUNT_DELETED = 'USER_ACCOUNT_DELETED',
  /** User was removed from organization during account recovery */
  TWO_FACTOR_ACCOUNT_RECOVERY = 'TWO_FACTOR_ACCOUNT_RECOVERY'
}

/** Audit log entry for a org.remove_outside_collaborator event. */
export type GraphQLOrgRemoveOutsideCollaboratorAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgRemoveOutsideCollaboratorAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The types of membership the outside collaborator has with the organization. */
  readonly membershipTypes: Maybe<ReadonlyArray<GraphQLOrgRemoveOutsideCollaboratorAuditEntryMembershipType>>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The reason for the outside collaborator being removed from the Organization. */
  readonly reason: Maybe<GraphQLOrgRemoveOutsideCollaboratorAuditEntryReason>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The type of membership a user has with an Organization. */
export enum GraphQLOrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  /** An outside collaborator is a person who isn't explicitly a member of the Organization, but who has Read, Write, or Admin permissions to one or more repositories in the organization. */
  OUTSIDE_COLLABORATOR = 'OUTSIDE_COLLABORATOR',
  /** An unaffiliated collaborator is a person who is not a member of the Organization and does not have access to any repositories in the organization. */
  UNAFFILIATED = 'UNAFFILIATED',
  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */
  BILLING_MANAGER = 'BILLING_MANAGER'
}

/** The reason an outside collaborator was removed from an Organization. */
export enum GraphQLOrgRemoveOutsideCollaboratorAuditEntryReason {
  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',
  /** SAML external identity missing */
  SAML_EXTERNAL_IDENTITY_MISSING = 'SAML_EXTERNAL_IDENTITY_MISSING'
}

/** Audit log entry for a org.restore_member event. */
export type GraphQLOrgRestoreMemberAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgRestoreMemberAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The number of custom email routings for the restored member. */
  readonly restoredCustomEmailRoutingsCount: Maybe<Scalars['Int']>;
  /** The number of issue assignments for the restored member. */
  readonly restoredIssueAssignmentsCount: Maybe<Scalars['Int']>;
  /** Restored organization membership objects. */
  readonly restoredMemberships: Maybe<ReadonlyArray<GraphQLOrgRestoreMemberAuditEntryMembership>>;
  /** The number of restored memberships. */
  readonly restoredMembershipsCount: Maybe<Scalars['Int']>;
  /** The number of repositories of the restored member. */
  readonly restoredRepositoriesCount: Maybe<Scalars['Int']>;
  /** The number of starred repositories for the restored member. */
  readonly restoredRepositoryStarsCount: Maybe<Scalars['Int']>;
  /** The number of watched repositories for the restored member. */
  readonly restoredRepositoryWatchesCount: Maybe<Scalars['Int']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Types of memberships that can be restored for an Organization member. */
export type GraphQLOrgRestoreMemberAuditEntryMembership = GraphQLOrgRestoreMemberMembershipOrganizationAuditEntryData | GraphQLOrgRestoreMemberMembershipRepositoryAuditEntryData | GraphQLOrgRestoreMemberMembershipTeamAuditEntryData;

/** Metadata for an organization membership for org.restore_member actions */
export type GraphQLOrgRestoreMemberMembershipOrganizationAuditEntryData = GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgRestoreMemberMembershipOrganizationAuditEntryData';
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
};

/** Metadata for a repository membership for org.restore_member actions */
export type GraphQLOrgRestoreMemberMembershipRepositoryAuditEntryData = GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'OrgRestoreMemberMembershipRepositoryAuditEntryData';
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
};

/** Metadata for a team membership for org.restore_member actions */
export type GraphQLOrgRestoreMemberMembershipTeamAuditEntryData = GraphQLTeamAuditEntryData & {
  readonly __typename?: 'OrgRestoreMemberMembershipTeamAuditEntryData';
  /** The team associated with the action */
  readonly team: Maybe<GraphQLTeam>;
  /** The name of the team */
  readonly teamName: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  readonly teamResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for this team */
  readonly teamUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.unblock_user */
export type GraphQLOrgUnblockUserAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgUnblockUserAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The user being unblocked by the organization. */
  readonly blockedUser: Maybe<GraphQLUser>;
  /** The username of the blocked user. */
  readonly blockedUserName: Maybe<Scalars['String']>;
  /** The HTTP path for the blocked user. */
  readonly blockedUserResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the blocked user. */
  readonly blockedUserUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a org.update_default_repository_permission */
export type GraphQLOrgUpdateDefaultRepositoryPermissionAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgUpdateDefaultRepositoryPermissionAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The new base repository permission level for the organization. */
  readonly permission: Maybe<GraphQLOrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;
  /** The former base repository permission level for the organization. */
  readonly permissionWas: Maybe<GraphQLOrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The default permission a repository can have in an Organization. */
export enum GraphQLOrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  /** Can read and clone repositories. */
  READ = 'READ',
  /** Can read, clone and push to repositories. */
  WRITE = 'WRITE',
  /** Can read, clone, push, and add collaborators to repositories. */
  ADMIN = 'ADMIN',
  /** No default permission value. */
  NONE = 'NONE'
}

/** Audit log entry for a org.update_member event. */
export type GraphQLOrgUpdateMemberAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgUpdateMemberAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The new member permission level for the organization. */
  readonly permission: Maybe<GraphQLOrgUpdateMemberAuditEntryPermission>;
  /** The former member permission level for the organization. */
  readonly permissionWas: Maybe<GraphQLOrgUpdateMemberAuditEntryPermission>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The permissions available to members on an Organization. */
export enum GraphQLOrgUpdateMemberAuditEntryPermission {
  /** Can read and clone repositories. */
  READ = 'READ',
  /** Can read, clone, push, and add collaborators to repositories. */
  ADMIN = 'ADMIN'
}

/** Audit log entry for a org.update_member_repository_creation_permission event. */
export type GraphQLOrgUpdateMemberRepositoryCreationPermissionAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgUpdateMemberRepositoryCreationPermissionAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** Can members create repositories in the organization. */
  readonly canCreateRepositories: Maybe<Scalars['Boolean']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
  /** The permission for visibility level of repositories for this organization. */
  readonly visibility: Maybe<GraphQLOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility>;
};

/** The permissions available for repository creation on an Organization. */
export enum GraphQLOrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  /** All organization members are restricted from creating any repositories. */
  ALL = 'ALL',
  /** All organization members are restricted from creating public repositories. */
  PUBLIC = 'PUBLIC',
  /** All organization members are allowed to create any repositories. */
  NONE = 'NONE',
  /** All organization members are restricted from creating private repositories. */
  PRIVATE = 'PRIVATE',
  /** All organization members are restricted from creating internal repositories. */
  INTERNAL = 'INTERNAL',
  /** All organization members are restricted from creating public or internal repositories. */
  PUBLIC_INTERNAL = 'PUBLIC_INTERNAL',
  /** All organization members are restricted from creating private or internal repositories. */
  PRIVATE_INTERNAL = 'PRIVATE_INTERNAL',
  /** All organization members are restricted from creating public or private repositories. */
  PUBLIC_PRIVATE = 'PUBLIC_PRIVATE'
}

/** Audit log entry for a org.update_member_repository_invitation_permission event. */
export type GraphQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'OrgUpdateMemberRepositoryInvitationPermissionAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** Can outside collaborators be invited to repositories in the organization. */
  readonly canInviteOutsideCollaboratorsToRepositories: Maybe<Scalars['Boolean']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganization = GraphQLNode & GraphQLActor & GraphQLPackageOwner & GraphQLProjectOwner & GraphQLProjectNextOwner & GraphQLRepositoryDiscussionAuthor & GraphQLRepositoryDiscussionCommentAuthor & GraphQLRepositoryOwner & GraphQLUniformResourceLocatable & GraphQLMemberStatusable & GraphQLProfileOwner & GraphQLSponsorable & {
  readonly __typename?: 'Organization';
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  readonly anyPinnableItems: Scalars['Boolean'];
  /** Audit log entries of the organization */
  readonly auditLog: GraphQLOrganizationAuditEntryConnection;
  /** A URL pointing to the organization's public avatar. */
  readonly avatarUrl: Scalars['URI'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The organization's public profile description. */
  readonly description: Maybe<Scalars['String']>;
  /** The organization's public profile description rendered to HTML. */
  readonly descriptionHTML: Maybe<Scalars['String']>;
  /** A list of domains owned by the organization. */
  readonly domains: Maybe<GraphQLVerifiableDomainConnection>;
  /** The organization's public email. */
  readonly email: Maybe<Scalars['String']>;
  /** A list of owners of the organization's enterprise account. */
  readonly enterpriseOwners: GraphQLOrganizationEnterpriseOwnerConnection;
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  readonly estimatedNextSponsorsPayoutInCents: Scalars['Int'];
  /** True if this user/organization has a GitHub Sponsors listing. */
  readonly hasSponsorsListing: Scalars['Boolean'];
  readonly id: Scalars['ID'];
  /** The interaction ability settings for this organization. */
  readonly interactionAbility: Maybe<GraphQLRepositoryInteractionAbility>;
  /** The setting value for whether the organization has an IP allow list enabled. */
  readonly ipAllowListEnabledSetting: GraphQLIpAllowListEnabledSettingValue;
  /** The IP addresses that are allowed to access resources owned by the organization. */
  readonly ipAllowListEntries: GraphQLIpAllowListEntryConnection;
  /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */
  readonly ipAllowListForInstalledAppsEnabledSetting: GraphQLIpAllowListForInstalledAppsEnabledSettingValue;
  /** Check if the given account is sponsoring this user/organization. */
  readonly isSponsoredBy: Scalars['Boolean'];
  /** True if the viewer is sponsored by this user/organization. */
  readonly isSponsoringViewer: Scalars['Boolean'];
  /** Whether the organization has verified its profile email and website. */
  readonly isVerified: Scalars['Boolean'];
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  readonly itemShowcase: GraphQLProfileItemShowcase;
  /** The organization's public profile location. */
  readonly location: Maybe<Scalars['String']>;
  /** The organization's login name. */
  readonly login: Scalars['String'];
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  readonly memberStatuses: GraphQLUserStatusConnection;
  /** Members can fork private repositories in this organization */
  readonly membersCanForkPrivateRepositories: Scalars['Boolean'];
  /** A list of users who are members of this organization. */
  readonly membersWithRole: GraphQLOrganizationMemberConnection;
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  readonly monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];
  /** The organization's public profile name. */
  readonly name: Maybe<Scalars['String']>;
  /** The HTTP path creating a new team */
  readonly newTeamResourcePath: Scalars['URI'];
  /** The HTTP URL creating a new team */
  readonly newTeamUrl: Scalars['URI'];
  /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */
  readonly notificationDeliveryRestrictionEnabledSetting: GraphQLNotificationRestrictionSettingValue;
  /** The billing email for the organization. */
  readonly organizationBillingEmail: Maybe<Scalars['String']>;
  /** A list of packages under the owner. */
  readonly packages: GraphQLPackageConnection;
  /** A list of users who have been invited to join this organization. */
  readonly pendingMembers: GraphQLUserConnection;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  readonly pinnableItems: GraphQLPinnableItemConnection;
  /** A list of repositories and gists this profile owner has pinned to their profile */
  readonly pinnedItems: GraphQLPinnableItemConnection;
  /** Returns how many more items this profile owner can pin to their profile. */
  readonly pinnedItemsRemaining: Scalars['Int'];
  /** Find project by number. */
  readonly project: Maybe<GraphQLProject>;
  /** Find a project by project (beta) number. */
  readonly projectNext: Maybe<GraphQLProjectNext>;
  /** A list of projects under the owner. */
  readonly projects: GraphQLProjectConnection;
  /** A list of projects (beta) under the owner. */
  readonly projectsNext: GraphQLProjectNextConnection;
  /** The HTTP path listing organization's projects */
  readonly projectsResourcePath: Scalars['URI'];
  /** The HTTP URL listing organization's projects */
  readonly projectsUrl: Scalars['URI'];
  /** A list of repositories that the user owns. */
  readonly repositories: GraphQLRepositoryConnection;
  /** Find Repository. */
  readonly repository: Maybe<GraphQLRepository>;
  /** Discussion comments this user has authored. */
  readonly repositoryDiscussionComments: GraphQLDiscussionCommentConnection;
  /** Discussions this user has started. */
  readonly repositoryDiscussions: GraphQLDiscussionConnection;
  /** A list of all repository migrations for this organization. */
  readonly repositoryMigrations: GraphQLRepositoryMigrationConnection;
  /** When true the organization requires all members, billing managers, and outside collaborators to enable two-factor authentication. */
  readonly requiresTwoFactorAuthentication: Maybe<Scalars['Boolean']>;
  /** The HTTP path for this organization. */
  readonly resourcePath: Scalars['URI'];
  /** The Organization's SAML identity providers */
  readonly samlIdentityProvider: Maybe<GraphQLOrganizationIdentityProvider>;
  /** List of users and organizations this entity is sponsoring. */
  readonly sponsoring: GraphQLSponsorConnection;
  /** List of sponsors for this user or organization. */
  readonly sponsors: GraphQLSponsorConnection;
  /** Events involving this sponsorable, such as new sponsorships. */
  readonly sponsorsActivities: GraphQLSponsorsActivityConnection;
  /** The GitHub Sponsors listing for this user or organization. */
  readonly sponsorsListing: Maybe<GraphQLSponsorsListing>;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
  readonly sponsorshipForViewerAsSponsor: Maybe<GraphQLSponsorship>;
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */
  readonly sponsorshipForViewerAsSponsorable: Maybe<GraphQLSponsorship>;
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  readonly sponsorshipNewsletters: GraphQLSponsorshipNewsletterConnection;
  /** This object's sponsorships as the maintainer. */
  readonly sponsorshipsAsMaintainer: GraphQLSponsorshipConnection;
  /** This object's sponsorships as the sponsor. */
  readonly sponsorshipsAsSponsor: GraphQLSponsorshipConnection;
  /** Find an organization's team by its slug. */
  readonly team: Maybe<GraphQLTeam>;
  /** A list of teams in this organization. */
  readonly teams: GraphQLTeamConnection;
  /** The HTTP path listing organization's teams */
  readonly teamsResourcePath: Scalars['URI'];
  /** The HTTP URL listing organization's teams */
  readonly teamsUrl: Scalars['URI'];
  /** The organization's Twitter username. */
  readonly twitterUsername: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this organization. */
  readonly url: Scalars['URI'];
  /** Organization is adminable by the viewer. */
  readonly viewerCanAdminister: Scalars['Boolean'];
  /** Can the viewer pin repositories and gists to the profile? */
  readonly viewerCanChangePinnedItems: Scalars['Boolean'];
  /** Can the current viewer create new projects on this owner. */
  readonly viewerCanCreateProjects: Scalars['Boolean'];
  /** Viewer can create repositories on this organization */
  readonly viewerCanCreateRepositories: Scalars['Boolean'];
  /** Viewer can create teams on this organization. */
  readonly viewerCanCreateTeams: Scalars['Boolean'];
  /** Whether or not the viewer is able to sponsor this user/organization. */
  readonly viewerCanSponsor: Scalars['Boolean'];
  /** Viewer is an active member of this organization. */
  readonly viewerIsAMember: Scalars['Boolean'];
  /** True if the viewer is sponsoring this user/organization. */
  readonly viewerIsSponsoring: Scalars['Boolean'];
  /** The organization's public profile URL. */
  readonly websiteUrl: Maybe<Scalars['URI']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationAnyPinnableItemsArgs = {
  type: Maybe<GraphQLPinnableItemType>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationAuditLogArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
  orderBy?: Maybe<GraphQLAuditLogOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationAvatarUrlArgs = {
  size: Maybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationDomainsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  isVerified?: Maybe<Scalars['Boolean']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<GraphQLVerifiableDomainOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationEnterpriseOwnersArgs = {
  query: Maybe<Scalars['String']>;
  organizationRole: Maybe<GraphQLRoleInOrganization>;
  orderBy?: Maybe<GraphQLOrgEnterpriseOwnerOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationIpAllowListEntriesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLIpAllowListEntryOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationIsSponsoredByArgs = {
  accountLogin: Scalars['String'];
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationMemberStatusesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLUserStatusOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationMembersWithRoleArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationPackagesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  names: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  repositoryId: Maybe<Scalars['ID']>;
  packageType: Maybe<GraphQLPackageType>;
  orderBy?: Maybe<GraphQLPackageOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationPendingMembersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationPinnableItemsArgs = {
  types: Maybe<ReadonlyArray<GraphQLPinnableItemType>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationPinnedItemsArgs = {
  types: Maybe<ReadonlyArray<GraphQLPinnableItemType>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationProjectArgs = {
  number: Scalars['Int'];
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationProjectNextArgs = {
  number: Scalars['Int'];
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationProjectsArgs = {
  orderBy: Maybe<GraphQLProjectOrder>;
  search: Maybe<Scalars['String']>;
  states: Maybe<ReadonlyArray<GraphQLProjectState>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationProjectsNextArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
  sortBy?: Maybe<GraphQLProjectNextOrderField>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationRepositoriesArgs = {
  privacy: Maybe<GraphQLRepositoryPrivacy>;
  orderBy: Maybe<GraphQLRepositoryOrder>;
  affiliations: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  ownerAffiliations?: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  isLocked: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  isFork: Maybe<Scalars['Boolean']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationRepositoryArgs = {
  name: Scalars['String'];
  followRenames?: Maybe<Scalars['Boolean']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationRepositoryDiscussionCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  repositoryId: Maybe<Scalars['ID']>;
  onlyAnswers?: Maybe<Scalars['Boolean']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationRepositoryDiscussionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLDiscussionOrder>;
  repositoryId: Maybe<Scalars['ID']>;
  answered?: Maybe<Scalars['Boolean']>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationRepositoryMigrationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  state: Maybe<GraphQLMigrationState>;
  orderBy?: Maybe<GraphQLRepositoryMigrationOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationSponsoringArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLSponsorOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationSponsorsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  tierId: Maybe<Scalars['ID']>;
  orderBy?: Maybe<GraphQLSponsorOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationSponsorsActivitiesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  period?: Maybe<GraphQLSponsorsActivityPeriod>;
  orderBy?: Maybe<GraphQLSponsorsActivityOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationSponsorshipNewslettersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLSponsorshipNewsletterOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationSponsorshipsAsMaintainerArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  includePrivate?: Maybe<Scalars['Boolean']>;
  orderBy: Maybe<GraphQLSponsorshipOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationSponsorshipsAsSponsorArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLSponsorshipOrder>;
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationTeamArgs = {
  slug: Scalars['String'];
};


/** An account on GitHub, with one or more owners, that has repositories, members and teams. */
export type GraphQLOrganizationTeamsArgs = {
  privacy: Maybe<GraphQLTeamPrivacy>;
  role: Maybe<GraphQLTeamRole>;
  query: Maybe<Scalars['String']>;
  userLogins: Maybe<ReadonlyArray<Scalars['String']>>;
  orderBy: Maybe<GraphQLTeamOrder>;
  ldapMapped: Maybe<Scalars['Boolean']>;
  rootTeamsOnly?: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** An audit entry in an organization audit log. */
export type GraphQLOrganizationAuditEntry = GraphQLMembersCanDeleteReposClearAuditEntry | GraphQLMembersCanDeleteReposDisableAuditEntry | GraphQLMembersCanDeleteReposEnableAuditEntry | GraphQLOauthApplicationCreateAuditEntry | GraphQLOrgAddBillingManagerAuditEntry | GraphQLOrgAddMemberAuditEntry | GraphQLOrgBlockUserAuditEntry | GraphQLOrgConfigDisableCollaboratorsOnlyAuditEntry | GraphQLOrgConfigEnableCollaboratorsOnlyAuditEntry | GraphQLOrgCreateAuditEntry | GraphQLOrgDisableOauthAppRestrictionsAuditEntry | GraphQLOrgDisableSamlAuditEntry | GraphQLOrgDisableTwoFactorRequirementAuditEntry | GraphQLOrgEnableOauthAppRestrictionsAuditEntry | GraphQLOrgEnableSamlAuditEntry | GraphQLOrgEnableTwoFactorRequirementAuditEntry | GraphQLOrgInviteMemberAuditEntry | GraphQLOrgInviteToBusinessAuditEntry | GraphQLOrgOauthAppAccessApprovedAuditEntry | GraphQLOrgOauthAppAccessDeniedAuditEntry | GraphQLOrgOauthAppAccessRequestedAuditEntry | GraphQLOrgRemoveBillingManagerAuditEntry | GraphQLOrgRemoveMemberAuditEntry | GraphQLOrgRemoveOutsideCollaboratorAuditEntry | GraphQLOrgRestoreMemberAuditEntry | GraphQLOrgUnblockUserAuditEntry | GraphQLOrgUpdateDefaultRepositoryPermissionAuditEntry | GraphQLOrgUpdateMemberAuditEntry | GraphQLOrgUpdateMemberRepositoryCreationPermissionAuditEntry | GraphQLOrgUpdateMemberRepositoryInvitationPermissionAuditEntry | GraphQLPrivateRepositoryForkingDisableAuditEntry | GraphQLPrivateRepositoryForkingEnableAuditEntry | GraphQLRepoAccessAuditEntry | GraphQLRepoAddMemberAuditEntry | GraphQLRepoAddTopicAuditEntry | GraphQLRepoArchivedAuditEntry | GraphQLRepoChangeMergeSettingAuditEntry | GraphQLRepoConfigDisableAnonymousGitAccessAuditEntry | GraphQLRepoConfigDisableCollaboratorsOnlyAuditEntry | GraphQLRepoConfigDisableContributorsOnlyAuditEntry | GraphQLRepoConfigDisableSockpuppetDisallowedAuditEntry | GraphQLRepoConfigEnableAnonymousGitAccessAuditEntry | GraphQLRepoConfigEnableCollaboratorsOnlyAuditEntry | GraphQLRepoConfigEnableContributorsOnlyAuditEntry | GraphQLRepoConfigEnableSockpuppetDisallowedAuditEntry | GraphQLRepoConfigLockAnonymousGitAccessAuditEntry | GraphQLRepoConfigUnlockAnonymousGitAccessAuditEntry | GraphQLRepoCreateAuditEntry | GraphQLRepoDestroyAuditEntry | GraphQLRepoRemoveMemberAuditEntry | GraphQLRepoRemoveTopicAuditEntry | GraphQLRepositoryVisibilityChangeDisableAuditEntry | GraphQLRepositoryVisibilityChangeEnableAuditEntry | GraphQLTeamAddMemberAuditEntry | GraphQLTeamAddRepositoryAuditEntry | GraphQLTeamChangeParentTeamAuditEntry | GraphQLTeamRemoveMemberAuditEntry | GraphQLTeamRemoveRepositoryAuditEntry;

/** The connection type for OrganizationAuditEntry. */
export type GraphQLOrganizationAuditEntryConnection = {
  readonly __typename?: 'OrganizationAuditEntryConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLOrganizationAuditEntryEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLOrganizationAuditEntry>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Metadata for an audit entry with action org.* */
export type GraphQLOrganizationAuditEntryData = {
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
};

/** An edge in a connection. */
export type GraphQLOrganizationAuditEntryEdge = {
  readonly __typename?: 'OrganizationAuditEntryEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLOrganizationAuditEntry>;
};

/** A list of organizations managed by an enterprise. */
export type GraphQLOrganizationConnection = {
  readonly __typename?: 'OrganizationConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLOrganizationEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLOrganization>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLOrganizationEdge = {
  readonly __typename?: 'OrganizationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLOrganization>;
};

/** The connection type for User. */
export type GraphQLOrganizationEnterpriseOwnerConnection = {
  readonly __typename?: 'OrganizationEnterpriseOwnerConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLOrganizationEnterpriseOwnerEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An enterprise owner in the context of an organization that is part of the enterprise. */
export type GraphQLOrganizationEnterpriseOwnerEdge = {
  readonly __typename?: 'OrganizationEnterpriseOwnerEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLUser>;
  /** The role of the owner with respect to the organization. */
  readonly organizationRole: GraphQLRoleInOrganization;
};

/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export type GraphQLOrganizationIdentityProvider = GraphQLNode & {
  readonly __typename?: 'OrganizationIdentityProvider';
  /** The digest algorithm used to sign SAML requests for the Identity Provider. */
  readonly digestMethod: Maybe<Scalars['URI']>;
  /** External Identities provisioned by this Identity Provider */
  readonly externalIdentities: GraphQLExternalIdentityConnection;
  readonly id: Scalars['ID'];
  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */
  readonly idpCertificate: Maybe<Scalars['X509Certificate']>;
  /** The Issuer Entity ID for the SAML Identity Provider */
  readonly issuer: Maybe<Scalars['String']>;
  /** Organization this Identity Provider belongs to */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The signature algorithm used to sign SAML requests for the Identity Provider. */
  readonly signatureMethod: Maybe<Scalars['URI']>;
  /** The URL endpoint for the Identity Provider's SAML SSO. */
  readonly ssoUrl: Maybe<Scalars['URI']>;
};


/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */
export type GraphQLOrganizationIdentityProviderExternalIdentitiesArgs = {
  membersOnly: Maybe<Scalars['Boolean']>;
  login: Maybe<Scalars['String']>;
  userName: Maybe<Scalars['String']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** An Invitation for a user to an organization. */
export type GraphQLOrganizationInvitation = GraphQLNode & {
  readonly __typename?: 'OrganizationInvitation';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The email address of the user invited to the organization. */
  readonly email: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The type of invitation that was sent (e.g. email, user). */
  readonly invitationType: GraphQLOrganizationInvitationType;
  /** The user who was invited to the organization. */
  readonly invitee: Maybe<GraphQLUser>;
  /** The user who created the invitation. */
  readonly inviter: GraphQLUser;
  /** The organization the invite is for */
  readonly organization: GraphQLOrganization;
  /** The user's pending role in the organization (e.g. member, owner). */
  readonly role: GraphQLOrganizationInvitationRole;
};

/** The connection type for OrganizationInvitation. */
export type GraphQLOrganizationInvitationConnection = {
  readonly __typename?: 'OrganizationInvitationConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLOrganizationInvitationEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLOrganizationInvitation>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLOrganizationInvitationEdge = {
  readonly __typename?: 'OrganizationInvitationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLOrganizationInvitation>;
};

/** The possible organization invitation roles. */
export enum GraphQLOrganizationInvitationRole {
  /** The user is invited to be a direct member of the organization. */
  DIRECT_MEMBER = 'DIRECT_MEMBER',
  /** The user is invited to be an admin of the organization. */
  ADMIN = 'ADMIN',
  /** The user is invited to be a billing manager of the organization. */
  BILLING_MANAGER = 'BILLING_MANAGER',
  /** The user's previous role will be reinstated. */
  REINSTATE = 'REINSTATE'
}

/** The possible organization invitation types. */
export enum GraphQLOrganizationInvitationType {
  /** The invitation was to an existing user. */
  USER = 'USER',
  /** The invitation was to an email address. */
  EMAIL = 'EMAIL'
}

/** The connection type for User. */
export type GraphQLOrganizationMemberConnection = {
  readonly __typename?: 'OrganizationMemberConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLOrganizationMemberEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents a user within an organization. */
export type GraphQLOrganizationMemberEdge = {
  readonly __typename?: 'OrganizationMemberEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */
  readonly hasTwoFactorEnabled: Maybe<Scalars['Boolean']>;
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLUser>;
  /** The role this user has in the organization. */
  readonly role: Maybe<GraphQLOrganizationMemberRole>;
};

/** The possible roles within an organization for its members. */
export enum GraphQLOrganizationMemberRole {
  /** The user is a member of the organization. */
  MEMBER = 'MEMBER',
  /** The user is an administrator of the organization. */
  ADMIN = 'ADMIN'
}

/** The possible values for the members can create repositories setting on an organization. */
export enum GraphQLOrganizationMembersCanCreateRepositoriesSettingValue {
  /** Members will be able to create public and private repositories. */
  ALL = 'ALL',
  /** Members will be able to create only private repositories. */
  PRIVATE = 'PRIVATE',
  /** Members will be able to create only internal repositories. */
  INTERNAL = 'INTERNAL',
  /** Members will not be able to create public or private repositories. */
  DISABLED = 'DISABLED'
}

/** Ordering options for organization connections. */
export type GraphQLOrganizationOrder = {
  /** The field to order organizations by. */
  readonly field: GraphQLOrganizationOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which organization connections can be ordered. */
export enum GraphQLOrganizationOrderField {
  /** Order organizations by creation time */
  CREATED_AT = 'CREATED_AT',
  /** Order organizations by login */
  LOGIN = 'LOGIN'
}

/** An organization teams hovercard context */
export type GraphQLOrganizationTeamsHovercardContext = GraphQLHovercardContext & {
  readonly __typename?: 'OrganizationTeamsHovercardContext';
  /** A string describing this context */
  readonly message: Scalars['String'];
  /** An octicon to accompany this context */
  readonly octicon: Scalars['String'];
  /** Teams in this organization the user is a member of that are relevant */
  readonly relevantTeams: GraphQLTeamConnection;
  /** The path for the full team list for this user */
  readonly teamsResourcePath: Scalars['URI'];
  /** The URL for the full team list for this user */
  readonly teamsUrl: Scalars['URI'];
  /** The total number of teams the user is on in the organization */
  readonly totalTeamCount: Scalars['Int'];
};


/** An organization teams hovercard context */
export type GraphQLOrganizationTeamsHovercardContextRelevantTeamsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** An organization list hovercard context */
export type GraphQLOrganizationsHovercardContext = GraphQLHovercardContext & {
  readonly __typename?: 'OrganizationsHovercardContext';
  /** A string describing this context */
  readonly message: Scalars['String'];
  /** An octicon to accompany this context */
  readonly octicon: Scalars['String'];
  /** Organizations this user is a member of that are relevant */
  readonly relevantOrganizations: GraphQLOrganizationConnection;
  /** The total number of organizations this user is in */
  readonly totalOrganizationCount: Scalars['Int'];
};


/** An organization list hovercard context */
export type GraphQLOrganizationsHovercardContextRelevantOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Information for an uploaded package. */
export type GraphQLPackage = GraphQLNode & {
  readonly __typename?: 'Package';
  readonly id: Scalars['ID'];
  /** Find the latest version for the package. */
  readonly latestVersion: Maybe<GraphQLPackageVersion>;
  /** Identifies the name of the package. */
  readonly name: Scalars['String'];
  /** Identifies the type of the package. */
  readonly packageType: GraphQLPackageType;
  /** The repository this package belongs to. */
  readonly repository: Maybe<GraphQLRepository>;
  /** Statistics about package activity. */
  readonly statistics: Maybe<GraphQLPackageStatistics>;
  /** Find package version by version string. */
  readonly version: Maybe<GraphQLPackageVersion>;
  /** list of versions for this package */
  readonly versions: GraphQLPackageVersionConnection;
};


/** Information for an uploaded package. */
export type GraphQLPackageVersionArgs = {
  version: Scalars['String'];
};


/** Information for an uploaded package. */
export type GraphQLPackageVersionsArgs = {
  orderBy?: Maybe<GraphQLPackageVersionOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for Package. */
export type GraphQLPackageConnection = {
  readonly __typename?: 'PackageConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPackageEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPackage>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPackageEdge = {
  readonly __typename?: 'PackageEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPackage>;
};

/** A file in a package version. */
export type GraphQLPackageFile = GraphQLNode & {
  readonly __typename?: 'PackageFile';
  readonly id: Scalars['ID'];
  /** MD5 hash of the file. */
  readonly md5: Maybe<Scalars['String']>;
  /** Name of the file. */
  readonly name: Scalars['String'];
  /** The package version this file belongs to. */
  readonly packageVersion: Maybe<GraphQLPackageVersion>;
  /** SHA1 hash of the file. */
  readonly sha1: Maybe<Scalars['String']>;
  /** SHA256 hash of the file. */
  readonly sha256: Maybe<Scalars['String']>;
  /** Size of the file in bytes. */
  readonly size: Maybe<Scalars['Int']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** URL to download the asset. */
  readonly url: Maybe<Scalars['URI']>;
};

/** The connection type for PackageFile. */
export type GraphQLPackageFileConnection = {
  readonly __typename?: 'PackageFileConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPackageFileEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPackageFile>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPackageFileEdge = {
  readonly __typename?: 'PackageFileEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPackageFile>;
};

/** Ways in which lists of package files can be ordered upon return. */
export type GraphQLPackageFileOrder = {
  /** The field in which to order package files by. */
  readonly field: Maybe<GraphQLPackageFileOrderField>;
  /** The direction in which to order package files by the specified field. */
  readonly direction: Maybe<GraphQLOrderDirection>;
};

/** Properties by which package file connections can be ordered. */
export enum GraphQLPackageFileOrderField {
  /** Order package files by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** Ways in which lists of packages can be ordered upon return. */
export type GraphQLPackageOrder = {
  /** The field in which to order packages by. */
  readonly field: Maybe<GraphQLPackageOrderField>;
  /** The direction in which to order packages by the specified field. */
  readonly direction: Maybe<GraphQLOrderDirection>;
};

/** Properties by which package connections can be ordered. */
export enum GraphQLPackageOrderField {
  /** Order packages by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** Represents an owner of a package. */
export type GraphQLPackageOwner = {
  readonly id: Scalars['ID'];
  /** A list of packages under the owner. */
  readonly packages: GraphQLPackageConnection;
};


/** Represents an owner of a package. */
export type GraphQLPackageOwnerPackagesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  names: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  repositoryId: Maybe<Scalars['ID']>;
  packageType: Maybe<GraphQLPackageType>;
  orderBy?: Maybe<GraphQLPackageOrder>;
};

/** Represents a object that contains package activity statistics such as downloads. */
export type GraphQLPackageStatistics = {
  readonly __typename?: 'PackageStatistics';
  /** Number of times the package was downloaded since it was created. */
  readonly downloadsTotalCount: Scalars['Int'];
};

/** A version tag contains the mapping between a tag name and a version. */
export type GraphQLPackageTag = GraphQLNode & {
  readonly __typename?: 'PackageTag';
  readonly id: Scalars['ID'];
  /** Identifies the tag name of the version. */
  readonly name: Scalars['String'];
  /** Version that the tag is associated with. */
  readonly version: Maybe<GraphQLPackageVersion>;
};

/** The possible types of a package. */
export enum GraphQLPackageType {
  /** An npm package. */
  NPM = 'NPM',
  /** A rubygems package. */
  RUBYGEMS = 'RUBYGEMS',
  /** A maven package. */
  MAVEN = 'MAVEN',
  /** A docker image. */
  DOCKER = 'DOCKER',
  /** A debian package. */
  DEBIAN = 'DEBIAN',
  /** A nuget package. */
  NUGET = 'NUGET',
  /** A python package. */
  PYPI = 'PYPI'
}

/** Information about a specific package version. */
export type GraphQLPackageVersion = GraphQLNode & {
  readonly __typename?: 'PackageVersion';
  /** List of files associated with this package version */
  readonly files: GraphQLPackageFileConnection;
  readonly id: Scalars['ID'];
  /** The package associated with this version. */
  readonly package: Maybe<GraphQLPackage>;
  /** The platform this version was built for. */
  readonly platform: Maybe<Scalars['String']>;
  /** Whether or not this version is a pre-release. */
  readonly preRelease: Scalars['Boolean'];
  /** The README of this package version. */
  readonly readme: Maybe<Scalars['String']>;
  /** The release associated with this package version. */
  readonly release: Maybe<GraphQLRelease>;
  /** Statistics about package activity. */
  readonly statistics: Maybe<GraphQLPackageVersionStatistics>;
  /** The package version summary. */
  readonly summary: Maybe<Scalars['String']>;
  /** The version string. */
  readonly version: Scalars['String'];
};


/** Information about a specific package version. */
export type GraphQLPackageVersionFilesArgs = {
  orderBy?: Maybe<GraphQLPackageFileOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for PackageVersion. */
export type GraphQLPackageVersionConnection = {
  readonly __typename?: 'PackageVersionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPackageVersionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPackageVersion>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPackageVersionEdge = {
  readonly __typename?: 'PackageVersionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPackageVersion>;
};

/** Ways in which lists of package versions can be ordered upon return. */
export type GraphQLPackageVersionOrder = {
  /** The field in which to order package versions by. */
  readonly field: Maybe<GraphQLPackageVersionOrderField>;
  /** The direction in which to order package versions by the specified field. */
  readonly direction: Maybe<GraphQLOrderDirection>;
};

/** Properties by which package version connections can be ordered. */
export enum GraphQLPackageVersionOrderField {
  /** Order package versions by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** Represents a object that contains package version activity statistics such as downloads. */
export type GraphQLPackageVersionStatistics = {
  readonly __typename?: 'PackageVersionStatistics';
  /** Number of times the package was downloaded since it was created. */
  readonly downloadsTotalCount: Scalars['Int'];
};

/** Information about pagination in a connection. */
export type GraphQLPageInfo = {
  readonly __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  readonly endCursor: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  readonly hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  readonly hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  readonly startCursor: Maybe<Scalars['String']>;
};

/** Types that can grant permissions on a repository to a user */
export type GraphQLPermissionGranter = GraphQLOrganization | GraphQLRepository | GraphQLTeam;

/** A level of permission and source for a user's access to a repository. */
export type GraphQLPermissionSource = {
  readonly __typename?: 'PermissionSource';
  /** The organization the repository belongs to. */
  readonly organization: GraphQLOrganization;
  /** The level of access this source has granted to the user. */
  readonly permission: GraphQLDefaultRepositoryPermissionField;
  /** The source of this permission. */
  readonly source: GraphQLPermissionGranter;
};

/** Autogenerated input type of PinIssue */
export type GraphQLPinIssueInput = {
  /** The ID of the issue to be pinned */
  readonly issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of PinIssue */
export type GraphQLPinIssuePayload = {
  readonly __typename?: 'PinIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The issue that was pinned */
  readonly issue: Maybe<GraphQLIssue>;
};

/** Types that can be pinned to a profile page. */
export type GraphQLPinnableItem = GraphQLGist | GraphQLRepository;

/** The connection type for PinnableItem. */
export type GraphQLPinnableItemConnection = {
  readonly __typename?: 'PinnableItemConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPinnableItemEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPinnableItem>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPinnableItemEdge = {
  readonly __typename?: 'PinnableItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPinnableItem>;
};

/** Represents items that can be pinned to a profile page or dashboard. */
export enum GraphQLPinnableItemType {
  /** A repository. */
  REPOSITORY = 'REPOSITORY',
  /** A gist. */
  GIST = 'GIST',
  /** An issue. */
  ISSUE = 'ISSUE',
  /** A project. */
  PROJECT = 'PROJECT',
  /** A pull request. */
  PULL_REQUEST = 'PULL_REQUEST',
  /** A user. */
  USER = 'USER',
  /** An organization. */
  ORGANIZATION = 'ORGANIZATION',
  /** A team. */
  TEAM = 'TEAM'
}

/** A Pinned Discussion is a discussion pinned to a repository's index page. */
export type GraphQLPinnedDiscussion = GraphQLNode & GraphQLRepositoryNode & {
  readonly __typename?: 'PinnedDiscussion';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The discussion that was pinned. */
  readonly discussion: GraphQLDiscussion;
  /** Color stops of the chosen gradient */
  readonly gradientStopColors: ReadonlyArray<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** Background texture pattern */
  readonly pattern: GraphQLPinnedDiscussionPattern;
  /** The actor that pinned this discussion. */
  readonly pinnedBy: GraphQLActor;
  /** Preconfigured background gradient option */
  readonly preconfiguredGradient: Maybe<GraphQLPinnedDiscussionGradient>;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** The connection type for PinnedDiscussion. */
export type GraphQLPinnedDiscussionConnection = {
  readonly __typename?: 'PinnedDiscussionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPinnedDiscussionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPinnedDiscussion>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPinnedDiscussionEdge = {
  readonly __typename?: 'PinnedDiscussionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPinnedDiscussion>;
};

/** Preconfigured gradients that may be used to style discussions pinned within a repository. */
export enum GraphQLPinnedDiscussionGradient {
  /** A gradient of red to orange */
  RED_ORANGE = 'RED_ORANGE',
  /** A gradient of blue to mint */
  BLUE_MINT = 'BLUE_MINT',
  /** A gradient of blue to purple */
  BLUE_PURPLE = 'BLUE_PURPLE',
  /** A gradient of pink to blue */
  PINK_BLUE = 'PINK_BLUE',
  /** A gradient of purple to coral */
  PURPLE_CORAL = 'PURPLE_CORAL'
}

/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */
export enum GraphQLPinnedDiscussionPattern {
  /** A solid dot pattern */
  DOT_FILL = 'DOT_FILL',
  /** A plus sign pattern */
  PLUS = 'PLUS',
  /** A lightning bolt pattern */
  ZAP = 'ZAP',
  /** An upward-facing chevron pattern */
  CHEVRON_UP = 'CHEVRON_UP',
  /** A hollow dot pattern */
  DOT = 'DOT',
  /** A heart pattern */
  HEART_FILL = 'HEART_FILL'
}

/** Represents a 'pinned' event on a given issue or pull request. */
export type GraphQLPinnedEvent = GraphQLNode & {
  readonly __typename?: 'PinnedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Identifies the issue associated with the event. */
  readonly issue: GraphQLIssue;
};

/** A Pinned Issue is a issue pinned to a repository's index page. */
export type GraphQLPinnedIssue = GraphQLNode & {
  readonly __typename?: 'PinnedIssue';
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The issue that was pinned. */
  readonly issue: GraphQLIssue;
  /** The actor that pinned this issue. */
  readonly pinnedBy: GraphQLActor;
  /** The repository that this issue was pinned to. */
  readonly repository: GraphQLRepository;
};

/** The connection type for PinnedIssue. */
export type GraphQLPinnedIssueConnection = {
  readonly __typename?: 'PinnedIssueConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPinnedIssueEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPinnedIssue>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPinnedIssueEdge = {
  readonly __typename?: 'PinnedIssueEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPinnedIssue>;
};


/** Audit log entry for a private_repository_forking.disable event. */
export type GraphQLPrivateRepositoryForkingDisableAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLEnterpriseAuditEntryData & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'PrivateRepositoryForkingDisableAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  readonly enterpriseResourcePath: Maybe<Scalars['URI']>;
  /** The slug of the enterprise. */
  readonly enterpriseSlug: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  readonly enterpriseUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a private_repository_forking.enable event. */
export type GraphQLPrivateRepositoryForkingEnableAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLEnterpriseAuditEntryData & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'PrivateRepositoryForkingEnableAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  readonly enterpriseResourcePath: Maybe<Scalars['URI']>;
  /** The slug of the enterprise. */
  readonly enterpriseSlug: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  readonly enterpriseUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */
export type GraphQLProfileItemShowcase = {
  readonly __typename?: 'ProfileItemShowcase';
  /** Whether or not the owner has pinned any repositories or gists. */
  readonly hasPinnedItems: Scalars['Boolean'];
  /** The repositories and gists in the showcase. If the profile owner has any pinned items, those will be returned. Otherwise, the profile owner's popular repositories will be returned. */
  readonly items: GraphQLPinnableItemConnection;
};


/** A curatable list of repositories relating to a repository owner, which defaults to showing the most popular repositories they own. */
export type GraphQLProfileItemShowcaseItemsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Represents any entity on GitHub that has a profile page. */
export type GraphQLProfileOwner = {
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  readonly anyPinnableItems: Scalars['Boolean'];
  /** The public profile email. */
  readonly email: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  readonly itemShowcase: GraphQLProfileItemShowcase;
  /** The public profile location. */
  readonly location: Maybe<Scalars['String']>;
  /** The username used to login. */
  readonly login: Scalars['String'];
  /** The public profile name. */
  readonly name: Maybe<Scalars['String']>;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  readonly pinnableItems: GraphQLPinnableItemConnection;
  /** A list of repositories and gists this profile owner has pinned to their profile */
  readonly pinnedItems: GraphQLPinnableItemConnection;
  /** Returns how many more items this profile owner can pin to their profile. */
  readonly pinnedItemsRemaining: Scalars['Int'];
  /** Can the viewer pin repositories and gists to the profile? */
  readonly viewerCanChangePinnedItems: Scalars['Boolean'];
  /** The public profile website URL. */
  readonly websiteUrl: Maybe<Scalars['URI']>;
};


/** Represents any entity on GitHub that has a profile page. */
export type GraphQLProfileOwnerAnyPinnableItemsArgs = {
  type: Maybe<GraphQLPinnableItemType>;
};


/** Represents any entity on GitHub that has a profile page. */
export type GraphQLProfileOwnerPinnableItemsArgs = {
  types: Maybe<ReadonlyArray<GraphQLPinnableItemType>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Represents any entity on GitHub that has a profile page. */
export type GraphQLProfileOwnerPinnedItemsArgs = {
  types: Maybe<ReadonlyArray<GraphQLPinnableItemType>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Projects manage issues, pull requests and notes within a project owner. */
export type GraphQLProject = GraphQLNode & GraphQLClosable & GraphQLUpdatable & {
  readonly __typename?: 'Project';
  /** The project's description body. */
  readonly body: Maybe<Scalars['String']>;
  /** The projects description body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** `true` if the object is closed (definition of closed may depend on type) */
  readonly closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  readonly closedAt: Maybe<Scalars['DateTime']>;
  /** List of columns in the project */
  readonly columns: GraphQLProjectColumnConnection;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The actor who originally created the project. */
  readonly creator: Maybe<GraphQLActor>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The project's name. */
  readonly name: Scalars['String'];
  /** The project's number. */
  readonly number: Scalars['Int'];
  /** The project's owner. Currently limited to repositories, organizations, and users. */
  readonly owner: GraphQLProjectOwner;
  /** List of pending cards in this project */
  readonly pendingCards: GraphQLProjectCardConnection;
  /** Project progress details. */
  readonly progress: GraphQLProjectProgress;
  /** The HTTP path for this project */
  readonly resourcePath: Scalars['URI'];
  /** Whether the project is open or closed. */
  readonly state: GraphQLProjectState;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this project */
  readonly url: Scalars['URI'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
};


/** Projects manage issues, pull requests and notes within a project owner. */
export type GraphQLProjectColumnsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Projects manage issues, pull requests and notes within a project owner. */
export type GraphQLProjectPendingCardsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  archivedStates?: Maybe<ReadonlyArray<Maybe<GraphQLProjectCardArchivedState>>>;
};

/** A card in a project. */
export type GraphQLProjectCard = GraphQLNode & {
  readonly __typename?: 'ProjectCard';
  /**
   * The project column this card is associated under. A card may only belong to one
   * project column at a time. The column field will be null if the card is created
   * in a pending state and has yet to be associated with a column. Once cards are
   * associated with a column, they will not become pending in the future.
   */
  readonly column: Maybe<GraphQLProjectColumn>;
  /** The card content item */
  readonly content: Maybe<GraphQLProjectCardItem>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The actor who created this card */
  readonly creator: Maybe<GraphQLActor>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** Whether the card is archived */
  readonly isArchived: Scalars['Boolean'];
  /** The card note */
  readonly note: Maybe<Scalars['String']>;
  /** The project that contains this card. */
  readonly project: GraphQLProject;
  /** The HTTP path for this card */
  readonly resourcePath: Scalars['URI'];
  /** The state of ProjectCard */
  readonly state: Maybe<GraphQLProjectCardState>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this card */
  readonly url: Scalars['URI'];
};

/** The possible archived states of a project card. */
export enum GraphQLProjectCardArchivedState {
  /** A project card that is archived */
  ARCHIVED = 'ARCHIVED',
  /** A project card that is not archived */
  NOT_ARCHIVED = 'NOT_ARCHIVED'
}

/** The connection type for ProjectCard. */
export type GraphQLProjectCardConnection = {
  readonly __typename?: 'ProjectCardConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLProjectCardEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLProjectCard>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLProjectCardEdge = {
  readonly __typename?: 'ProjectCardEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLProjectCard>;
};

/** Types that can be inside Project Cards. */
export type GraphQLProjectCardItem = GraphQLIssue | GraphQLPullRequest;

/** Various content states of a ProjectCard */
export enum GraphQLProjectCardState {
  /** The card has content only. */
  CONTENT_ONLY = 'CONTENT_ONLY',
  /** The card has a note only. */
  NOTE_ONLY = 'NOTE_ONLY',
  /** The card is redacted. */
  REDACTED = 'REDACTED'
}

/** A column inside a project. */
export type GraphQLProjectColumn = GraphQLNode & {
  readonly __typename?: 'ProjectColumn';
  /** List of cards in the column */
  readonly cards: GraphQLProjectCardConnection;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The project column's name. */
  readonly name: Scalars['String'];
  /** The project that contains this column. */
  readonly project: GraphQLProject;
  /** The semantic purpose of the column */
  readonly purpose: Maybe<GraphQLProjectColumnPurpose>;
  /** The HTTP path for this project column */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this project column */
  readonly url: Scalars['URI'];
};


/** A column inside a project. */
export type GraphQLProjectColumnCardsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  archivedStates?: Maybe<ReadonlyArray<Maybe<GraphQLProjectCardArchivedState>>>;
};

/** The connection type for ProjectColumn. */
export type GraphQLProjectColumnConnection = {
  readonly __typename?: 'ProjectColumnConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLProjectColumnEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLProjectColumn>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLProjectColumnEdge = {
  readonly __typename?: 'ProjectColumnEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLProjectColumn>;
};

/** The semantic purpose of the column - todo, in progress, or done. */
export enum GraphQLProjectColumnPurpose {
  /** The column contains cards still to be worked on */
  TODO = 'TODO',
  /** The column contains cards which are currently being worked on */
  IN_PROGRESS = 'IN_PROGRESS',
  /** The column contains cards which are complete */
  DONE = 'DONE'
}

/** A list of projects associated with the owner. */
export type GraphQLProjectConnection = {
  readonly __typename?: 'ProjectConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLProjectEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLProject>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLProjectEdge = {
  readonly __typename?: 'ProjectEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLProject>;
};

/** The type of a project item. */
export enum GraphQLProjectItemType {
  /** Issue */
  ISSUE = 'ISSUE',
  /** Pull Request */
  PULL_REQUEST = 'PULL_REQUEST',
  /** Draft Issue */
  DRAFT_ISSUE = 'DRAFT_ISSUE',
  /** Redacted Item */
  REDACTED = 'REDACTED'
}

/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type GraphQLProjectNext = GraphQLNode & GraphQLClosable & GraphQLUpdatable & {
  readonly __typename?: 'ProjectNext';
  /** Returns true if the project is closed. */
  readonly closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  readonly closedAt: Maybe<Scalars['DateTime']>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The actor who originally created the project. */
  readonly creator: Maybe<GraphQLActor>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The project's description. */
  readonly description: Maybe<Scalars['String']>;
  /** List of fields in the project */
  readonly fields: GraphQLProjectNextFieldConnection;
  readonly id: Scalars['ID'];
  /** List of items in the project */
  readonly items: GraphQLProjectNextItemConnection;
  /** The project's number. */
  readonly number: Scalars['Int'];
  /** The project's owner. Currently limited to organizations and users. */
  readonly owner: GraphQLProjectNextOwner;
  /** Returns true if the project is public. */
  readonly public: Scalars['Boolean'];
  /** The repositories the project is linked to. */
  readonly repositories: GraphQLRepositoryConnection;
  /** The HTTP path for this project */
  readonly resourcePath: Scalars['URI'];
  /** The project's short description. */
  readonly shortDescription: Maybe<Scalars['String']>;
  /** The project's name. */
  readonly title: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this project */
  readonly url: Scalars['URI'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** List of views in the project */
  readonly views: GraphQLProjectViewConnection;
};


/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type GraphQLProjectNextFieldsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type GraphQLProjectNextItemsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type GraphQLProjectNextRepositoriesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** New projects that manage issues, pull requests and drafts using tables and boards. */
export type GraphQLProjectNextViewsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for ProjectNext. */
export type GraphQLProjectNextConnection = {
  readonly __typename?: 'ProjectNextConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLProjectNextEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLProjectNext>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLProjectNextEdge = {
  readonly __typename?: 'ProjectNextEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLProjectNext>;
};

/** A field inside a project. */
export type GraphQLProjectNextField = GraphQLProjectNextFieldCommon & GraphQLNode & {
  readonly __typename?: 'ProjectNextField';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The field's type. */
  readonly dataType: GraphQLProjectNextFieldType;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The project field's name. */
  readonly name: Scalars['String'];
  /** The project that contains this field. */
  readonly project: GraphQLProjectNext;
  /** The field's settings. */
  readonly settings: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** Common fields across different field types */
export type GraphQLProjectNextFieldCommon = {
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The field's type. */
  readonly dataType: GraphQLProjectNextFieldType;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The project field's name. */
  readonly name: Scalars['String'];
  /** The project that contains this field. */
  readonly project: GraphQLProjectNext;
  /** The field's settings. */
  readonly settings: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** The connection type for ProjectNextField. */
export type GraphQLProjectNextFieldConnection = {
  readonly __typename?: 'ProjectNextFieldConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLProjectNextFieldEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLProjectNextField>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLProjectNextFieldEdge = {
  readonly __typename?: 'ProjectNextFieldEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLProjectNextField>;
};

/** The type of a project next field. */
export enum GraphQLProjectNextFieldType {
  /** Assignees */
  ASSIGNEES = 'ASSIGNEES',
  /** Linked Pull Requests */
  LINKED_PULL_REQUESTS = 'LINKED_PULL_REQUESTS',
  /** Reviewers */
  REVIEWERS = 'REVIEWERS',
  /** Labels */
  LABELS = 'LABELS',
  /** Milestone */
  MILESTONE = 'MILESTONE',
  /** Repository */
  REPOSITORY = 'REPOSITORY',
  /** Title */
  TITLE = 'TITLE',
  /** Text */
  TEXT = 'TEXT',
  /** Single Select */
  SINGLE_SELECT = 'SINGLE_SELECT',
  /** Number */
  NUMBER = 'NUMBER',
  /** Date */
  DATE = 'DATE',
  /** Iteration */
  ITERATION = 'ITERATION',
  /** Tracks */
  TRACKS = 'TRACKS'
}

/** An item within a new Project. */
export type GraphQLProjectNextItem = GraphQLNode & {
  readonly __typename?: 'ProjectNextItem';
  /** The content of the referenced draft issue, issue, or pull request */
  readonly content: Maybe<GraphQLProjectNextItemContent>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The actor who created the item. */
  readonly creator: Maybe<GraphQLActor>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** List of field values */
  readonly fieldValues: GraphQLProjectNextItemFieldValueConnection;
  readonly id: Scalars['ID'];
  /** Whether the item is archived. */
  readonly isArchived: Scalars['Boolean'];
  /** The project that contains this item. */
  readonly project: GraphQLProjectNext;
  /** The title of the item */
  readonly title: Maybe<Scalars['String']>;
  /** The type of the item. */
  readonly type: GraphQLProjectItemType;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};


/** An item within a new Project. */
export type GraphQLProjectNextItemFieldValuesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for ProjectNextItem. */
export type GraphQLProjectNextItemConnection = {
  readonly __typename?: 'ProjectNextItemConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLProjectNextItemEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLProjectNextItem>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Types that can be inside Project Items. */
export type GraphQLProjectNextItemContent = GraphQLDraftIssue | GraphQLIssue | GraphQLPullRequest;

/** An edge in a connection. */
export type GraphQLProjectNextItemEdge = {
  readonly __typename?: 'ProjectNextItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLProjectNextItem>;
};

/** An value of a field in an item of a new Project. */
export type GraphQLProjectNextItemFieldValue = GraphQLNode & {
  readonly __typename?: 'ProjectNextItemFieldValue';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The actor who created the item. */
  readonly creator: Maybe<GraphQLActor>;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The project field that contains this value. */
  readonly projectField: GraphQLProjectNextField;
  /** The project item that contains this value. */
  readonly projectItem: GraphQLProjectNextItem;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The value of a field */
  readonly value: Maybe<Scalars['String']>;
};

/** The connection type for ProjectNextItemFieldValue. */
export type GraphQLProjectNextItemFieldValueConnection = {
  readonly __typename?: 'ProjectNextItemFieldValueConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLProjectNextItemFieldValueEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLProjectNextItemFieldValue>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLProjectNextItemFieldValueEdge = {
  readonly __typename?: 'ProjectNextItemFieldValueEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLProjectNextItemFieldValue>;
};

/** Properties by which the return project can be ordered. */
export enum GraphQLProjectNextOrderField {
  /** The project's title */
  TITLE = 'TITLE',
  /** The project's number */
  NUMBER = 'NUMBER',
  /** The project's date and time of update */
  UPDATED_AT = 'UPDATED_AT',
  /** The project's date and time of creation */
  CREATED_AT = 'CREATED_AT'
}

/** Represents an owner of a project (beta). */
export type GraphQLProjectNextOwner = {
  readonly id: Scalars['ID'];
  /** Find a project by project (beta) number. */
  readonly projectNext: Maybe<GraphQLProjectNext>;
  /** A list of projects (beta) under the owner. */
  readonly projectsNext: GraphQLProjectNextConnection;
};


/** Represents an owner of a project (beta). */
export type GraphQLProjectNextOwnerProjectNextArgs = {
  number: Scalars['Int'];
};


/** Represents an owner of a project (beta). */
export type GraphQLProjectNextOwnerProjectsNextArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
  sortBy?: Maybe<GraphQLProjectNextOrderField>;
};

/** Ways in which lists of projects can be ordered upon return. */
export type GraphQLProjectOrder = {
  /** The field in which to order projects by. */
  readonly field: GraphQLProjectOrderField;
  /** The direction in which to order projects by the specified field. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which project connections can be ordered. */
export enum GraphQLProjectOrderField {
  /** Order projects by creation time */
  CREATED_AT = 'CREATED_AT',
  /** Order projects by update time */
  UPDATED_AT = 'UPDATED_AT',
  /** Order projects by name */
  NAME = 'NAME'
}

/** Represents an owner of a Project. */
export type GraphQLProjectOwner = {
  readonly id: Scalars['ID'];
  /** Find project by number. */
  readonly project: Maybe<GraphQLProject>;
  /** A list of projects under the owner. */
  readonly projects: GraphQLProjectConnection;
  /** The HTTP path listing owners projects */
  readonly projectsResourcePath: Scalars['URI'];
  /** The HTTP URL listing owners projects */
  readonly projectsUrl: Scalars['URI'];
  /** Can the current viewer create new projects on this owner. */
  readonly viewerCanCreateProjects: Scalars['Boolean'];
};


/** Represents an owner of a Project. */
export type GraphQLProjectOwnerProjectArgs = {
  number: Scalars['Int'];
};


/** Represents an owner of a Project. */
export type GraphQLProjectOwnerProjectsArgs = {
  orderBy: Maybe<GraphQLProjectOrder>;
  search: Maybe<Scalars['String']>;
  states: Maybe<ReadonlyArray<GraphQLProjectState>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Project progress stats. */
export type GraphQLProjectProgress = {
  readonly __typename?: 'ProjectProgress';
  /** The number of done cards. */
  readonly doneCount: Scalars['Int'];
  /** The percentage of done cards. */
  readonly donePercentage: Scalars['Float'];
  /** Whether progress tracking is enabled and cards with purpose exist for this project */
  readonly enabled: Scalars['Boolean'];
  /** The number of in-progress cards. */
  readonly inProgressCount: Scalars['Int'];
  /** The percentage of in-progress cards. */
  readonly inProgressPercentage: Scalars['Float'];
  /** The number of to do cards. */
  readonly todoCount: Scalars['Int'];
  /** The percentage of to do cards. */
  readonly todoPercentage: Scalars['Float'];
};

/** State of the project; either 'open' or 'closed' */
export enum GraphQLProjectState {
  /** The project is open. */
  OPEN = 'OPEN',
  /** The project is closed. */
  CLOSED = 'CLOSED'
}

/** GitHub-provided templates for Projects */
export enum GraphQLProjectTemplate {
  /** Create a board with columns for To do, In progress and Done. */
  BASIC_KANBAN = 'BASIC_KANBAN',
  /** Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns. */
  AUTOMATED_KANBAN_V2 = 'AUTOMATED_KANBAN_V2',
  /** Create a board with triggers to automatically move cards across columns with review automation. */
  AUTOMATED_REVIEWS_KANBAN = 'AUTOMATED_REVIEWS_KANBAN',
  /** Create a board to triage and prioritize bugs with To do, priority, and Done columns. */
  BUG_TRIAGE = 'BUG_TRIAGE'
}

/** A view within a Project. */
export type GraphQLProjectView = GraphQLNode & {
  readonly __typename?: 'ProjectView';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The project view's filter. */
  readonly filter: Maybe<Scalars['String']>;
  /** The view's group-by field. */
  readonly groupBy: Maybe<ReadonlyArray<Scalars['Int']>>;
  readonly id: Scalars['ID'];
  /** The project view's layout. */
  readonly layout: GraphQLProjectViewLayout;
  /** The project view's name. */
  readonly name: Scalars['String'];
  /** The project view's number. */
  readonly number: Scalars['Int'];
  /** The project that contains this view. */
  readonly project: GraphQLProjectNext;
  /** The view's sort-by config. */
  readonly sortBy: Maybe<ReadonlyArray<GraphQLSortBy>>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The view's vertical-group-by field. */
  readonly verticalGroupBy: Maybe<ReadonlyArray<Scalars['Int']>>;
  /** The view's visible fields. */
  readonly visibleFields: Maybe<ReadonlyArray<Scalars['Int']>>;
};

/** The connection type for ProjectView. */
export type GraphQLProjectViewConnection = {
  readonly __typename?: 'ProjectViewConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLProjectViewEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLProjectView>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLProjectViewEdge = {
  readonly __typename?: 'ProjectViewEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLProjectView>;
};

/** The layout of a project view. */
export enum GraphQLProjectViewLayout {
  /** Board layout */
  BOARD_LAYOUT = 'BOARD_LAYOUT',
  /** Table layout */
  TABLE_LAYOUT = 'TABLE_LAYOUT'
}

/** A user's public key. */
export type GraphQLPublicKey = GraphQLNode & {
  readonly __typename?: 'PublicKey';
  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */
  readonly accessedAt: Maybe<Scalars['DateTime']>;
  /** Identifies the date and time when the key was created. Keys created before March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user. */
  readonly createdAt: Maybe<Scalars['DateTime']>;
  /** The fingerprint for this PublicKey. */
  readonly fingerprint: Scalars['String'];
  readonly id: Scalars['ID'];
  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */
  readonly isReadOnly: Maybe<Scalars['Boolean']>;
  /** The public key string. */
  readonly key: Scalars['String'];
  /** Identifies the date and time when the key was updated. Keys created before March 5th, 2014 may have inaccurate values. Values will be null for keys not owned by the user. */
  readonly updatedAt: Maybe<Scalars['DateTime']>;
};

/** The connection type for PublicKey. */
export type GraphQLPublicKeyConnection = {
  readonly __typename?: 'PublicKeyConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPublicKeyEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPublicKey>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPublicKeyEdge = {
  readonly __typename?: 'PublicKeyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPublicKey>;
};

/** A repository pull request. */
export type GraphQLPullRequest = GraphQLNode & GraphQLAssignable & GraphQLClosable & GraphQLComment & GraphQLUpdatable & GraphQLUpdatableComment & GraphQLLabelable & GraphQLLockable & GraphQLReactable & GraphQLRepositoryNode & GraphQLSubscribable & GraphQLUniformResourceLocatable & GraphQLProjectNextOwner & {
  readonly __typename?: 'PullRequest';
  /** Reason that the conversation was locked. */
  readonly activeLockReason: Maybe<GraphQLLockReason>;
  /** The number of additions in this pull request. */
  readonly additions: Scalars['Int'];
  /** A list of Users assigned to this object. */
  readonly assignees: GraphQLUserConnection;
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the subject of the comment. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** Returns the auto-merge request object if one exists for this pull request. */
  readonly autoMergeRequest: Maybe<GraphQLAutoMergeRequest>;
  /** Identifies the base Ref associated with the pull request. */
  readonly baseRef: Maybe<GraphQLRef>;
  /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */
  readonly baseRefName: Scalars['String'];
  /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */
  readonly baseRefOid: Scalars['GitObjectID'];
  /** The repository associated with this pull request's base Ref. */
  readonly baseRepository: Maybe<GraphQLRepository>;
  /** The body as Markdown. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  readonly bodyText: Scalars['String'];
  /** The number of changed files in this pull request. */
  readonly changedFiles: Scalars['Int'];
  /** The HTTP path for the checks of this pull request. */
  readonly checksResourcePath: Scalars['URI'];
  /** The HTTP URL for the checks of this pull request. */
  readonly checksUrl: Scalars['URI'];
  /** `true` if the pull request is closed */
  readonly closed: Scalars['Boolean'];
  /** Identifies the date and time when the object was closed. */
  readonly closedAt: Maybe<Scalars['DateTime']>;
  /** List of issues that were may be closed by this pull request */
  readonly closingIssuesReferences: Maybe<GraphQLIssueConnection>;
  /** A list of comments associated with the pull request. */
  readonly comments: GraphQLIssueCommentConnection;
  /** A list of commits present in this pull request's head branch not present in the base branch. */
  readonly commits: GraphQLPullRequestCommitConnection;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The number of deletions in this pull request. */
  readonly deletions: Scalars['Int'];
  /** The actor who edited this pull request's body. */
  readonly editor: Maybe<GraphQLActor>;
  /** Lists the files changed within this pull request. */
  readonly files: Maybe<GraphQLPullRequestChangedFileConnection>;
  /** Identifies the head Ref associated with the pull request. */
  readonly headRef: Maybe<GraphQLRef>;
  /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */
  readonly headRefName: Scalars['String'];
  /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */
  readonly headRefOid: Scalars['GitObjectID'];
  /** The repository associated with this pull request's head Ref. */
  readonly headRepository: Maybe<GraphQLRepository>;
  /** The owner of the repository associated with this pull request's head Ref. */
  readonly headRepositoryOwner: Maybe<GraphQLRepositoryOwner>;
  /** The hovercard information for this issue */
  readonly hovercard: GraphQLHovercard;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** The head and base repositories are different. */
  readonly isCrossRepository: Scalars['Boolean'];
  /** Identifies if the pull request is a draft. */
  readonly isDraft: Scalars['Boolean'];
  /** Is this pull request read by the viewer */
  readonly isReadByViewer: Maybe<Scalars['Boolean']>;
  /** A list of labels associated with the object. */
  readonly labels: Maybe<GraphQLLabelConnection>;
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** A list of latest reviews per user associated with the pull request. */
  readonly latestOpinionatedReviews: Maybe<GraphQLPullRequestReviewConnection>;
  /** A list of latest reviews per user associated with the pull request that are not also pending review. */
  readonly latestReviews: Maybe<GraphQLPullRequestReviewConnection>;
  /** `true` if the pull request is locked */
  readonly locked: Scalars['Boolean'];
  /** Indicates whether maintainers can modify the pull request. */
  readonly maintainerCanModify: Scalars['Boolean'];
  /** The commit that was created when this pull request was merged. */
  readonly mergeCommit: Maybe<GraphQLCommit>;
  /** Whether or not the pull request can be merged based on the existence of merge conflicts. */
  readonly mergeable: GraphQLMergeableState;
  /** Whether or not the pull request was merged. */
  readonly merged: Scalars['Boolean'];
  /** The date and time that the pull request was merged. */
  readonly mergedAt: Maybe<Scalars['DateTime']>;
  /** The actor who merged the pull request. */
  readonly mergedBy: Maybe<GraphQLActor>;
  /** Identifies the milestone associated with the pull request. */
  readonly milestone: Maybe<GraphQLMilestone>;
  /** Identifies the pull request number. */
  readonly number: Scalars['Int'];
  /** A list of Users that are participating in the Pull Request conversation. */
  readonly participants: GraphQLUserConnection;
  /** The permalink to the pull request. */
  readonly permalink: Scalars['URI'];
  /** The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request. */
  readonly potentialMergeCommit: Maybe<GraphQLCommit>;
  /** List of project cards associated with this pull request. */
  readonly projectCards: GraphQLProjectCardConnection;
  /** Find a project by project (beta) number. */
  readonly projectNext: Maybe<GraphQLProjectNext>;
  /** List of project (beta) items associated with this pull request. */
  readonly projectNextItems: GraphQLProjectNextItemConnection;
  /** A list of projects (beta) under the owner. */
  readonly projectsNext: GraphQLProjectNextConnection;
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this pull request. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP path for reverting this pull request. */
  readonly revertResourcePath: Scalars['URI'];
  /** The HTTP URL for reverting this pull request. */
  readonly revertUrl: Scalars['URI'];
  /** The current status of this pull request with respect to code review. */
  readonly reviewDecision: Maybe<GraphQLPullRequestReviewDecision>;
  /** A list of review requests associated with the pull request. */
  readonly reviewRequests: Maybe<GraphQLReviewRequestConnection>;
  /** The list of all review threads for this pull request. */
  readonly reviewThreads: GraphQLPullRequestReviewThreadConnection;
  /** A list of reviews associated with the pull request. */
  readonly reviews: Maybe<GraphQLPullRequestReviewConnection>;
  /** Identifies the state of the pull request. */
  readonly state: GraphQLPullRequestState;
  /** A list of reviewer suggestions based on commit history and past review comments. */
  readonly suggestedReviewers: ReadonlyArray<Maybe<GraphQLSuggestedReviewer>>;
  /**
   * A list of events, comments, commits, etc. associated with the pull request.
   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
   */
  readonly timeline: GraphQLPullRequestTimelineConnection;
  /** A list of events, comments, commits, etc. associated with the pull request. */
  readonly timelineItems: GraphQLPullRequestTimelineItemsConnection;
  /** Identifies the pull request title. */
  readonly title: Scalars['String'];
  /** Identifies the pull request title rendered to HTML. */
  readonly titleHTML: Scalars['HTML'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this pull request. */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Whether or not the viewer can apply suggestion. */
  readonly viewerCanApplySuggestion: Scalars['Boolean'];
  /** Check if the viewer can restore the deleted head ref. */
  readonly viewerCanDeleteHeadRef: Scalars['Boolean'];
  /** Whether or not the viewer can disable auto-merge */
  readonly viewerCanDisableAutoMerge: Scalars['Boolean'];
  /** Whether or not the viewer can enable auto-merge */
  readonly viewerCanEnableAutoMerge: Scalars['Boolean'];
  /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */
  readonly viewerCanMergeAsAdmin: Scalars['Boolean'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  readonly viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
  /** The latest review given from the viewer. */
  readonly viewerLatestReview: Maybe<GraphQLPullRequestReview>;
  /** The person who has requested the viewer for review on this pull request. */
  readonly viewerLatestReviewRequest: Maybe<GraphQLReviewRequest>;
  /** The merge body text for the viewer and method. */
  readonly viewerMergeBodyText: Scalars['String'];
  /** The merge headline text for the viewer and method. */
  readonly viewerMergeHeadlineText: Scalars['String'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  readonly viewerSubscription: Maybe<GraphQLSubscriptionState>;
};


/** A repository pull request. */
export type GraphQLPullRequestAssigneesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestClosingIssuesReferencesArgs = {
  userLinkedOnly?: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLIssueOrder>;
};


/** A repository pull request. */
export type GraphQLPullRequestCommentsArgs = {
  orderBy: Maybe<GraphQLIssueCommentOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestCommitsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestFilesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestHovercardArgs = {
  includeNotificationContexts?: Maybe<Scalars['Boolean']>;
};


/** A repository pull request. */
export type GraphQLPullRequestLabelsArgs = {
  orderBy?: Maybe<GraphQLLabelOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestLatestOpinionatedReviewsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  writersOnly?: Maybe<Scalars['Boolean']>;
};


/** A repository pull request. */
export type GraphQLPullRequestLatestReviewsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestParticipantsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestProjectCardsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  archivedStates?: Maybe<ReadonlyArray<Maybe<GraphQLProjectCardArchivedState>>>;
};


/** A repository pull request. */
export type GraphQLPullRequestProjectNextArgs = {
  number: Scalars['Int'];
};


/** A repository pull request. */
export type GraphQLPullRequestProjectNextItemsArgs = {
  includeArchived?: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestProjectsNextArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
  sortBy?: Maybe<GraphQLProjectNextOrderField>;
};


/** A repository pull request. */
export type GraphQLPullRequestReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** A repository pull request. */
export type GraphQLPullRequestReviewRequestsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestReviewThreadsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestReviewsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  states: Maybe<ReadonlyArray<GraphQLPullRequestReviewState>>;
  author: Maybe<Scalars['String']>;
};


/** A repository pull request. */
export type GraphQLPullRequestTimelineArgs = {
  since: Maybe<Scalars['DateTime']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestTimelineItemsArgs = {
  since: Maybe<Scalars['DateTime']>;
  skip: Maybe<Scalars['Int']>;
  itemTypes: Maybe<ReadonlyArray<GraphQLPullRequestTimelineItemsItemType>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository pull request. */
export type GraphQLPullRequestViewerMergeBodyTextArgs = {
  mergeType: Maybe<GraphQLPullRequestMergeMethod>;
};


/** A repository pull request. */
export type GraphQLPullRequestViewerMergeHeadlineTextArgs = {
  mergeType: Maybe<GraphQLPullRequestMergeMethod>;
};

/** A file changed in a pull request. */
export type GraphQLPullRequestChangedFile = {
  readonly __typename?: 'PullRequestChangedFile';
  /** The number of additions to the file. */
  readonly additions: Scalars['Int'];
  /** The number of deletions to the file. */
  readonly deletions: Scalars['Int'];
  /** The path of the file. */
  readonly path: Scalars['String'];
  /** The state of the file for the viewer. */
  readonly viewerViewedState: GraphQLFileViewedState;
};

/** The connection type for PullRequestChangedFile. */
export type GraphQLPullRequestChangedFileConnection = {
  readonly __typename?: 'PullRequestChangedFileConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestChangedFileEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestChangedFile>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPullRequestChangedFileEdge = {
  readonly __typename?: 'PullRequestChangedFileEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPullRequestChangedFile>;
};

/** Represents a Git commit part of a pull request. */
export type GraphQLPullRequestCommit = GraphQLNode & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'PullRequestCommit';
  /** The Git commit object */
  readonly commit: GraphQLCommit;
  readonly id: Scalars['ID'];
  /** The pull request this commit belongs to */
  readonly pullRequest: GraphQLPullRequest;
  /** The HTTP path for this pull request commit */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this pull request commit */
  readonly url: Scalars['URI'];
};

/** Represents a commit comment thread part of a pull request. */
export type GraphQLPullRequestCommitCommentThread = GraphQLRepositoryNode & GraphQLNode & {
  readonly __typename?: 'PullRequestCommitCommentThread';
  /** The comments that exist in this thread. */
  readonly comments: GraphQLCommitCommentConnection;
  /** The commit the comments were made on. */
  readonly commit: GraphQLCommit;
  readonly id: Scalars['ID'];
  /** The file the comments were made on. */
  readonly path: Maybe<Scalars['String']>;
  /** The position in the diff for the commit that the comment was made on. */
  readonly position: Maybe<Scalars['Int']>;
  /** The pull request this commit comment thread belongs to */
  readonly pullRequest: GraphQLPullRequest;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
};


/** Represents a commit comment thread part of a pull request. */
export type GraphQLPullRequestCommitCommentThreadCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for PullRequestCommit. */
export type GraphQLPullRequestCommitConnection = {
  readonly __typename?: 'PullRequestCommitConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestCommitEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestCommit>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPullRequestCommitEdge = {
  readonly __typename?: 'PullRequestCommitEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPullRequestCommit>;
};

/** The connection type for PullRequest. */
export type GraphQLPullRequestConnection = {
  readonly __typename?: 'PullRequestConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPullRequest>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** This aggregates pull requests opened by a user within one repository. */
export type GraphQLPullRequestContributionsByRepository = {
  readonly __typename?: 'PullRequestContributionsByRepository';
  /** The pull request contributions. */
  readonly contributions: GraphQLCreatedPullRequestContributionConnection;
  /** The repository in which the pull requests were opened. */
  readonly repository: GraphQLRepository;
};


/** This aggregates pull requests opened by a user within one repository. */
export type GraphQLPullRequestContributionsByRepositoryContributionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLContributionOrder>;
};

/** An edge in a connection. */
export type GraphQLPullRequestEdge = {
  readonly __typename?: 'PullRequestEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPullRequest>;
};

/** Represents available types of methods to use when merging a pull request. */
export enum GraphQLPullRequestMergeMethod {
  /** Add all commits from the head branch to the base branch with a merge commit. */
  MERGE = 'MERGE',
  /** Combine all commits from the head branch into a single commit in the base branch. */
  SQUASH = 'SQUASH',
  /** Add all commits from the head branch onto the base branch individually. */
  REBASE = 'REBASE'
}

/** Ways in which lists of issues can be ordered upon return. */
export type GraphQLPullRequestOrder = {
  /** The field in which to order pull requests by. */
  readonly field: GraphQLPullRequestOrderField;
  /** The direction in which to order pull requests by the specified field. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which pull_requests connections can be ordered. */
export enum GraphQLPullRequestOrderField {
  /** Order pull_requests by creation time */
  CREATED_AT = 'CREATED_AT',
  /** Order pull_requests by update time */
  UPDATED_AT = 'UPDATED_AT'
}

/** A review object for a given pull request. */
export type GraphQLPullRequestReview = GraphQLNode & GraphQLComment & GraphQLDeletable & GraphQLUpdatable & GraphQLUpdatableComment & GraphQLReactable & GraphQLRepositoryNode & {
  readonly __typename?: 'PullRequestReview';
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the subject of the comment. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** Indicates whether the author of this review has push access to the repository. */
  readonly authorCanPushToRepository: Scalars['Boolean'];
  /** Identifies the pull request review body. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body of this review rendered as plain text. */
  readonly bodyText: Scalars['String'];
  /** A list of review comments for the current pull request review. */
  readonly comments: GraphQLPullRequestReviewCommentConnection;
  /** Identifies the commit associated with this pull request review. */
  readonly commit: Maybe<GraphQLCommit>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** A list of teams that this review was made on behalf of. */
  readonly onBehalfOf: GraphQLTeamConnection;
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** Identifies the pull request associated with this pull request review. */
  readonly pullRequest: GraphQLPullRequest;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
  /** The HTTP path permalink for this PullRequestReview. */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the current state of the pull request review. */
  readonly state: GraphQLPullRequestReviewState;
  /** Identifies when the Pull Request Review was submitted */
  readonly submittedAt: Maybe<Scalars['DateTime']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL permalink for this PullRequestReview. */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
};


/** A review object for a given pull request. */
export type GraphQLPullRequestReviewCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A review object for a given pull request. */
export type GraphQLPullRequestReviewOnBehalfOfArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A review object for a given pull request. */
export type GraphQLPullRequestReviewReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** A review object for a given pull request. */
export type GraphQLPullRequestReviewUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** A review comment associated with a given repository pull request. */
export type GraphQLPullRequestReviewComment = GraphQLNode & GraphQLComment & GraphQLDeletable & GraphQLMinimizable & GraphQLUpdatable & GraphQLUpdatableComment & GraphQLReactable & GraphQLRepositoryNode & {
  readonly __typename?: 'PullRequestReviewComment';
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the subject of the comment. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** The comment body of this review comment. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The comment body of this review comment rendered as plain text. */
  readonly bodyText: Scalars['String'];
  /** Identifies the commit associated with the comment. */
  readonly commit: Maybe<GraphQLCommit>;
  /** Identifies when the comment was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The diff hunk to which the comment applies. */
  readonly diffHunk: Scalars['String'];
  /** Identifies when the comment was created in a draft state. */
  readonly draftedAt: Scalars['DateTime'];
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** Returns whether or not a comment has been minimized. */
  readonly isMinimized: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** Returns why the comment was minimized. */
  readonly minimizedReason: Maybe<Scalars['String']>;
  /** Identifies the original commit associated with the comment. */
  readonly originalCommit: Maybe<GraphQLCommit>;
  /** The original line index in the diff to which the comment applies. */
  readonly originalPosition: Scalars['Int'];
  /** Identifies when the comment body is outdated */
  readonly outdated: Scalars['Boolean'];
  /** The path to which the comment applies. */
  readonly path: Scalars['String'];
  /** The line index in the diff to which the comment applies. */
  readonly position: Maybe<Scalars['Int']>;
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** The pull request associated with this review comment. */
  readonly pullRequest: GraphQLPullRequest;
  /** The pull request review associated with this review comment. */
  readonly pullRequestReview: Maybe<GraphQLPullRequestReview>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The comment this is a reply to. */
  readonly replyTo: Maybe<GraphQLPullRequestReviewComment>;
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
  /** The HTTP path permalink for this review comment. */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the state of the comment. */
  readonly state: GraphQLPullRequestReviewCommentState;
  /** Identifies when the comment was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL permalink for this review comment. */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
  /** Check if the current viewer can minimize this object. */
  readonly viewerCanMinimize: Scalars['Boolean'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
};


/** A review comment associated with a given repository pull request. */
export type GraphQLPullRequestReviewCommentReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** A review comment associated with a given repository pull request. */
export type GraphQLPullRequestReviewCommentUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for PullRequestReviewComment. */
export type GraphQLPullRequestReviewCommentConnection = {
  readonly __typename?: 'PullRequestReviewCommentConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestReviewCommentEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestReviewComment>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPullRequestReviewCommentEdge = {
  readonly __typename?: 'PullRequestReviewCommentEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPullRequestReviewComment>;
};

/** The possible states of a pull request review comment. */
export enum GraphQLPullRequestReviewCommentState {
  /** A comment that is part of a pending review */
  PENDING = 'PENDING',
  /** A comment that is part of a submitted review */
  SUBMITTED = 'SUBMITTED'
}

/** The connection type for PullRequestReview. */
export type GraphQLPullRequestReviewConnection = {
  readonly __typename?: 'PullRequestReviewConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestReviewEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestReview>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** This aggregates pull request reviews made by a user within one repository. */
export type GraphQLPullRequestReviewContributionsByRepository = {
  readonly __typename?: 'PullRequestReviewContributionsByRepository';
  /** The pull request review contributions. */
  readonly contributions: GraphQLCreatedPullRequestReviewContributionConnection;
  /** The repository in which the pull request reviews were made. */
  readonly repository: GraphQLRepository;
};


/** This aggregates pull request reviews made by a user within one repository. */
export type GraphQLPullRequestReviewContributionsByRepositoryContributionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLContributionOrder>;
};

/** The review status of a pull request. */
export enum GraphQLPullRequestReviewDecision {
  /** Changes have been requested on the pull request. */
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',
  /** The pull request has received an approving review. */
  APPROVED = 'APPROVED',
  /** A review is required before the pull request can be merged. */
  REVIEW_REQUIRED = 'REVIEW_REQUIRED'
}

/** An edge in a connection. */
export type GraphQLPullRequestReviewEdge = {
  readonly __typename?: 'PullRequestReviewEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPullRequestReview>;
};

/** The possible events to perform on a pull request review. */
export enum GraphQLPullRequestReviewEvent {
  /** Submit general feedback without explicit approval. */
  COMMENT = 'COMMENT',
  /** Submit feedback and approve merging these changes. */
  APPROVE = 'APPROVE',
  /** Submit feedback that must be addressed before merging. */
  REQUEST_CHANGES = 'REQUEST_CHANGES',
  /** Dismiss review so it now longer effects merging. */
  DISMISS = 'DISMISS'
}

/** The possible states of a pull request review. */
export enum GraphQLPullRequestReviewState {
  /** A review that has not yet been submitted. */
  PENDING = 'PENDING',
  /** An informational review. */
  COMMENTED = 'COMMENTED',
  /** A review allowing the pull request to merge. */
  APPROVED = 'APPROVED',
  /** A review blocking the pull request from merging. */
  CHANGES_REQUESTED = 'CHANGES_REQUESTED',
  /** A review that has been dismissed. */
  DISMISSED = 'DISMISSED'
}

/** A threaded list of comments for a given pull request. */
export type GraphQLPullRequestReviewThread = GraphQLNode & {
  readonly __typename?: 'PullRequestReviewThread';
  /** A list of pull request comments associated with the thread. */
  readonly comments: GraphQLPullRequestReviewCommentConnection;
  /** The side of the diff on which this thread was placed. */
  readonly diffSide: GraphQLDiffSide;
  readonly id: Scalars['ID'];
  /** Whether or not the thread has been collapsed (resolved) */
  readonly isCollapsed: Scalars['Boolean'];
  /** Indicates whether this thread was outdated by newer changes. */
  readonly isOutdated: Scalars['Boolean'];
  /** Whether this thread has been resolved */
  readonly isResolved: Scalars['Boolean'];
  /** The line in the file to which this thread refers */
  readonly line: Maybe<Scalars['Int']>;
  /** The original line in the file to which this thread refers. */
  readonly originalLine: Maybe<Scalars['Int']>;
  /** The original start line in the file to which this thread refers (multi-line only). */
  readonly originalStartLine: Maybe<Scalars['Int']>;
  /** Identifies the file path of this thread. */
  readonly path: Scalars['String'];
  /** Identifies the pull request associated with this thread. */
  readonly pullRequest: GraphQLPullRequest;
  /** Identifies the repository associated with this thread. */
  readonly repository: GraphQLRepository;
  /** The user who resolved this thread */
  readonly resolvedBy: Maybe<GraphQLUser>;
  /** The side of the diff that the first line of the thread starts on (multi-line only) */
  readonly startDiffSide: Maybe<GraphQLDiffSide>;
  /** The start line in the file to which this thread refers (multi-line only) */
  readonly startLine: Maybe<Scalars['Int']>;
  /** Indicates whether the current viewer can reply to this thread. */
  readonly viewerCanReply: Scalars['Boolean'];
  /** Whether or not the viewer can resolve this thread */
  readonly viewerCanResolve: Scalars['Boolean'];
  /** Whether or not the viewer can unresolve this thread */
  readonly viewerCanUnresolve: Scalars['Boolean'];
};


/** A threaded list of comments for a given pull request. */
export type GraphQLPullRequestReviewThreadCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  skip: Maybe<Scalars['Int']>;
};

/** Review comment threads for a pull request review. */
export type GraphQLPullRequestReviewThreadConnection = {
  readonly __typename?: 'PullRequestReviewThreadConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestReviewThreadEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestReviewThread>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPullRequestReviewThreadEdge = {
  readonly __typename?: 'PullRequestReviewThreadEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPullRequestReviewThread>;
};

/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
export type GraphQLPullRequestRevisionMarker = {
  readonly __typename?: 'PullRequestRevisionMarker';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The last commit the viewer has seen. */
  readonly lastSeenCommit: GraphQLCommit;
  /** The pull request to which the marker belongs. */
  readonly pullRequest: GraphQLPullRequest;
};

/** The possible states of a pull request. */
export enum GraphQLPullRequestState {
  /** A pull request that is still open. */
  OPEN = 'OPEN',
  /** A pull request that has been closed without being merged. */
  CLOSED = 'CLOSED',
  /** A pull request that has been closed by being merged. */
  MERGED = 'MERGED'
}

/** A repository pull request template. */
export type GraphQLPullRequestTemplate = {
  readonly __typename?: 'PullRequestTemplate';
  /** The body of the template */
  readonly body: Maybe<Scalars['String']>;
  /** The filename of the template */
  readonly filename: Maybe<Scalars['String']>;
  /** The repository the template belongs to */
  readonly repository: GraphQLRepository;
};

/** The connection type for PullRequestTimelineItem. */
export type GraphQLPullRequestTimelineConnection = {
  readonly __typename?: 'PullRequestTimelineConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestTimelineItemEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestTimelineItem>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An item in a pull request timeline */
export type GraphQLPullRequestTimelineItem = GraphQLAssignedEvent | GraphQLBaseRefDeletedEvent | GraphQLBaseRefForcePushedEvent | GraphQLClosedEvent | GraphQLCommit | GraphQLCommitCommentThread | GraphQLCrossReferencedEvent | GraphQLDemilestonedEvent | GraphQLDeployedEvent | GraphQLDeploymentEnvironmentChangedEvent | GraphQLHeadRefDeletedEvent | GraphQLHeadRefForcePushedEvent | GraphQLHeadRefRestoredEvent | GraphQLIssueComment | GraphQLLabeledEvent | GraphQLLockedEvent | GraphQLMergedEvent | GraphQLMilestonedEvent | GraphQLPullRequestReview | GraphQLPullRequestReviewComment | GraphQLPullRequestReviewThread | GraphQLReferencedEvent | GraphQLRenamedTitleEvent | GraphQLReopenedEvent | GraphQLReviewDismissedEvent | GraphQLReviewRequestRemovedEvent | GraphQLReviewRequestedEvent | GraphQLSubscribedEvent | GraphQLUnassignedEvent | GraphQLUnlabeledEvent | GraphQLUnlockedEvent | GraphQLUnsubscribedEvent | GraphQLUserBlockedEvent;

/** An edge in a connection. */
export type GraphQLPullRequestTimelineItemEdge = {
  readonly __typename?: 'PullRequestTimelineItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPullRequestTimelineItem>;
};

/** An item in a pull request timeline */
export type GraphQLPullRequestTimelineItems = GraphQLAddedToProjectEvent | GraphQLAssignedEvent | GraphQLAutoMergeDisabledEvent | GraphQLAutoMergeEnabledEvent | GraphQLAutoRebaseEnabledEvent | GraphQLAutoSquashEnabledEvent | GraphQLAutomaticBaseChangeFailedEvent | GraphQLAutomaticBaseChangeSucceededEvent | GraphQLBaseRefChangedEvent | GraphQLBaseRefDeletedEvent | GraphQLBaseRefForcePushedEvent | GraphQLClosedEvent | GraphQLCommentDeletedEvent | GraphQLConnectedEvent | GraphQLConvertToDraftEvent | GraphQLConvertedNoteToIssueEvent | GraphQLConvertedToDiscussionEvent | GraphQLCrossReferencedEvent | GraphQLDemilestonedEvent | GraphQLDeployedEvent | GraphQLDeploymentEnvironmentChangedEvent | GraphQLDisconnectedEvent | GraphQLHeadRefDeletedEvent | GraphQLHeadRefForcePushedEvent | GraphQLHeadRefRestoredEvent | GraphQLIssueComment | GraphQLLabeledEvent | GraphQLLockedEvent | GraphQLMarkedAsDuplicateEvent | GraphQLMentionedEvent | GraphQLMergedEvent | GraphQLMilestonedEvent | GraphQLMovedColumnsInProjectEvent | GraphQLPinnedEvent | GraphQLPullRequestCommit | GraphQLPullRequestCommitCommentThread | GraphQLPullRequestReview | GraphQLPullRequestReviewThread | GraphQLPullRequestRevisionMarker | GraphQLReadyForReviewEvent | GraphQLReferencedEvent | GraphQLRemovedFromProjectEvent | GraphQLRenamedTitleEvent | GraphQLReopenedEvent | GraphQLReviewDismissedEvent | GraphQLReviewRequestRemovedEvent | GraphQLReviewRequestedEvent | GraphQLSubscribedEvent | GraphQLTransferredEvent | GraphQLUnassignedEvent | GraphQLUnlabeledEvent | GraphQLUnlockedEvent | GraphQLUnmarkedAsDuplicateEvent | GraphQLUnpinnedEvent | GraphQLUnsubscribedEvent | GraphQLUserBlockedEvent;

/** The connection type for PullRequestTimelineItems. */
export type GraphQLPullRequestTimelineItemsConnection = {
  readonly __typename?: 'PullRequestTimelineItemsConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestTimelineItemsEdge>>>;
  /** Identifies the count of items after applying `before` and `after` filters. */
  readonly filteredCount: Scalars['Int'];
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPullRequestTimelineItems>>>;
  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */
  readonly pageCount: Scalars['Int'];
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
  /** Identifies the date and time when the timeline was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** An edge in a connection. */
export type GraphQLPullRequestTimelineItemsEdge = {
  readonly __typename?: 'PullRequestTimelineItemsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPullRequestTimelineItems>;
};

/** The possible item types found in a timeline. */
export enum GraphQLPullRequestTimelineItemsItemType {
  /** Represents a Git commit part of a pull request. */
  PULL_REQUEST_COMMIT = 'PULL_REQUEST_COMMIT',
  /** Represents a commit comment thread part of a pull request. */
  PULL_REQUEST_COMMIT_COMMENT_THREAD = 'PULL_REQUEST_COMMIT_COMMENT_THREAD',
  /** A review object for a given pull request. */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW',
  /** A threaded list of comments for a given pull request. */
  PULL_REQUEST_REVIEW_THREAD = 'PULL_REQUEST_REVIEW_THREAD',
  /** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */
  PULL_REQUEST_REVISION_MARKER = 'PULL_REQUEST_REVISION_MARKER',
  /** Represents a 'automatic_base_change_failed' event on a given pull request. */
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT = 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT',
  /** Represents a 'automatic_base_change_succeeded' event on a given pull request. */
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT = 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT',
  /** Represents a 'auto_merge_disabled' event on a given pull request. */
  AUTO_MERGE_DISABLED_EVENT = 'AUTO_MERGE_DISABLED_EVENT',
  /** Represents a 'auto_merge_enabled' event on a given pull request. */
  AUTO_MERGE_ENABLED_EVENT = 'AUTO_MERGE_ENABLED_EVENT',
  /** Represents a 'auto_rebase_enabled' event on a given pull request. */
  AUTO_REBASE_ENABLED_EVENT = 'AUTO_REBASE_ENABLED_EVENT',
  /** Represents a 'auto_squash_enabled' event on a given pull request. */
  AUTO_SQUASH_ENABLED_EVENT = 'AUTO_SQUASH_ENABLED_EVENT',
  /** Represents a 'base_ref_changed' event on a given issue or pull request. */
  BASE_REF_CHANGED_EVENT = 'BASE_REF_CHANGED_EVENT',
  /** Represents a 'base_ref_force_pushed' event on a given pull request. */
  BASE_REF_FORCE_PUSHED_EVENT = 'BASE_REF_FORCE_PUSHED_EVENT',
  /** Represents a 'base_ref_deleted' event on a given pull request. */
  BASE_REF_DELETED_EVENT = 'BASE_REF_DELETED_EVENT',
  /** Represents a 'deployed' event on a given pull request. */
  DEPLOYED_EVENT = 'DEPLOYED_EVENT',
  /** Represents a 'deployment_environment_changed' event on a given pull request. */
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT',
  /** Represents a 'head_ref_deleted' event on a given pull request. */
  HEAD_REF_DELETED_EVENT = 'HEAD_REF_DELETED_EVENT',
  /** Represents a 'head_ref_force_pushed' event on a given pull request. */
  HEAD_REF_FORCE_PUSHED_EVENT = 'HEAD_REF_FORCE_PUSHED_EVENT',
  /** Represents a 'head_ref_restored' event on a given pull request. */
  HEAD_REF_RESTORED_EVENT = 'HEAD_REF_RESTORED_EVENT',
  /** Represents a 'merged' event on a given pull request. */
  MERGED_EVENT = 'MERGED_EVENT',
  /** Represents a 'review_dismissed' event on a given issue or pull request. */
  REVIEW_DISMISSED_EVENT = 'REVIEW_DISMISSED_EVENT',
  /** Represents an 'review_requested' event on a given pull request. */
  REVIEW_REQUESTED_EVENT = 'REVIEW_REQUESTED_EVENT',
  /** Represents an 'review_request_removed' event on a given pull request. */
  REVIEW_REQUEST_REMOVED_EVENT = 'REVIEW_REQUEST_REMOVED_EVENT',
  /** Represents a 'ready_for_review' event on a given pull request. */
  READY_FOR_REVIEW_EVENT = 'READY_FOR_REVIEW_EVENT',
  /** Represents a 'convert_to_draft' event on a given pull request. */
  CONVERT_TO_DRAFT_EVENT = 'CONVERT_TO_DRAFT_EVENT',
  /** Represents an 'added_to_merge_queue' event on a given pull request. */
  ADDED_TO_MERGE_QUEUE_EVENT = 'ADDED_TO_MERGE_QUEUE_EVENT',
  /** Represents a 'removed_from_merge_queue' event on a given pull request. */
  REMOVED_FROM_MERGE_QUEUE_EVENT = 'REMOVED_FROM_MERGE_QUEUE_EVENT',
  /** Represents a comment on an Issue. */
  ISSUE_COMMENT = 'ISSUE_COMMENT',
  /** Represents a mention made by one issue or pull request to another. */
  CROSS_REFERENCED_EVENT = 'CROSS_REFERENCED_EVENT',
  /** Represents a 'added_to_project' event on a given issue or pull request. */
  ADDED_TO_PROJECT_EVENT = 'ADDED_TO_PROJECT_EVENT',
  /** Represents an 'assigned' event on any assignable object. */
  ASSIGNED_EVENT = 'ASSIGNED_EVENT',
  /** Represents a 'closed' event on any `Closable`. */
  CLOSED_EVENT = 'CLOSED_EVENT',
  /** Represents a 'comment_deleted' event on a given issue or pull request. */
  COMMENT_DELETED_EVENT = 'COMMENT_DELETED_EVENT',
  /** Represents a 'connected' event on a given issue or pull request. */
  CONNECTED_EVENT = 'CONNECTED_EVENT',
  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */
  CONVERTED_NOTE_TO_ISSUE_EVENT = 'CONVERTED_NOTE_TO_ISSUE_EVENT',
  /** Represents a 'converted_to_discussion' event on a given issue. */
  CONVERTED_TO_DISCUSSION_EVENT = 'CONVERTED_TO_DISCUSSION_EVENT',
  /** Represents a 'demilestoned' event on a given issue or pull request. */
  DEMILESTONED_EVENT = 'DEMILESTONED_EVENT',
  /** Represents a 'disconnected' event on a given issue or pull request. */
  DISCONNECTED_EVENT = 'DISCONNECTED_EVENT',
  /** Represents a 'labeled' event on a given issue or pull request. */
  LABELED_EVENT = 'LABELED_EVENT',
  /** Represents a 'locked' event on a given issue or pull request. */
  LOCKED_EVENT = 'LOCKED_EVENT',
  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */
  MARKED_AS_DUPLICATE_EVENT = 'MARKED_AS_DUPLICATE_EVENT',
  /** Represents a 'mentioned' event on a given issue or pull request. */
  MENTIONED_EVENT = 'MENTIONED_EVENT',
  /** Represents a 'milestoned' event on a given issue or pull request. */
  MILESTONED_EVENT = 'MILESTONED_EVENT',
  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */
  MOVED_COLUMNS_IN_PROJECT_EVENT = 'MOVED_COLUMNS_IN_PROJECT_EVENT',
  /** Represents a 'pinned' event on a given issue or pull request. */
  PINNED_EVENT = 'PINNED_EVENT',
  /** Represents a 'referenced' event on a given `ReferencedSubject`. */
  REFERENCED_EVENT = 'REFERENCED_EVENT',
  /** Represents a 'removed_from_project' event on a given issue or pull request. */
  REMOVED_FROM_PROJECT_EVENT = 'REMOVED_FROM_PROJECT_EVENT',
  /** Represents a 'renamed' event on a given issue or pull request */
  RENAMED_TITLE_EVENT = 'RENAMED_TITLE_EVENT',
  /** Represents a 'reopened' event on any `Closable`. */
  REOPENED_EVENT = 'REOPENED_EVENT',
  /** Represents a 'subscribed' event on a given `Subscribable`. */
  SUBSCRIBED_EVENT = 'SUBSCRIBED_EVENT',
  /** Represents a 'transferred' event on a given issue or pull request. */
  TRANSFERRED_EVENT = 'TRANSFERRED_EVENT',
  /** Represents an 'unassigned' event on any assignable object. */
  UNASSIGNED_EVENT = 'UNASSIGNED_EVENT',
  /** Represents an 'unlabeled' event on a given issue or pull request. */
  UNLABELED_EVENT = 'UNLABELED_EVENT',
  /** Represents an 'unlocked' event on a given issue or pull request. */
  UNLOCKED_EVENT = 'UNLOCKED_EVENT',
  /** Represents a 'user_blocked' event on a given user. */
  USER_BLOCKED_EVENT = 'USER_BLOCKED_EVENT',
  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
  UNMARKED_AS_DUPLICATE_EVENT = 'UNMARKED_AS_DUPLICATE_EVENT',
  /** Represents an 'unpinned' event on a given issue or pull request. */
  UNPINNED_EVENT = 'UNPINNED_EVENT',
  /** Represents an 'unsubscribed' event on a given `Subscribable`. */
  UNSUBSCRIBED_EVENT = 'UNSUBSCRIBED_EVENT'
}

/** The possible target states when updating a pull request. */
export enum GraphQLPullRequestUpdateState {
  /** A pull request that is still open. */
  OPEN = 'OPEN',
  /** A pull request that has been closed without being merged. */
  CLOSED = 'CLOSED'
}

/** A Git push. */
export type GraphQLPush = GraphQLNode & {
  readonly __typename?: 'Push';
  readonly id: Scalars['ID'];
  /** The SHA after the push */
  readonly nextSha: Maybe<Scalars['GitObjectID']>;
  /** The permalink for this push. */
  readonly permalink: Scalars['URI'];
  /** The SHA before the push */
  readonly previousSha: Maybe<Scalars['GitObjectID']>;
  /** The actor who pushed */
  readonly pusher: GraphQLActor;
  /** The repository that was pushed to */
  readonly repository: GraphQLRepository;
};

/** A team, user or app who has the ability to push to a protected branch. */
export type GraphQLPushAllowance = GraphQLNode & {
  readonly __typename?: 'PushAllowance';
  /** The actor that can push. */
  readonly actor: Maybe<GraphQLPushAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  readonly branchProtectionRule: Maybe<GraphQLBranchProtectionRule>;
  readonly id: Scalars['ID'];
};

/** Types that can be an actor. */
export type GraphQLPushAllowanceActor = GraphQLApp | GraphQLTeam | GraphQLUser;

/** The connection type for PushAllowance. */
export type GraphQLPushAllowanceConnection = {
  readonly __typename?: 'PushAllowanceConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLPushAllowanceEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLPushAllowance>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLPushAllowanceEdge = {
  readonly __typename?: 'PushAllowanceEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLPushAllowance>;
};

/** The query root of GitHub's GraphQL interface. */
export type GraphQLQuery = {
  readonly __typename?: 'Query';
  /** Look up a code of conduct by its key */
  readonly codeOfConduct: Maybe<GraphQLCodeOfConduct>;
  /** Look up a code of conduct by its key */
  readonly codesOfConduct: Maybe<ReadonlyArray<Maybe<GraphQLCodeOfConduct>>>;
  /** Look up an enterprise by URL slug. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */
  readonly enterpriseAdministratorInvitation: Maybe<GraphQLEnterpriseAdministratorInvitation>;
  /** Look up a pending enterprise administrator invitation by invitation token. */
  readonly enterpriseAdministratorInvitationByToken: Maybe<GraphQLEnterpriseAdministratorInvitation>;
  /** Look up an open source license by its key */
  readonly license: Maybe<GraphQLLicense>;
  /** Return a list of known open source licenses */
  readonly licenses: ReadonlyArray<Maybe<GraphQLLicense>>;
  /** Get alphabetically sorted list of Marketplace categories */
  readonly marketplaceCategories: ReadonlyArray<GraphQLMarketplaceCategory>;
  /** Look up a Marketplace category by its slug. */
  readonly marketplaceCategory: Maybe<GraphQLMarketplaceCategory>;
  /** Look up a single Marketplace listing */
  readonly marketplaceListing: Maybe<GraphQLMarketplaceListing>;
  /** Look up Marketplace listings */
  readonly marketplaceListings: GraphQLMarketplaceListingConnection;
  /** Return information about the GitHub instance */
  readonly meta: GraphQLGitHubMetadata;
  /** Fetches an object given its ID. */
  readonly node: Maybe<GraphQLNode>;
  /** Lookup nodes by a list of IDs. */
  readonly nodes: ReadonlyArray<Maybe<GraphQLNode>>;
  /** Lookup a organization by login. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The client's rate limit information. */
  readonly rateLimit: Maybe<GraphQLRateLimit>;
  /** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */
  readonly relay: GraphQLQuery;
  /** Lookup a given repository by the owner and repository name. */
  readonly repository: Maybe<GraphQLRepository>;
  /** Lookup a repository owner (ie. either a User or an Organization) by login. */
  readonly repositoryOwner: Maybe<GraphQLRepositoryOwner>;
  /** Lookup resource by a URL. */
  readonly resource: Maybe<GraphQLUniformResourceLocatable>;
  /** Perform a search across resources. */
  readonly search: GraphQLSearchResultItemConnection;
  /** GitHub Security Advisories */
  readonly securityAdvisories: GraphQLSecurityAdvisoryConnection;
  /** Fetch a Security Advisory by its GHSA ID */
  readonly securityAdvisory: Maybe<GraphQLSecurityAdvisory>;
  /** Software Vulnerabilities documented by GitHub Security Advisories */
  readonly securityVulnerabilities: GraphQLSecurityVulnerabilityConnection;
  /** Users and organizations who can be sponsored via GitHub Sponsors. */
  readonly sponsorables: GraphQLSponsorableItemConnection;
  /** Look up a topic by name. */
  readonly topic: Maybe<GraphQLTopic>;
  /** Lookup a user by login. */
  readonly user: Maybe<GraphQLUser>;
  /** The currently authenticated user. */
  readonly viewer: GraphQLUser;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryCodeOfConductArgs = {
  key: Scalars['String'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryEnterpriseArgs = {
  slug: Scalars['String'];
  invitationToken: Maybe<Scalars['String']>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryEnterpriseAdministratorInvitationArgs = {
  userLogin: Scalars['String'];
  enterpriseSlug: Scalars['String'];
  role: GraphQLEnterpriseAdministratorRole;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryEnterpriseAdministratorInvitationByTokenArgs = {
  invitationToken: Scalars['String'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryLicenseArgs = {
  key: Scalars['String'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryMarketplaceCategoriesArgs = {
  includeCategories: Maybe<ReadonlyArray<Scalars['String']>>;
  excludeEmpty: Maybe<Scalars['Boolean']>;
  excludeSubcategories: Maybe<Scalars['Boolean']>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryMarketplaceCategoryArgs = {
  slug: Scalars['String'];
  useTopicAliases: Maybe<Scalars['Boolean']>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryMarketplaceListingArgs = {
  slug: Scalars['String'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryMarketplaceListingsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  categorySlug: Maybe<Scalars['String']>;
  useTopicAliases: Maybe<Scalars['Boolean']>;
  viewerCanAdmin: Maybe<Scalars['Boolean']>;
  adminId: Maybe<Scalars['ID']>;
  organizationId: Maybe<Scalars['ID']>;
  allStates: Maybe<Scalars['Boolean']>;
  slugs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  primaryCategoryOnly?: Maybe<Scalars['Boolean']>;
  withFreeTrialsOnly?: Maybe<Scalars['Boolean']>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryNodeArgs = {
  id: Scalars['ID'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryNodesArgs = {
  ids: ReadonlyArray<Scalars['ID']>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryOrganizationArgs = {
  login: Scalars['String'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryRateLimitArgs = {
  dryRun?: Maybe<Scalars['Boolean']>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryRepositoryArgs = {
  owner: Scalars['String'];
  name: Scalars['String'];
  followRenames?: Maybe<Scalars['Boolean']>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryRepositoryOwnerArgs = {
  login: Scalars['String'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryResourceArgs = {
  url: Scalars['URI'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQuerySearchArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Scalars['String'];
  type: GraphQLSearchType;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQuerySecurityAdvisoriesArgs = {
  orderBy?: Maybe<GraphQLSecurityAdvisoryOrder>;
  identifier: Maybe<GraphQLSecurityAdvisoryIdentifierFilter>;
  publishedSince: Maybe<Scalars['DateTime']>;
  updatedSince: Maybe<Scalars['DateTime']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQuerySecurityAdvisoryArgs = {
  ghsaId: Scalars['String'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQuerySecurityVulnerabilitiesArgs = {
  orderBy?: Maybe<GraphQLSecurityVulnerabilityOrder>;
  ecosystem: Maybe<GraphQLSecurityAdvisoryEcosystem>;
  package: Maybe<Scalars['String']>;
  severities: Maybe<ReadonlyArray<GraphQLSecurityAdvisorySeverity>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQuerySponsorablesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLSponsorableOrder>;
  onlyDependencies?: Maybe<Scalars['Boolean']>;
  orgLoginForDependencies: Maybe<Scalars['String']>;
  dependencyEcosystem: Maybe<GraphQLSecurityAdvisoryEcosystem>;
  ecosystem: Maybe<GraphQLDependencyGraphEcosystem>;
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryTopicArgs = {
  name: Scalars['String'];
};


/** The query root of GitHub's GraphQL interface. */
export type GraphQLQueryUserArgs = {
  login: Scalars['String'];
};

/** Represents the client's rate limit. */
export type GraphQLRateLimit = {
  readonly __typename?: 'RateLimit';
  /** The point cost for the current query counting against the rate limit. */
  readonly cost: Scalars['Int'];
  /** The maximum number of points the client is permitted to consume in a 60 minute window. */
  readonly limit: Scalars['Int'];
  /** The maximum number of nodes this query may return */
  readonly nodeCount: Scalars['Int'];
  /** The number of points remaining in the current rate limit window. */
  readonly remaining: Scalars['Int'];
  /** The time at which the current rate limit window resets in UTC epoch seconds. */
  readonly resetAt: Scalars['DateTime'];
  /** The number of points used in the current rate limit window. */
  readonly used: Scalars['Int'];
};

/** Represents a subject that can be reacted on. */
export type GraphQLReactable = {
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
};


/** Represents a subject that can be reacted on. */
export type GraphQLReactableReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};

/** The connection type for User. */
export type GraphQLReactingUserConnection = {
  readonly __typename?: 'ReactingUserConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLReactingUserEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents a user that's made a reaction. */
export type GraphQLReactingUserEdge = {
  readonly __typename?: 'ReactingUserEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  readonly node: GraphQLUser;
  /** The moment when the user made the reaction. */
  readonly reactedAt: Scalars['DateTime'];
};

/** An emoji reaction to a particular piece of content. */
export type GraphQLReaction = GraphQLNode & {
  readonly __typename?: 'Reaction';
  /** Identifies the emoji reaction. */
  readonly content: GraphQLReactionContent;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The reactable piece of content */
  readonly reactable: GraphQLReactable;
  /** Identifies the user who created this reaction. */
  readonly user: Maybe<GraphQLUser>;
};

/** A list of reactions that have been left on the subject. */
export type GraphQLReactionConnection = {
  readonly __typename?: 'ReactionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLReactionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLReaction>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
  /** Whether or not the authenticated user has left a reaction on the subject. */
  readonly viewerHasReacted: Scalars['Boolean'];
};

/** Emojis that can be attached to Issues, Pull Requests and Comments. */
export enum GraphQLReactionContent {
  /** Represents the `:+1:` emoji. */
  THUMBS_UP = 'THUMBS_UP',
  /** Represents the `:-1:` emoji. */
  THUMBS_DOWN = 'THUMBS_DOWN',
  /** Represents the `:laugh:` emoji. */
  LAUGH = 'LAUGH',
  /** Represents the `:hooray:` emoji. */
  HOORAY = 'HOORAY',
  /** Represents the `:confused:` emoji. */
  CONFUSED = 'CONFUSED',
  /** Represents the `:heart:` emoji. */
  HEART = 'HEART',
  /** Represents the `:rocket:` emoji. */
  ROCKET = 'ROCKET',
  /** Represents the `:eyes:` emoji. */
  EYES = 'EYES'
}

/** An edge in a connection. */
export type GraphQLReactionEdge = {
  readonly __typename?: 'ReactionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLReaction>;
};

/** A group of emoji reactions to a particular piece of content. */
export type GraphQLReactionGroup = {
  readonly __typename?: 'ReactionGroup';
  /** Identifies the emoji reaction. */
  readonly content: GraphQLReactionContent;
  /** Identifies when the reaction was created. */
  readonly createdAt: Maybe<Scalars['DateTime']>;
  /** Reactors to the reaction subject with the emotion represented by this reaction group. */
  readonly reactors: GraphQLReactorConnection;
  /** The subject that was reacted to. */
  readonly subject: GraphQLReactable;
  /**
   * Users who have reacted to the reaction subject with the emotion represented by this reaction group
   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.
   */
  readonly users: GraphQLReactingUserConnection;
  /** Whether or not the authenticated user has left a reaction on the subject. */
  readonly viewerHasReacted: Scalars['Boolean'];
};


/** A group of emoji reactions to a particular piece of content. */
export type GraphQLReactionGroupReactorsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A group of emoji reactions to a particular piece of content. */
export type GraphQLReactionGroupUsersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Ways in which lists of reactions can be ordered upon return. */
export type GraphQLReactionOrder = {
  /** The field in which to order reactions by. */
  readonly field: GraphQLReactionOrderField;
  /** The direction in which to order reactions by the specified field. */
  readonly direction: GraphQLOrderDirection;
};

/** A list of fields that reactions can be ordered by. */
export enum GraphQLReactionOrderField {
  /** Allows ordering a list of reactions by when they were created. */
  CREATED_AT = 'CREATED_AT'
}

/** Types that can be assigned to reactions. */
export type GraphQLReactor = GraphQLBot | GraphQLMannequin | GraphQLOrganization | GraphQLUser;

/** The connection type for Reactor. */
export type GraphQLReactorConnection = {
  readonly __typename?: 'ReactorConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLReactorEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLReactor>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents an author of a reaction. */
export type GraphQLReactorEdge = {
  readonly __typename?: 'ReactorEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The author of the reaction. */
  readonly node: GraphQLReactor;
  /** The moment when the user made the reaction. */
  readonly reactedAt: Scalars['DateTime'];
};

/** Represents a 'ready_for_review' event on a given pull request. */
export type GraphQLReadyForReviewEvent = GraphQLNode & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'ReadyForReviewEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
  /** The HTTP path for this ready for review event. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this ready for review event. */
  readonly url: Scalars['URI'];
};

/** Represents a Git reference. */
export type GraphQLRef = GraphQLNode & {
  readonly __typename?: 'Ref';
  /** A list of pull requests with this ref as the head ref. */
  readonly associatedPullRequests: GraphQLPullRequestConnection;
  /** Branch protection rules for this ref */
  readonly branchProtectionRule: Maybe<GraphQLBranchProtectionRule>;
  readonly id: Scalars['ID'];
  /** The ref name. */
  readonly name: Scalars['String'];
  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */
  readonly prefix: Scalars['String'];
  /** Branch protection rules that are viewable by non-admins */
  readonly refUpdateRule: Maybe<GraphQLRefUpdateRule>;
  /** The repository the ref belongs to. */
  readonly repository: GraphQLRepository;
  /** The object the ref points to. Returns null when object does not exist. */
  readonly target: Maybe<GraphQLGitObject>;
};


/** Represents a Git reference. */
export type GraphQLRefAssociatedPullRequestsArgs = {
  states: Maybe<ReadonlyArray<GraphQLPullRequestState>>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  headRefName: Maybe<Scalars['String']>;
  baseRefName: Maybe<Scalars['String']>;
  orderBy: Maybe<GraphQLIssueOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for Ref. */
export type GraphQLRefConnection = {
  readonly __typename?: 'RefConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLRefEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLRef>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLRefEdge = {
  readonly __typename?: 'RefEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLRef>;
};

/** Ways in which lists of git refs can be ordered upon return. */
export type GraphQLRefOrder = {
  /** The field in which to order refs by. */
  readonly field: GraphQLRefOrderField;
  /** The direction in which to order refs by the specified field. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which ref connections can be ordered. */
export enum GraphQLRefOrderField {
  /** Order refs by underlying commit date if the ref prefix is refs/tags/ */
  TAG_COMMIT_DATE = 'TAG_COMMIT_DATE',
  /** Order refs by their alphanumeric name */
  ALPHABETICAL = 'ALPHABETICAL'
}

/** A ref update rules for a viewer. */
export type GraphQLRefUpdateRule = {
  readonly __typename?: 'RefUpdateRule';
  /** Can this branch be deleted. */
  readonly allowsDeletions: Scalars['Boolean'];
  /** Are force pushes allowed on this branch. */
  readonly allowsForcePushes: Scalars['Boolean'];
  /** Can matching branches be created. */
  readonly blocksCreations: Scalars['Boolean'];
  /** Identifies the protection rule pattern. */
  readonly pattern: Scalars['String'];
  /** Number of approving reviews required to update matching branches. */
  readonly requiredApprovingReviewCount: Maybe<Scalars['Int']>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  readonly requiredStatusCheckContexts: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  /** Are reviews from code owners required to update matching branches. */
  readonly requiresCodeOwnerReviews: Scalars['Boolean'];
  /** Are conversations required to be resolved before merging. */
  readonly requiresConversationResolution: Scalars['Boolean'];
  /** Are merge commits prohibited from being pushed to this branch. */
  readonly requiresLinearHistory: Scalars['Boolean'];
  /** Are commits required to be signed. */
  readonly requiresSignatures: Scalars['Boolean'];
  /** Is the viewer allowed to dismiss reviews. */
  readonly viewerAllowedToDismissReviews: Scalars['Boolean'];
  /** Can the viewer push to the branch */
  readonly viewerCanPush: Scalars['Boolean'];
};

/** Represents a 'referenced' event on a given `ReferencedSubject`. */
export type GraphQLReferencedEvent = GraphQLNode & {
  readonly __typename?: 'ReferencedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the commit associated with the 'referenced' event. */
  readonly commit: Maybe<GraphQLCommit>;
  /** Identifies the repository associated with the 'referenced' event. */
  readonly commitRepository: GraphQLRepository;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Reference originated in a different repository. */
  readonly isCrossRepository: Scalars['Boolean'];
  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */
  readonly isDirectReference: Scalars['Boolean'];
  /** Object referenced by event. */
  readonly subject: GraphQLReferencedSubject;
};

/** Any referencable object */
export type GraphQLReferencedSubject = GraphQLIssue | GraphQLPullRequest;

/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export type GraphQLRegenerateEnterpriseIdentityProviderRecoveryCodesInput = {
  /** The ID of the enterprise on which to set an identity provider. */
  readonly enterpriseId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */
export type GraphQLRegenerateEnterpriseIdentityProviderRecoveryCodesPayload = {
  readonly __typename?: 'RegenerateEnterpriseIdentityProviderRecoveryCodesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The identity provider for the enterprise. */
  readonly identityProvider: Maybe<GraphQLEnterpriseIdentityProvider>;
};

/** Autogenerated input type of RegenerateVerifiableDomainToken */
export type GraphQLRegenerateVerifiableDomainTokenInput = {
  /** The ID of the verifiable domain to regenerate the verification token of. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RegenerateVerifiableDomainToken */
export type GraphQLRegenerateVerifiableDomainTokenPayload = {
  readonly __typename?: 'RegenerateVerifiableDomainTokenPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The verification token that was generated. */
  readonly verificationToken: Maybe<Scalars['String']>;
};

/** Autogenerated input type of RejectDeployments */
export type GraphQLRejectDeploymentsInput = {
  /** The node ID of the workflow run containing the pending deployments. */
  readonly workflowRunId: Scalars['ID'];
  /** The ids of environments to reject deployments */
  readonly environmentIds: ReadonlyArray<Scalars['ID']>;
  /** Optional comment for rejecting deployments */
  readonly comment: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RejectDeployments */
export type GraphQLRejectDeploymentsPayload = {
  readonly __typename?: 'RejectDeploymentsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The affected deployments. */
  readonly deployments: Maybe<ReadonlyArray<GraphQLDeployment>>;
};

/** A release contains the content for a release. */
export type GraphQLRelease = GraphQLNode & GraphQLUniformResourceLocatable & GraphQLReactable & {
  readonly __typename?: 'Release';
  /** The author of the release */
  readonly author: Maybe<GraphQLUser>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The description of the release. */
  readonly description: Maybe<Scalars['String']>;
  /** The description of this release rendered to HTML. */
  readonly descriptionHTML: Maybe<Scalars['HTML']>;
  readonly id: Scalars['ID'];
  /** Whether or not the release is a draft */
  readonly isDraft: Scalars['Boolean'];
  /** Whether or not the release is the latest releast */
  readonly isLatest: Scalars['Boolean'];
  /** Whether or not the release is a prerelease */
  readonly isPrerelease: Scalars['Boolean'];
  /** A list of users mentioned in the release description */
  readonly mentions: Maybe<GraphQLUserConnection>;
  /** The title of the release. */
  readonly name: Maybe<Scalars['String']>;
  /** Identifies the date and time when the release was created. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** List of releases assets which are dependent on this release. */
  readonly releaseAssets: GraphQLReleaseAssetConnection;
  /** The repository that the release belongs to. */
  readonly repository: GraphQLRepository;
  /** The HTTP path for this issue */
  readonly resourcePath: Scalars['URI'];
  /** A description of the release, rendered to HTML without any links in it. */
  readonly shortDescriptionHTML: Maybe<Scalars['HTML']>;
  /** The Git tag the release points to */
  readonly tag: Maybe<GraphQLRef>;
  /** The tag commit for this release. */
  readonly tagCommit: Maybe<GraphQLCommit>;
  /** The name of the release's Git tag */
  readonly tagName: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this issue */
  readonly url: Scalars['URI'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
};


/** A release contains the content for a release. */
export type GraphQLReleaseMentionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A release contains the content for a release. */
export type GraphQLReleaseReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** A release contains the content for a release. */
export type GraphQLReleaseReleaseAssetsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  name: Maybe<Scalars['String']>;
};


/** A release contains the content for a release. */
export type GraphQLReleaseShortDescriptionHtmlArgs = {
  limit?: Maybe<Scalars['Int']>;
};

/** A release asset contains the content for a release asset. */
export type GraphQLReleaseAsset = GraphQLNode & {
  readonly __typename?: 'ReleaseAsset';
  /** The asset's content-type */
  readonly contentType: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The number of times this asset was downloaded */
  readonly downloadCount: Scalars['Int'];
  /** Identifies the URL where you can download the release asset via the browser. */
  readonly downloadUrl: Scalars['URI'];
  readonly id: Scalars['ID'];
  /** Identifies the title of the release asset. */
  readonly name: Scalars['String'];
  /** Release that the asset is associated with */
  readonly release: Maybe<GraphQLRelease>;
  /** The size (in bytes) of the asset */
  readonly size: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The user that performed the upload */
  readonly uploadedBy: GraphQLUser;
  /** Identifies the URL of the release asset. */
  readonly url: Scalars['URI'];
};

/** The connection type for ReleaseAsset. */
export type GraphQLReleaseAssetConnection = {
  readonly __typename?: 'ReleaseAssetConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLReleaseAssetEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLReleaseAsset>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLReleaseAssetEdge = {
  readonly __typename?: 'ReleaseAssetEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLReleaseAsset>;
};

/** The connection type for Release. */
export type GraphQLReleaseConnection = {
  readonly __typename?: 'ReleaseConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLReleaseEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLRelease>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLReleaseEdge = {
  readonly __typename?: 'ReleaseEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLRelease>;
};

/** Ways in which lists of releases can be ordered upon return. */
export type GraphQLReleaseOrder = {
  /** The field in which to order releases by. */
  readonly field: GraphQLReleaseOrderField;
  /** The direction in which to order releases by the specified field. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which release connections can be ordered. */
export enum GraphQLReleaseOrderField {
  /** Order releases by creation time */
  CREATED_AT = 'CREATED_AT',
  /** Order releases alphabetically by name */
  NAME = 'NAME'
}

/** Autogenerated input type of RemoveAssigneesFromAssignable */
export type GraphQLRemoveAssigneesFromAssignableInput = {
  /** The id of the assignable object to remove assignees from. */
  readonly assignableId: Scalars['ID'];
  /** The id of users to remove as assignees. */
  readonly assigneeIds: ReadonlyArray<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveAssigneesFromAssignable */
export type GraphQLRemoveAssigneesFromAssignablePayload = {
  readonly __typename?: 'RemoveAssigneesFromAssignablePayload';
  /** The item that was unassigned. */
  readonly assignable: Maybe<GraphQLAssignable>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of RemoveEnterpriseAdmin */
export type GraphQLRemoveEnterpriseAdminInput = {
  /** The Enterprise ID from which to remove the administrator. */
  readonly enterpriseId: Scalars['ID'];
  /** The login of the user to remove as an administrator. */
  readonly login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveEnterpriseAdmin */
export type GraphQLRemoveEnterpriseAdminPayload = {
  readonly __typename?: 'RemoveEnterpriseAdminPayload';
  /** The user who was removed as an administrator. */
  readonly admin: Maybe<GraphQLUser>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated enterprise. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of removing an administrator. */
  readonly message: Maybe<Scalars['String']>;
  /** The viewer performing the mutation. */
  readonly viewer: Maybe<GraphQLUser>;
};

/** Autogenerated input type of RemoveEnterpriseIdentityProvider */
export type GraphQLRemoveEnterpriseIdentityProviderInput = {
  /** The ID of the enterprise from which to remove the identity provider. */
  readonly enterpriseId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveEnterpriseIdentityProvider */
export type GraphQLRemoveEnterpriseIdentityProviderPayload = {
  readonly __typename?: 'RemoveEnterpriseIdentityProviderPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The identity provider that was removed from the enterprise. */
  readonly identityProvider: Maybe<GraphQLEnterpriseIdentityProvider>;
};

/** Autogenerated input type of RemoveEnterpriseOrganization */
export type GraphQLRemoveEnterpriseOrganizationInput = {
  /** The ID of the enterprise from which the organization should be removed. */
  readonly enterpriseId: Scalars['ID'];
  /** The ID of the organization to remove from the enterprise. */
  readonly organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveEnterpriseOrganization */
export type GraphQLRemoveEnterpriseOrganizationPayload = {
  readonly __typename?: 'RemoveEnterpriseOrganizationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated enterprise. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** The organization that was removed from the enterprise. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The viewer performing the mutation. */
  readonly viewer: Maybe<GraphQLUser>;
};

/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */
export type GraphQLRemoveEnterpriseSupportEntitlementInput = {
  /** The ID of the Enterprise which the admin belongs to. */
  readonly enterpriseId: Scalars['ID'];
  /** The login of a member who will lose the support entitlement. */
  readonly login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */
export type GraphQLRemoveEnterpriseSupportEntitlementPayload = {
  readonly __typename?: 'RemoveEnterpriseSupportEntitlementPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** A message confirming the result of removing the support entitlement. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of RemoveLabelsFromLabelable */
export type GraphQLRemoveLabelsFromLabelableInput = {
  /** The id of the Labelable to remove labels from. */
  readonly labelableId: Scalars['ID'];
  /** The ids of labels to remove. */
  readonly labelIds: ReadonlyArray<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveLabelsFromLabelable */
export type GraphQLRemoveLabelsFromLabelablePayload = {
  readonly __typename?: 'RemoveLabelsFromLabelablePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The Labelable the labels were removed from. */
  readonly labelable: Maybe<GraphQLLabelable>;
};

/** Autogenerated input type of RemoveOutsideCollaborator */
export type GraphQLRemoveOutsideCollaboratorInput = {
  /** The ID of the outside collaborator to remove. */
  readonly userId: Scalars['ID'];
  /** The ID of the organization to remove the outside collaborator from. */
  readonly organizationId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveOutsideCollaborator */
export type GraphQLRemoveOutsideCollaboratorPayload = {
  readonly __typename?: 'RemoveOutsideCollaboratorPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The user that was removed as an outside collaborator. */
  readonly removedUser: Maybe<GraphQLUser>;
};

/** Autogenerated input type of RemoveReaction */
export type GraphQLRemoveReactionInput = {
  /** The Node ID of the subject to modify. */
  readonly subjectId: Scalars['ID'];
  /** The name of the emoji reaction to remove. */
  readonly content: GraphQLReactionContent;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveReaction */
export type GraphQLRemoveReactionPayload = {
  readonly __typename?: 'RemoveReactionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The reaction object. */
  readonly reaction: Maybe<GraphQLReaction>;
  /** The reactable subject. */
  readonly subject: Maybe<GraphQLReactable>;
};

/** Autogenerated input type of RemoveStar */
export type GraphQLRemoveStarInput = {
  /** The Starrable ID to unstar. */
  readonly starrableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveStar */
export type GraphQLRemoveStarPayload = {
  readonly __typename?: 'RemoveStarPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The starrable. */
  readonly starrable: Maybe<GraphQLStarrable>;
};

/** Autogenerated input type of RemoveUpvote */
export type GraphQLRemoveUpvoteInput = {
  /** The Node ID of the discussion or comment to remove upvote. */
  readonly subjectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RemoveUpvote */
export type GraphQLRemoveUpvotePayload = {
  readonly __typename?: 'RemoveUpvotePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The votable subject. */
  readonly subject: Maybe<GraphQLVotable>;
};

/** Represents a 'removed_from_project' event on a given issue or pull request. */
export type GraphQLRemovedFromProjectEvent = GraphQLNode & {
  readonly __typename?: 'RemovedFromProjectEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
};

/** Represents a 'renamed' event on a given issue or pull request */
export type GraphQLRenamedTitleEvent = GraphQLNode & {
  readonly __typename?: 'RenamedTitleEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the current title of the issue or pull request. */
  readonly currentTitle: Scalars['String'];
  readonly id: Scalars['ID'];
  /** Identifies the previous title of the issue or pull request. */
  readonly previousTitle: Scalars['String'];
  /** Subject that was renamed. */
  readonly subject: GraphQLRenamedTitleSubject;
};

/** An object which has a renamable title */
export type GraphQLRenamedTitleSubject = GraphQLIssue | GraphQLPullRequest;

/** Autogenerated input type of ReopenIssue */
export type GraphQLReopenIssueInput = {
  /** ID of the issue to be opened. */
  readonly issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ReopenIssue */
export type GraphQLReopenIssuePayload = {
  readonly __typename?: 'ReopenIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The issue that was opened. */
  readonly issue: Maybe<GraphQLIssue>;
};

/** Autogenerated input type of ReopenPullRequest */
export type GraphQLReopenPullRequestInput = {
  /** ID of the pull request to be reopened. */
  readonly pullRequestId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ReopenPullRequest */
export type GraphQLReopenPullRequestPayload = {
  readonly __typename?: 'ReopenPullRequestPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The pull request that was reopened. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Represents a 'reopened' event on any `Closable`. */
export type GraphQLReopenedEvent = GraphQLNode & {
  readonly __typename?: 'ReopenedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Object that was reopened. */
  readonly closable: GraphQLClosable;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
};

/** Audit log entry for a repo.access event. */
export type GraphQLRepoAccessAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoAccessAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
  /** The visibility of the repository */
  readonly visibility: Maybe<GraphQLRepoAccessAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum GraphQLRepoAccessAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  INTERNAL = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  PRIVATE = 'PRIVATE',
  /** The repository is visible to everyone. */
  PUBLIC = 'PUBLIC'
}

/** Audit log entry for a repo.add_member event. */
export type GraphQLRepoAddMemberAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoAddMemberAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
  /** The visibility of the repository */
  readonly visibility: Maybe<GraphQLRepoAddMemberAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum GraphQLRepoAddMemberAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  INTERNAL = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  PRIVATE = 'PRIVATE',
  /** The repository is visible to everyone. */
  PUBLIC = 'PUBLIC'
}

/** Audit log entry for a repo.add_topic event. */
export type GraphQLRepoAddTopicAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLRepositoryAuditEntryData & GraphQLOrganizationAuditEntryData & GraphQLTopicAuditEntryData & {
  readonly __typename?: 'RepoAddTopicAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The name of the topic added to the repository */
  readonly topic: Maybe<GraphQLTopic>;
  /** The name of the topic added to the repository */
  readonly topicName: Maybe<Scalars['String']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.archived event. */
export type GraphQLRepoArchivedAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLRepositoryAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'RepoArchivedAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
  /** The visibility of the repository */
  readonly visibility: Maybe<GraphQLRepoArchivedAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum GraphQLRepoArchivedAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  INTERNAL = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  PRIVATE = 'PRIVATE',
  /** The repository is visible to everyone. */
  PUBLIC = 'PUBLIC'
}

/** Audit log entry for a repo.change_merge_setting event. */
export type GraphQLRepoChangeMergeSettingAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLRepositoryAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'RepoChangeMergeSettingAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** Whether the change was to enable (true) or disable (false) the merge type */
  readonly isEnabled: Maybe<Scalars['Boolean']>;
  /** The merge method affected by the change */
  readonly mergeType: Maybe<GraphQLRepoChangeMergeSettingAuditEntryMergeType>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The merge options available for pull requests to this repository. */
export enum GraphQLRepoChangeMergeSettingAuditEntryMergeType {
  /** The pull request is added to the base branch in a merge commit. */
  MERGE = 'MERGE',
  /** Commits from the pull request are added onto the base branch individually without a merge commit. */
  REBASE = 'REBASE',
  /** The pull request's commits are squashed into a single commit before they are merged to the base branch. */
  SQUASH = 'SQUASH'
}

/** Audit log entry for a repo.config.disable_anonymous_git_access event. */
export type GraphQLRepoConfigDisableAnonymousGitAccessAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigDisableAnonymousGitAccessAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.config.disable_collaborators_only event. */
export type GraphQLRepoConfigDisableCollaboratorsOnlyAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigDisableCollaboratorsOnlyAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.config.disable_contributors_only event. */
export type GraphQLRepoConfigDisableContributorsOnlyAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigDisableContributorsOnlyAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */
export type GraphQLRepoConfigDisableSockpuppetDisallowedAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigDisableSockpuppetDisallowedAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.config.enable_anonymous_git_access event. */
export type GraphQLRepoConfigEnableAnonymousGitAccessAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigEnableAnonymousGitAccessAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.config.enable_collaborators_only event. */
export type GraphQLRepoConfigEnableCollaboratorsOnlyAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigEnableCollaboratorsOnlyAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.config.enable_contributors_only event. */
export type GraphQLRepoConfigEnableContributorsOnlyAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigEnableContributorsOnlyAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */
export type GraphQLRepoConfigEnableSockpuppetDisallowedAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigEnableSockpuppetDisallowedAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.config.lock_anonymous_git_access event. */
export type GraphQLRepoConfigLockAnonymousGitAccessAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigLockAnonymousGitAccessAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */
export type GraphQLRepoConfigUnlockAnonymousGitAccessAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoConfigUnlockAnonymousGitAccessAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repo.create event. */
export type GraphQLRepoCreateAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLRepositoryAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'RepoCreateAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The name of the parent repository for this forked repository. */
  readonly forkParentName: Maybe<Scalars['String']>;
  /** The name of the root repository for this network. */
  readonly forkSourceName: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
  /** The visibility of the repository */
  readonly visibility: Maybe<GraphQLRepoCreateAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum GraphQLRepoCreateAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  INTERNAL = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  PRIVATE = 'PRIVATE',
  /** The repository is visible to everyone. */
  PUBLIC = 'PUBLIC'
}

/** Audit log entry for a repo.destroy event. */
export type GraphQLRepoDestroyAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLRepositoryAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'RepoDestroyAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
  /** The visibility of the repository */
  readonly visibility: Maybe<GraphQLRepoDestroyAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum GraphQLRepoDestroyAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  INTERNAL = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  PRIVATE = 'PRIVATE',
  /** The repository is visible to everyone. */
  PUBLIC = 'PUBLIC'
}

/** Audit log entry for a repo.remove_member event. */
export type GraphQLRepoRemoveMemberAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & {
  readonly __typename?: 'RepoRemoveMemberAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
  /** The visibility of the repository */
  readonly visibility: Maybe<GraphQLRepoRemoveMemberAuditEntryVisibility>;
};

/** The privacy of a repository */
export enum GraphQLRepoRemoveMemberAuditEntryVisibility {
  /** The repository is visible only to users in the same business. */
  INTERNAL = 'INTERNAL',
  /** The repository is visible only to those with explicit access. */
  PRIVATE = 'PRIVATE',
  /** The repository is visible to everyone. */
  PUBLIC = 'PUBLIC'
}

/** Audit log entry for a repo.remove_topic event. */
export type GraphQLRepoRemoveTopicAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLRepositoryAuditEntryData & GraphQLOrganizationAuditEntryData & GraphQLTopicAuditEntryData & {
  readonly __typename?: 'RepoRemoveTopicAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The name of the topic added to the repository */
  readonly topic: Maybe<GraphQLTopic>;
  /** The name of the topic added to the repository */
  readonly topicName: Maybe<Scalars['String']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The reasons a piece of content can be reported or minimized. */
export enum GraphQLReportedContentClassifiers {
  /** A spammy piece of content */
  SPAM = 'SPAM',
  /** An abusive or harassing piece of content */
  ABUSE = 'ABUSE',
  /** An irrelevant piece of content */
  OFF_TOPIC = 'OFF_TOPIC',
  /** An outdated piece of content */
  OUTDATED = 'OUTDATED',
  /** A duplicated piece of content */
  DUPLICATE = 'DUPLICATE',
  /** The content has been resolved */
  RESOLVED = 'RESOLVED'
}

/** A repository contains the content for a project. */
export type GraphQLRepository = GraphQLNode & GraphQLProjectOwner & GraphQLPackageOwner & GraphQLSubscribable & GraphQLStarrable & GraphQLUniformResourceLocatable & GraphQLRepositoryInfo & {
  readonly __typename?: 'Repository';
  /** A list of users that can be assigned to issues in this repository. */
  readonly assignableUsers: GraphQLUserConnection;
  /** Whether or not Auto-merge can be enabled on pull requests in this repository. */
  readonly autoMergeAllowed: Scalars['Boolean'];
  /** A list of branch protection rules for this repository. */
  readonly branchProtectionRules: GraphQLBranchProtectionRuleConnection;
  /** Returns the code of conduct for this repository */
  readonly codeOfConduct: Maybe<GraphQLCodeOfConduct>;
  /** Information extracted from the repository's `CODEOWNERS` file. */
  readonly codeowners: Maybe<GraphQLRepositoryCodeowners>;
  /** A list of collaborators associated with the repository. */
  readonly collaborators: Maybe<GraphQLRepositoryCollaboratorConnection>;
  /** A list of commit comments associated with the repository. */
  readonly commitComments: GraphQLCommitCommentConnection;
  /** Returns a list of contact links associated to the repository */
  readonly contactLinks: Maybe<ReadonlyArray<GraphQLRepositoryContactLink>>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The Ref associated with the repository's default branch. */
  readonly defaultBranchRef: Maybe<GraphQLRef>;
  /** Whether or not branches are automatically deleted when merged in this repository. */
  readonly deleteBranchOnMerge: Scalars['Boolean'];
  /** A list of deploy keys that are on this repository. */
  readonly deployKeys: GraphQLDeployKeyConnection;
  /** Deployments associated with the repository */
  readonly deployments: GraphQLDeploymentConnection;
  /** The description of the repository. */
  readonly description: Maybe<Scalars['String']>;
  /** The description of the repository rendered to HTML. */
  readonly descriptionHTML: Scalars['HTML'];
  /** Returns a single discussion from the current repository by number. */
  readonly discussion: Maybe<GraphQLDiscussion>;
  /** A list of discussion categories that are available in the repository. */
  readonly discussionCategories: GraphQLDiscussionCategoryConnection;
  /** A list of discussions that have been opened in the repository. */
  readonly discussions: GraphQLDiscussionConnection;
  /** The number of kilobytes this repository occupies on disk. */
  readonly diskUsage: Maybe<Scalars['Int']>;
  /** Returns a single active environment from the current repository by name. */
  readonly environment: Maybe<GraphQLEnvironment>;
  /** A list of environments that are in this repository. */
  readonly environments: GraphQLEnvironmentConnection;
  /** Returns how many forks there are of this repository in the whole network. */
  readonly forkCount: Scalars['Int'];
  /** Whether this repository allows forks. */
  readonly forkingAllowed: Scalars['Boolean'];
  /** A list of direct forked repositories. */
  readonly forks: GraphQLRepositoryConnection;
  /** The funding links for this repository */
  readonly fundingLinks: ReadonlyArray<GraphQLFundingLink>;
  /** Indicates if the repository has issues feature enabled. */
  readonly hasIssuesEnabled: Scalars['Boolean'];
  /** Indicates if the repository has the Projects feature enabled. */
  readonly hasProjectsEnabled: Scalars['Boolean'];
  /** Indicates if the repository has wiki feature enabled. */
  readonly hasWikiEnabled: Scalars['Boolean'];
  /** The repository's URL. */
  readonly homepageUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The interaction ability settings for this repository. */
  readonly interactionAbility: Maybe<GraphQLRepositoryInteractionAbility>;
  /** Indicates if the repository is unmaintained. */
  readonly isArchived: Scalars['Boolean'];
  /** Returns true if blank issue creation is allowed */
  readonly isBlankIssuesEnabled: Scalars['Boolean'];
  /** Returns whether or not this repository disabled. */
  readonly isDisabled: Scalars['Boolean'];
  /** Returns whether or not this repository is empty. */
  readonly isEmpty: Scalars['Boolean'];
  /** Identifies if the repository is a fork. */
  readonly isFork: Scalars['Boolean'];
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  readonly isInOrganization: Scalars['Boolean'];
  /** Indicates if the repository has been locked or not. */
  readonly isLocked: Scalars['Boolean'];
  /** Identifies if the repository is a mirror. */
  readonly isMirror: Scalars['Boolean'];
  /** Identifies if the repository is private or internal. */
  readonly isPrivate: Scalars['Boolean'];
  /** Returns true if this repository has a security policy */
  readonly isSecurityPolicyEnabled: Maybe<Scalars['Boolean']>;
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  readonly isTemplate: Scalars['Boolean'];
  /** Is this repository a user configuration repository? */
  readonly isUserConfigurationRepository: Scalars['Boolean'];
  /** Returns a single issue from the current repository by number. */
  readonly issue: Maybe<GraphQLIssue>;
  /** Returns a single issue-like object from the current repository by number. */
  readonly issueOrPullRequest: Maybe<GraphQLIssueOrPullRequest>;
  /** Returns a list of issue templates associated to the repository */
  readonly issueTemplates: Maybe<ReadonlyArray<GraphQLIssueTemplate>>;
  /** A list of issues that have been opened in the repository. */
  readonly issues: GraphQLIssueConnection;
  /** Returns a single label by name */
  readonly label: Maybe<GraphQLLabel>;
  /** A list of labels associated with the repository. */
  readonly labels: Maybe<GraphQLLabelConnection>;
  /** A list containing a breakdown of the language composition of the repository. */
  readonly languages: Maybe<GraphQLLanguageConnection>;
  /** Get the latest release for the repository if one exists. */
  readonly latestRelease: Maybe<GraphQLRelease>;
  /** The license associated with the repository */
  readonly licenseInfo: Maybe<GraphQLLicense>;
  /** The reason the repository has been locked. */
  readonly lockReason: Maybe<GraphQLRepositoryLockReason>;
  /** A list of Users that can be mentioned in the context of the repository. */
  readonly mentionableUsers: GraphQLUserConnection;
  /** Whether or not PRs are merged with a merge commit on this repository. */
  readonly mergeCommitAllowed: Scalars['Boolean'];
  /** Returns a single milestone from the current repository by number. */
  readonly milestone: Maybe<GraphQLMilestone>;
  /** A list of milestones associated with the repository. */
  readonly milestones: Maybe<GraphQLMilestoneConnection>;
  /** The repository's original mirror URL. */
  readonly mirrorUrl: Maybe<Scalars['URI']>;
  /** The name of the repository. */
  readonly name: Scalars['String'];
  /** The repository's name with owner. */
  readonly nameWithOwner: Scalars['String'];
  /** A Git object in the repository */
  readonly object: Maybe<GraphQLGitObject>;
  /** The image used to represent this repository in Open Graph data. */
  readonly openGraphImageUrl: Scalars['URI'];
  /** The User owner of the repository. */
  readonly owner: GraphQLRepositoryOwner;
  /** A list of packages under the owner. */
  readonly packages: GraphQLPackageConnection;
  /** The repository parent, if this is a fork. */
  readonly parent: Maybe<GraphQLRepository>;
  /** A list of discussions that have been pinned in this repository. */
  readonly pinnedDiscussions: GraphQLPinnedDiscussionConnection;
  /** A list of pinned issues for this repository. */
  readonly pinnedIssues: Maybe<GraphQLPinnedIssueConnection>;
  /** The primary language of the repository's code. */
  readonly primaryLanguage: Maybe<GraphQLLanguage>;
  /** Find project by number. */
  readonly project: Maybe<GraphQLProject>;
  /** Finds and returns the Project (beta) according to the provided Project (beta) number. */
  readonly projectNext: Maybe<GraphQLProjectNext>;
  /** A list of projects under the owner. */
  readonly projects: GraphQLProjectConnection;
  /** List of projects (beta) linked to this repository. */
  readonly projectsNext: GraphQLProjectNextConnection;
  /** The HTTP path listing the repository's projects */
  readonly projectsResourcePath: Scalars['URI'];
  /** The HTTP URL listing the repository's projects */
  readonly projectsUrl: Scalars['URI'];
  /** Returns a single pull request from the current repository by number. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
  /** Returns a list of pull request templates associated to the repository */
  readonly pullRequestTemplates: Maybe<ReadonlyArray<GraphQLPullRequestTemplate>>;
  /** A list of pull requests that have been opened in the repository. */
  readonly pullRequests: GraphQLPullRequestConnection;
  /** Identifies when the repository was last pushed to. */
  readonly pushedAt: Maybe<Scalars['DateTime']>;
  /** Whether or not rebase-merging is enabled on this repository. */
  readonly rebaseMergeAllowed: Scalars['Boolean'];
  /** Fetch a given ref from the repository */
  readonly ref: Maybe<GraphQLRef>;
  /** Fetch a list of refs from the repository */
  readonly refs: Maybe<GraphQLRefConnection>;
  /** Lookup a single release given various criteria. */
  readonly release: Maybe<GraphQLRelease>;
  /** List of releases which are dependent on this repository. */
  readonly releases: GraphQLReleaseConnection;
  /** A list of applied repository-topic associations for this repository. */
  readonly repositoryTopics: GraphQLRepositoryTopicConnection;
  /** The HTTP path for this repository */
  readonly resourcePath: Scalars['URI'];
  /** The security policy URL. */
  readonly securityPolicyUrl: Maybe<Scalars['URI']>;
  /** A description of the repository, rendered to HTML without any links in it. */
  readonly shortDescriptionHTML: Scalars['HTML'];
  /** Whether or not squash-merging is enabled on this repository. */
  readonly squashMergeAllowed: Scalars['Boolean'];
  /** The SSH URL to clone this repository */
  readonly sshUrl: Scalars['GitSSHRemote'];
  /** Returns a count of how many stargazers there are on this object */
  readonly stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  readonly stargazers: GraphQLStargazerConnection;
  /** Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. */
  readonly submodules: GraphQLSubmoduleConnection;
  /** Temporary authentication token for cloning this repository. */
  readonly tempCloneToken: Maybe<Scalars['String']>;
  /** The repository from which this repository was generated, if any. */
  readonly templateRepository: Maybe<GraphQLRepository>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this repository */
  readonly url: Scalars['URI'];
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  readonly usesCustomOpenGraphImage: Scalars['Boolean'];
  /** Indicates whether the viewer has admin permissions on this repository. */
  readonly viewerCanAdminister: Scalars['Boolean'];
  /** Can the current viewer create new projects on this owner. */
  readonly viewerCanCreateProjects: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  readonly viewerCanSubscribe: Scalars['Boolean'];
  /** Indicates whether the viewer can update the topics of this repository. */
  readonly viewerCanUpdateTopics: Scalars['Boolean'];
  /** The last commit email for the viewer. */
  readonly viewerDefaultCommitEmail: Maybe<Scalars['String']>;
  /** The last used merge method by the viewer or the default for the repository. */
  readonly viewerDefaultMergeMethod: GraphQLPullRequestMergeMethod;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  readonly viewerHasStarred: Scalars['Boolean'];
  /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */
  readonly viewerPermission: Maybe<GraphQLRepositoryPermission>;
  /** A list of emails this viewer can commit with. */
  readonly viewerPossibleCommitEmails: Maybe<ReadonlyArray<Scalars['String']>>;
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  readonly viewerSubscription: Maybe<GraphQLSubscriptionState>;
  /** Indicates the repository's visibility level. */
  readonly visibility: GraphQLRepositoryVisibility;
  /** A list of vulnerability alerts that are on this repository. */
  readonly vulnerabilityAlerts: Maybe<GraphQLRepositoryVulnerabilityAlertConnection>;
  /** A list of users watching the repository. */
  readonly watchers: GraphQLUserConnection;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryAssignableUsersArgs = {
  query: Maybe<Scalars['String']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryBranchProtectionRulesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryCodeownersArgs = {
  refName: Maybe<Scalars['String']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryCollaboratorsArgs = {
  affiliation: Maybe<GraphQLCollaboratorAffiliation>;
  query: Maybe<Scalars['String']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryCommitCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryDeployKeysArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryDeploymentsArgs = {
  environments: Maybe<ReadonlyArray<Scalars['String']>>;
  orderBy?: Maybe<GraphQLDeploymentOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryDiscussionArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryDiscussionCategoriesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  filterByAssignable?: Maybe<Scalars['Boolean']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryDiscussionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  categoryId?: Maybe<Scalars['ID']>;
  orderBy?: Maybe<GraphQLDiscussionOrder>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryEnvironmentArgs = {
  name: Scalars['String'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryEnvironmentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryForksArgs = {
  privacy: Maybe<GraphQLRepositoryPrivacy>;
  orderBy: Maybe<GraphQLRepositoryOrder>;
  affiliations: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  ownerAffiliations?: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  isLocked: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryIssueArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryIssueOrPullRequestArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryIssuesArgs = {
  orderBy: Maybe<GraphQLIssueOrder>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  states: Maybe<ReadonlyArray<GraphQLIssueState>>;
  filterBy: Maybe<GraphQLIssueFilters>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryLabelArgs = {
  name: Scalars['String'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryLabelsArgs = {
  orderBy?: Maybe<GraphQLLabelOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryLanguagesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLLanguageOrder>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryMentionableUsersArgs = {
  query: Maybe<Scalars['String']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryMilestoneArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryMilestonesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  states: Maybe<ReadonlyArray<GraphQLMilestoneState>>;
  orderBy: Maybe<GraphQLMilestoneOrder>;
  query: Maybe<Scalars['String']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryObjectArgs = {
  oid: Maybe<Scalars['GitObjectID']>;
  expression: Maybe<Scalars['String']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryPackagesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  names: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  repositoryId: Maybe<Scalars['ID']>;
  packageType: Maybe<GraphQLPackageType>;
  orderBy?: Maybe<GraphQLPackageOrder>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryPinnedDiscussionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryPinnedIssuesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryProjectArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryProjectNextArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryProjectsArgs = {
  orderBy: Maybe<GraphQLProjectOrder>;
  search: Maybe<Scalars['String']>;
  states: Maybe<ReadonlyArray<GraphQLProjectState>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryProjectsNextArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
  sortBy?: Maybe<GraphQLProjectNextOrderField>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryPullRequestArgs = {
  number: Scalars['Int'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryPullRequestsArgs = {
  states: Maybe<ReadonlyArray<GraphQLPullRequestState>>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  headRefName: Maybe<Scalars['String']>;
  baseRefName: Maybe<Scalars['String']>;
  orderBy: Maybe<GraphQLIssueOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryRefArgs = {
  qualifiedName: Scalars['String'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryRefsArgs = {
  query: Maybe<Scalars['String']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  refPrefix: Scalars['String'];
  direction: Maybe<GraphQLOrderDirection>;
  orderBy: Maybe<GraphQLRefOrder>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryReleaseArgs = {
  tagName: Scalars['String'];
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryReleasesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLReleaseOrder>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryRepositoryTopicsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryShortDescriptionHtmlArgs = {
  limit?: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryStargazersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLStarOrder>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositorySubmodulesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryVulnerabilityAlertsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  states: Maybe<ReadonlyArray<GraphQLRepositoryVulnerabilityAlertState>>;
};


/** A repository contains the content for a project. */
export type GraphQLRepositoryWatchersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The affiliation of a user to a repository */
export enum GraphQLRepositoryAffiliation {
  /** Repositories that are owned by the authenticated user. */
  OWNER = 'OWNER',
  /** Repositories that the user has been added to as a collaborator. */
  COLLABORATOR = 'COLLABORATOR',
  /** Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */
  ORGANIZATION_MEMBER = 'ORGANIZATION_MEMBER'
}

/** Metadata for an audit entry with action repo.* */
export type GraphQLRepositoryAuditEntryData = {
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
};

/** Information extracted from a repository's `CODEOWNERS` file. */
export type GraphQLRepositoryCodeowners = {
  readonly __typename?: 'RepositoryCodeowners';
  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */
  readonly errors: ReadonlyArray<GraphQLRepositoryCodeownersError>;
};

/** An error in a `CODEOWNERS` file. */
export type GraphQLRepositoryCodeownersError = {
  readonly __typename?: 'RepositoryCodeownersError';
  /** The column number where the error occurs. */
  readonly column: Scalars['Int'];
  /** A short string describing the type of error. */
  readonly kind: Scalars['String'];
  /** The line number where the error occurs. */
  readonly line: Scalars['Int'];
  /** A complete description of the error, combining information from other fields. */
  readonly message: Scalars['String'];
  /** The path to the file when the error occurs. */
  readonly path: Scalars['String'];
  /** The content of the line where the error occurs. */
  readonly source: Scalars['String'];
  /** A suggestion of how to fix the error. */
  readonly suggestion: Maybe<Scalars['String']>;
};

/** The connection type for User. */
export type GraphQLRepositoryCollaboratorConnection = {
  readonly __typename?: 'RepositoryCollaboratorConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryCollaboratorEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents a user who is a collaborator of a repository. */
export type GraphQLRepositoryCollaboratorEdge = {
  readonly __typename?: 'RepositoryCollaboratorEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  readonly node: GraphQLUser;
  /** The permission the user has on the repository. */
  readonly permission: GraphQLRepositoryPermission;
  /** A list of sources for the user's access to the repository. */
  readonly permissionSources: Maybe<ReadonlyArray<GraphQLPermissionSource>>;
};

/** A list of repositories owned by the subject. */
export type GraphQLRepositoryConnection = {
  readonly __typename?: 'RepositoryConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLRepository>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
  /** The total size in kilobytes of all repositories in the connection. */
  readonly totalDiskUsage: Scalars['Int'];
};

/** A repository contact link. */
export type GraphQLRepositoryContactLink = {
  readonly __typename?: 'RepositoryContactLink';
  /** The contact link purpose. */
  readonly about: Scalars['String'];
  /** The contact link name. */
  readonly name: Scalars['String'];
  /** The contact link URL. */
  readonly url: Scalars['URI'];
};

/** The reason a repository is listed as 'contributed'. */
export enum GraphQLRepositoryContributionType {
  /** Created a commit */
  COMMIT = 'COMMIT',
  /** Created an issue */
  ISSUE = 'ISSUE',
  /** Created a pull request */
  PULL_REQUEST = 'PULL_REQUEST',
  /** Created the repository */
  REPOSITORY = 'REPOSITORY',
  /** Reviewed a pull request */
  PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW'
}

/** Represents an author of discussions in repositories. */
export type GraphQLRepositoryDiscussionAuthor = {
  /** Discussions this user has started. */
  readonly repositoryDiscussions: GraphQLDiscussionConnection;
};


/** Represents an author of discussions in repositories. */
export type GraphQLRepositoryDiscussionAuthorRepositoryDiscussionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLDiscussionOrder>;
  repositoryId: Maybe<Scalars['ID']>;
  answered?: Maybe<Scalars['Boolean']>;
};

/** Represents an author of discussion comments in repositories. */
export type GraphQLRepositoryDiscussionCommentAuthor = {
  /** Discussion comments this user has authored. */
  readonly repositoryDiscussionComments: GraphQLDiscussionCommentConnection;
};


/** Represents an author of discussion comments in repositories. */
export type GraphQLRepositoryDiscussionCommentAuthorRepositoryDiscussionCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  repositoryId: Maybe<Scalars['ID']>;
  onlyAnswers?: Maybe<Scalars['Boolean']>;
};

/** An edge in a connection. */
export type GraphQLRepositoryEdge = {
  readonly __typename?: 'RepositoryEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLRepository>;
};

/** A subset of repository info. */
export type GraphQLRepositoryInfo = {
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The description of the repository. */
  readonly description: Maybe<Scalars['String']>;
  /** The description of the repository rendered to HTML. */
  readonly descriptionHTML: Scalars['HTML'];
  /** Returns how many forks there are of this repository in the whole network. */
  readonly forkCount: Scalars['Int'];
  /** Indicates if the repository has issues feature enabled. */
  readonly hasIssuesEnabled: Scalars['Boolean'];
  /** Indicates if the repository has the Projects feature enabled. */
  readonly hasProjectsEnabled: Scalars['Boolean'];
  /** Indicates if the repository has wiki feature enabled. */
  readonly hasWikiEnabled: Scalars['Boolean'];
  /** The repository's URL. */
  readonly homepageUrl: Maybe<Scalars['URI']>;
  /** Indicates if the repository is unmaintained. */
  readonly isArchived: Scalars['Boolean'];
  /** Identifies if the repository is a fork. */
  readonly isFork: Scalars['Boolean'];
  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */
  readonly isInOrganization: Scalars['Boolean'];
  /** Indicates if the repository has been locked or not. */
  readonly isLocked: Scalars['Boolean'];
  /** Identifies if the repository is a mirror. */
  readonly isMirror: Scalars['Boolean'];
  /** Identifies if the repository is private or internal. */
  readonly isPrivate: Scalars['Boolean'];
  /** Identifies if the repository is a template that can be used to generate new repositories. */
  readonly isTemplate: Scalars['Boolean'];
  /** The license associated with the repository */
  readonly licenseInfo: Maybe<GraphQLLicense>;
  /** The reason the repository has been locked. */
  readonly lockReason: Maybe<GraphQLRepositoryLockReason>;
  /** The repository's original mirror URL. */
  readonly mirrorUrl: Maybe<Scalars['URI']>;
  /** The name of the repository. */
  readonly name: Scalars['String'];
  /** The repository's name with owner. */
  readonly nameWithOwner: Scalars['String'];
  /** The image used to represent this repository in Open Graph data. */
  readonly openGraphImageUrl: Scalars['URI'];
  /** The User owner of the repository. */
  readonly owner: GraphQLRepositoryOwner;
  /** Identifies when the repository was last pushed to. */
  readonly pushedAt: Maybe<Scalars['DateTime']>;
  /** The HTTP path for this repository */
  readonly resourcePath: Scalars['URI'];
  /** A description of the repository, rendered to HTML without any links in it. */
  readonly shortDescriptionHTML: Scalars['HTML'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this repository */
  readonly url: Scalars['URI'];
  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */
  readonly usesCustomOpenGraphImage: Scalars['Boolean'];
  /** Indicates the repository's visibility level. */
  readonly visibility: GraphQLRepositoryVisibility;
};


/** A subset of repository info. */
export type GraphQLRepositoryInfoShortDescriptionHtmlArgs = {
  limit?: Maybe<Scalars['Int']>;
};

/** Repository interaction limit that applies to this object. */
export type GraphQLRepositoryInteractionAbility = {
  readonly __typename?: 'RepositoryInteractionAbility';
  /** The time the currently active limit expires. */
  readonly expiresAt: Maybe<Scalars['DateTime']>;
  /** The current limit that is enabled on this object. */
  readonly limit: GraphQLRepositoryInteractionLimit;
  /** The origin of the currently active interaction limit. */
  readonly origin: GraphQLRepositoryInteractionLimitOrigin;
};

/** A repository interaction limit. */
export enum GraphQLRepositoryInteractionLimit {
  /** Users that have recently created their account will be unable to interact with the repository. */
  EXISTING_USERS = 'EXISTING_USERS',
  /** Users that have not previously committed to a repository’s default branch will be unable to interact with the repository. */
  CONTRIBUTORS_ONLY = 'CONTRIBUTORS_ONLY',
  /** Users that are not collaborators will not be able to interact with the repository. */
  COLLABORATORS_ONLY = 'COLLABORATORS_ONLY',
  /** No interaction limits are enabled. */
  NO_LIMIT = 'NO_LIMIT'
}

/** The length for a repository interaction limit to be enabled for. */
export enum GraphQLRepositoryInteractionLimitExpiry {
  /** The interaction limit will expire after 1 day. */
  ONE_DAY = 'ONE_DAY',
  /** The interaction limit will expire after 3 days. */
  THREE_DAYS = 'THREE_DAYS',
  /** The interaction limit will expire after 1 week. */
  ONE_WEEK = 'ONE_WEEK',
  /** The interaction limit will expire after 1 month. */
  ONE_MONTH = 'ONE_MONTH',
  /** The interaction limit will expire after 6 months. */
  SIX_MONTHS = 'SIX_MONTHS'
}

/** Indicates where an interaction limit is configured. */
export enum GraphQLRepositoryInteractionLimitOrigin {
  /** A limit that is configured at the repository level. */
  REPOSITORY = 'REPOSITORY',
  /** A limit that is configured at the organization level. */
  ORGANIZATION = 'ORGANIZATION',
  /** A limit that is configured at the user-wide level. */
  USER = 'USER'
}

/** An invitation for a user to be added to a repository. */
export type GraphQLRepositoryInvitation = GraphQLNode & {
  readonly __typename?: 'RepositoryInvitation';
  /** The email address that received the invitation. */
  readonly email: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The user who received the invitation. */
  readonly invitee: Maybe<GraphQLUser>;
  /** The user who created the invitation. */
  readonly inviter: GraphQLUser;
  /** The permalink for this repository invitation. */
  readonly permalink: Scalars['URI'];
  /** The permission granted on this repository by this invitation. */
  readonly permission: GraphQLRepositoryPermission;
  /** The Repository the user is invited to. */
  readonly repository: Maybe<GraphQLRepositoryInfo>;
};

/** A list of repository invitations. */
export type GraphQLRepositoryInvitationConnection = {
  readonly __typename?: 'RepositoryInvitationConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryInvitationEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryInvitation>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLRepositoryInvitationEdge = {
  readonly __typename?: 'RepositoryInvitationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLRepositoryInvitation>;
};

/** Ordering options for repository invitation connections. */
export type GraphQLRepositoryInvitationOrder = {
  /** The field to order repository invitations by. */
  readonly field: GraphQLRepositoryInvitationOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which repository invitation connections can be ordered. */
export enum GraphQLRepositoryInvitationOrderField {
  /** Order repository invitations by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** The possible reasons a given repository could be in a locked state. */
export enum GraphQLRepositoryLockReason {
  /** The repository is locked due to a move. */
  MOVING = 'MOVING',
  /** The repository is locked due to a billing related reason. */
  BILLING = 'BILLING',
  /** The repository is locked due to a rename. */
  RENAME = 'RENAME',
  /** The repository is locked due to a migration. */
  MIGRATING = 'MIGRATING'
}

/** An Octoshift repository migration. */
export type GraphQLRepositoryMigration = GraphQLNode & GraphQLMigration & {
  readonly __typename?: 'RepositoryMigration';
  /** The Octoshift migration flag to continue on error. */
  readonly continueOnError: Scalars['Boolean'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The reason the migration failed. */
  readonly failureReason: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** The Octoshift migration source. */
  readonly migrationSource: GraphQLMigrationSource;
  /** The Octoshift migration source URL. */
  readonly sourceUrl: Scalars['URI'];
  /** The Octoshift migration state. */
  readonly state: GraphQLMigrationState;
};

/** The connection type for RepositoryMigration. */
export type GraphQLRepositoryMigrationConnection = {
  readonly __typename?: 'RepositoryMigrationConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryMigrationEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryMigration>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents a repository migration. */
export type GraphQLRepositoryMigrationEdge = {
  readonly __typename?: 'RepositoryMigrationEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLRepositoryMigration>;
};

/** Ordering options for repository migrations. */
export type GraphQLRepositoryMigrationOrder = {
  /** The field to order repository migrations by. */
  readonly field: GraphQLRepositoryMigrationOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLRepositoryMigrationOrderDirection;
};

/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */
export enum GraphQLRepositoryMigrationOrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  ASC = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  DESC = 'DESC'
}

/** Properties by which repository migrations can be ordered. */
export enum GraphQLRepositoryMigrationOrderField {
  /** Order mannequins why when they were created. */
  CREATED_AT = 'CREATED_AT'
}

/** Represents a object that belongs to a repository. */
export type GraphQLRepositoryNode = {
  /** The repository associated with this node. */
  readonly repository: GraphQLRepository;
};

/** Ordering options for repository connections */
export type GraphQLRepositoryOrder = {
  /** The field to order repositories by. */
  readonly field: GraphQLRepositoryOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which repository connections can be ordered. */
export enum GraphQLRepositoryOrderField {
  /** Order repositories by creation time */
  CREATED_AT = 'CREATED_AT',
  /** Order repositories by update time */
  UPDATED_AT = 'UPDATED_AT',
  /** Order repositories by push time */
  PUSHED_AT = 'PUSHED_AT',
  /** Order repositories by name */
  NAME = 'NAME',
  /** Order repositories by number of stargazers */
  STARGAZERS = 'STARGAZERS'
}

/** Represents an owner of a Repository. */
export type GraphQLRepositoryOwner = {
  /** A URL pointing to the owner's public avatar. */
  readonly avatarUrl: Scalars['URI'];
  readonly id: Scalars['ID'];
  /** The username used to login. */
  readonly login: Scalars['String'];
  /** A list of repositories that the user owns. */
  readonly repositories: GraphQLRepositoryConnection;
  /** Find Repository. */
  readonly repository: Maybe<GraphQLRepository>;
  /** The HTTP URL for the owner. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for the owner. */
  readonly url: Scalars['URI'];
};


/** Represents an owner of a Repository. */
export type GraphQLRepositoryOwnerAvatarUrlArgs = {
  size: Maybe<Scalars['Int']>;
};


/** Represents an owner of a Repository. */
export type GraphQLRepositoryOwnerRepositoriesArgs = {
  privacy: Maybe<GraphQLRepositoryPrivacy>;
  orderBy: Maybe<GraphQLRepositoryOrder>;
  affiliations: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  ownerAffiliations?: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  isLocked: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  isFork: Maybe<Scalars['Boolean']>;
};


/** Represents an owner of a Repository. */
export type GraphQLRepositoryOwnerRepositoryArgs = {
  name: Scalars['String'];
  followRenames?: Maybe<Scalars['Boolean']>;
};

/** The access level to a repository */
export enum GraphQLRepositoryPermission {
  /** Can read, clone, and push to this repository. Can also manage issues, pull requests, and repository settings, including adding collaborators */
  ADMIN = 'ADMIN',
  /** Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings */
  MAINTAIN = 'MAINTAIN',
  /** Can read, clone, and push to this repository. Can also manage issues and pull requests */
  WRITE = 'WRITE',
  /** Can read and clone this repository. Can also manage issues and pull requests */
  TRIAGE = 'TRIAGE',
  /** Can read and clone this repository. Can also open and comment on issues and pull requests */
  READ = 'READ'
}

/** The privacy of a repository */
export enum GraphQLRepositoryPrivacy {
  /** Public */
  PUBLIC = 'PUBLIC',
  /** Private */
  PRIVATE = 'PRIVATE'
}

/** A repository-topic connects a repository to a topic. */
export type GraphQLRepositoryTopic = GraphQLNode & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'RepositoryTopic';
  readonly id: Scalars['ID'];
  /** The HTTP path for this repository-topic. */
  readonly resourcePath: Scalars['URI'];
  /** The topic. */
  readonly topic: GraphQLTopic;
  /** The HTTP URL for this repository-topic. */
  readonly url: Scalars['URI'];
};

/** The connection type for RepositoryTopic. */
export type GraphQLRepositoryTopicConnection = {
  readonly __typename?: 'RepositoryTopicConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryTopicEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryTopic>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLRepositoryTopicEdge = {
  readonly __typename?: 'RepositoryTopicEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLRepositoryTopic>;
};

/** The repository's visibility level. */
export enum GraphQLRepositoryVisibility {
  /** The repository is visible only to those with explicit access. */
  PRIVATE = 'PRIVATE',
  /** The repository is visible to everyone. */
  PUBLIC = 'PUBLIC',
  /** The repository is visible only to users in the same business. */
  INTERNAL = 'INTERNAL'
}

/** Audit log entry for a repository_visibility_change.disable event. */
export type GraphQLRepositoryVisibilityChangeDisableAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLEnterpriseAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'RepositoryVisibilityChangeDisableAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  readonly enterpriseResourcePath: Maybe<Scalars['URI']>;
  /** The slug of the enterprise. */
  readonly enterpriseSlug: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  readonly enterpriseUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a repository_visibility_change.enable event. */
export type GraphQLRepositoryVisibilityChangeEnableAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLEnterpriseAuditEntryData & GraphQLOrganizationAuditEntryData & {
  readonly __typename?: 'RepositoryVisibilityChangeEnableAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  /** The HTTP path for this enterprise. */
  readonly enterpriseResourcePath: Maybe<Scalars['URI']>;
  /** The slug of the enterprise. */
  readonly enterpriseSlug: Maybe<Scalars['String']>;
  /** The HTTP URL for this enterprise. */
  readonly enterpriseUrl: Maybe<Scalars['URI']>;
  readonly id: Scalars['ID'];
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */
export type GraphQLRepositoryVulnerabilityAlert = GraphQLNode & GraphQLRepositoryNode & {
  readonly __typename?: 'RepositoryVulnerabilityAlert';
  /** When was the alert created? */
  readonly createdAt: Scalars['DateTime'];
  /** The associated Dependabot update */
  readonly dependabotUpdate: Maybe<GraphQLDependabotUpdate>;
  /** The reason the alert was dismissed */
  readonly dismissReason: Maybe<Scalars['String']>;
  /** When was the alert dismissed? */
  readonly dismissedAt: Maybe<Scalars['DateTime']>;
  /** The user who dismissed the alert */
  readonly dismisser: Maybe<GraphQLUser>;
  /** The reason the alert was marked as fixed. */
  readonly fixReason: Maybe<Scalars['String']>;
  /** When was the alert fixed? */
  readonly fixedAt: Maybe<Scalars['DateTime']>;
  readonly id: Scalars['ID'];
  /** Identifies the alert number. */
  readonly number: Scalars['Int'];
  /** The associated repository */
  readonly repository: GraphQLRepository;
  /** The associated security advisory */
  readonly securityAdvisory: Maybe<GraphQLSecurityAdvisory>;
  /** The associated security vulnerability */
  readonly securityVulnerability: Maybe<GraphQLSecurityVulnerability>;
  /** Identifies the state of the alert. */
  readonly state: GraphQLRepositoryVulnerabilityAlertState;
  /** The vulnerable manifest filename */
  readonly vulnerableManifestFilename: Scalars['String'];
  /** The vulnerable manifest path */
  readonly vulnerableManifestPath: Scalars['String'];
  /** The vulnerable requirements */
  readonly vulnerableRequirements: Maybe<Scalars['String']>;
};

/** The connection type for RepositoryVulnerabilityAlert. */
export type GraphQLRepositoryVulnerabilityAlertConnection = {
  readonly __typename?: 'RepositoryVulnerabilityAlertConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryVulnerabilityAlertEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryVulnerabilityAlert>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLRepositoryVulnerabilityAlertEdge = {
  readonly __typename?: 'RepositoryVulnerabilityAlertEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLRepositoryVulnerabilityAlert>;
};

/** The possible states of an alert */
export enum GraphQLRepositoryVulnerabilityAlertState {
  /** An alert that is still open. */
  OPEN = 'OPEN',
  /** An alert that has been resolved by a code change. */
  FIXED = 'FIXED',
  /** An alert that has been manually closed by a user. */
  DISMISSED = 'DISMISSED'
}

/** Autogenerated input type of RequestReviews */
export type GraphQLRequestReviewsInput = {
  /** The Node ID of the pull request to modify. */
  readonly pullRequestId: Scalars['ID'];
  /** The Node IDs of the user to request. */
  readonly userIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** The Node IDs of the team to request. */
  readonly teamIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** Add users to the set rather than replace. */
  readonly union: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RequestReviews */
export type GraphQLRequestReviewsPayload = {
  readonly __typename?: 'RequestReviewsPayload';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The pull request that is getting requests. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
  /** The edge from the pull request to the requested reviewers. */
  readonly requestedReviewersEdge: Maybe<GraphQLUserEdge>;
};

/** The possible states that can be requested when creating a check run. */
export enum GraphQLRequestableCheckStatusState {
  /** The check suite or run has been queued. */
  QUEUED = 'QUEUED',
  /** The check suite or run is in progress. */
  IN_PROGRESS = 'IN_PROGRESS',
  /** The check suite or run has been completed. */
  COMPLETED = 'COMPLETED',
  /** The check suite or run is in waiting state. */
  WAITING = 'WAITING',
  /** The check suite or run is in pending state. */
  PENDING = 'PENDING'
}

/** Types that can be requested reviewers. */
export type GraphQLRequestedReviewer = GraphQLMannequin | GraphQLTeam | GraphQLUser;

/** Represents a type that can be required by a pull request for merging. */
export type GraphQLRequirableByPullRequest = {
  /** Whether this is required to pass before merging for a specific pull request. */
  readonly isRequired: Scalars['Boolean'];
};


/** Represents a type that can be required by a pull request for merging. */
export type GraphQLRequirableByPullRequestIsRequiredArgs = {
  pullRequestId: Maybe<Scalars['ID']>;
  pullRequestNumber: Maybe<Scalars['Int']>;
};

/** Represents a required status check for a protected branch, but not any specific run of that check. */
export type GraphQLRequiredStatusCheckDescription = {
  readonly __typename?: 'RequiredStatusCheckDescription';
  /** The App that must provide this status in order for it to be accepted. */
  readonly app: Maybe<GraphQLApp>;
  /** The name of this status. */
  readonly context: Scalars['String'];
};

/** Specifies the attributes for a new or updated required status check. */
export type GraphQLRequiredStatusCheckInput = {
  /** Status check context that must pass for commits to be accepted to the matching branch. */
  readonly context: Scalars['String'];
  /** The ID of the App that must set the status in order for it to be accepted. Omit this value to use whichever app has recently been setting this status, or use "any" to allow any app to set the status. */
  readonly appId: Maybe<Scalars['ID']>;
};

/** Autogenerated input type of RerequestCheckSuite */
export type GraphQLRerequestCheckSuiteInput = {
  /** The Node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** The Node ID of the check suite. */
  readonly checkSuiteId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RerequestCheckSuite */
export type GraphQLRerequestCheckSuitePayload = {
  readonly __typename?: 'RerequestCheckSuitePayload';
  /** The requested check suite. */
  readonly checkSuite: Maybe<GraphQLCheckSuite>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ResolveReviewThread */
export type GraphQLResolveReviewThreadInput = {
  /** The ID of the thread to resolve */
  readonly threadId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ResolveReviewThread */
export type GraphQLResolveReviewThreadPayload = {
  readonly __typename?: 'ResolveReviewThreadPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The thread to resolve. */
  readonly thread: Maybe<GraphQLPullRequestReviewThread>;
};

/** Represents a private contribution a user made on GitHub. */
export type GraphQLRestrictedContribution = GraphQLContribution & {
  readonly __typename?: 'RestrictedContribution';
  /**
   * Whether this contribution is associated with a record you do not have access to. For
   * example, your own 'first issue' contribution may have been made on a repository you can no
   * longer access.
   */
  readonly isRestricted: Scalars['Boolean'];
  /** When this contribution was made. */
  readonly occurredAt: Scalars['DateTime'];
  /** The HTTP path for this contribution. */
  readonly resourcePath: Scalars['URI'];
  /** The HTTP URL for this contribution. */
  readonly url: Scalars['URI'];
  /** The user who made this contribution. */
  readonly user: GraphQLUser;
};

/** A team or user who has the ability to dismiss a review on a protected branch. */
export type GraphQLReviewDismissalAllowance = GraphQLNode & {
  readonly __typename?: 'ReviewDismissalAllowance';
  /** The actor that can dismiss. */
  readonly actor: Maybe<GraphQLReviewDismissalAllowanceActor>;
  /** Identifies the branch protection rule associated with the allowed user or team. */
  readonly branchProtectionRule: Maybe<GraphQLBranchProtectionRule>;
  readonly id: Scalars['ID'];
};

/** Types that can be an actor. */
export type GraphQLReviewDismissalAllowanceActor = GraphQLTeam | GraphQLUser;

/** The connection type for ReviewDismissalAllowance. */
export type GraphQLReviewDismissalAllowanceConnection = {
  readonly __typename?: 'ReviewDismissalAllowanceConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLReviewDismissalAllowanceEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLReviewDismissalAllowance>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLReviewDismissalAllowanceEdge = {
  readonly __typename?: 'ReviewDismissalAllowanceEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLReviewDismissalAllowance>;
};

/** Represents a 'review_dismissed' event on a given issue or pull request. */
export type GraphQLReviewDismissedEvent = GraphQLNode & GraphQLUniformResourceLocatable & {
  readonly __typename?: 'ReviewDismissedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** Identifies the optional message associated with the 'review_dismissed' event. */
  readonly dismissalMessage: Maybe<Scalars['String']>;
  /** Identifies the optional message associated with the event, rendered to HTML. */
  readonly dismissalMessageHTML: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** Identifies the previous state of the review with the 'review_dismissed' event. */
  readonly previousReviewState: GraphQLPullRequestReviewState;
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
  /** Identifies the commit which caused the review to become stale. */
  readonly pullRequestCommit: Maybe<GraphQLPullRequestCommit>;
  /** The HTTP path for this review dismissed event. */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the review associated with the 'review_dismissed' event. */
  readonly review: Maybe<GraphQLPullRequestReview>;
  /** The HTTP URL for this review dismissed event. */
  readonly url: Scalars['URI'];
};

/** A request for a user to review a pull request. */
export type GraphQLReviewRequest = GraphQLNode & {
  readonly __typename?: 'ReviewRequest';
  /** Whether this request was created for a code owner */
  readonly asCodeOwner: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** Identifies the pull request associated with this review request. */
  readonly pullRequest: GraphQLPullRequest;
  /** The reviewer that is requested. */
  readonly requestedReviewer: Maybe<GraphQLRequestedReviewer>;
};

/** The connection type for ReviewRequest. */
export type GraphQLReviewRequestConnection = {
  readonly __typename?: 'ReviewRequestConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLReviewRequestEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLReviewRequest>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLReviewRequestEdge = {
  readonly __typename?: 'ReviewRequestEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLReviewRequest>;
};

/** Represents an 'review_request_removed' event on a given pull request. */
export type GraphQLReviewRequestRemovedEvent = GraphQLNode & {
  readonly __typename?: 'ReviewRequestRemovedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
  /** Identifies the reviewer whose review request was removed. */
  readonly requestedReviewer: Maybe<GraphQLRequestedReviewer>;
};

/** Represents an 'review_requested' event on a given pull request. */
export type GraphQLReviewRequestedEvent = GraphQLNode & {
  readonly __typename?: 'ReviewRequestedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** PullRequest referenced by event. */
  readonly pullRequest: GraphQLPullRequest;
  /** Identifies the reviewer whose review was requested. */
  readonly requestedReviewer: Maybe<GraphQLRequestedReviewer>;
};

/**
 * A hovercard context with a message describing the current code review state of the pull
 * request.
 */
export type GraphQLReviewStatusHovercardContext = GraphQLHovercardContext & {
  readonly __typename?: 'ReviewStatusHovercardContext';
  /** A string describing this context */
  readonly message: Scalars['String'];
  /** An octicon to accompany this context */
  readonly octicon: Scalars['String'];
  /** The current status of the pull request with respect to code review. */
  readonly reviewDecision: Maybe<GraphQLPullRequestReviewDecision>;
};

/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */
export type GraphQLRevokeEnterpriseOrganizationsMigratorRoleInput = {
  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */
  readonly enterpriseId: Scalars['ID'];
  /** The login of the user to revoke the migrator role */
  readonly login: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
export type GraphQLRevokeEnterpriseOrganizationsMigratorRolePayload = {
  readonly __typename?: 'RevokeEnterpriseOrganizationsMigratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The organizations that had the migrator role revoked for the given user. */
  readonly organizations: Maybe<GraphQLOrganizationConnection>;
};


/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */
export type GraphQLRevokeEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of RevokeMigratorRole */
export type GraphQLRevokeMigratorRoleInput = {
  /** The ID of the organization that the user/team belongs to. */
  readonly organizationId: Scalars['ID'];
  /** The user login or Team slug to revoke the migrator role from. */
  readonly actor: Scalars['String'];
  /** Specifies the type of the actor, can be either USER or TEAM. */
  readonly actorType: GraphQLActorType;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RevokeMigratorRole */
export type GraphQLRevokeMigratorRolePayload = {
  readonly __typename?: 'RevokeMigratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** Did the operation succeed? */
  readonly success: Maybe<Scalars['Boolean']>;
};

/** Possible roles a user may have in relation to an organization. */
export enum GraphQLRoleInOrganization {
  /** A user with full administrative access to the organization. */
  OWNER = 'OWNER',
  /** A user who is a direct member of the organization. */
  DIRECT_MEMBER = 'DIRECT_MEMBER',
  /** A user who is unaffiliated with the organization. */
  UNAFFILIATED = 'UNAFFILIATED'
}

/** The possible digest algorithms used to sign SAML requests for an identity provider. */
export enum GraphQLSamlDigestAlgorithm {
  /** SHA1 */
  SHA1 = 'SHA1',
  /** SHA256 */
  SHA256 = 'SHA256',
  /** SHA384 */
  SHA384 = 'SHA384',
  /** SHA512 */
  SHA512 = 'SHA512'
}

/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */
export enum GraphQLSamlSignatureAlgorithm {
  /** RSA-SHA1 */
  RSA_SHA1 = 'RSA_SHA1',
  /** RSA-SHA256 */
  RSA_SHA256 = 'RSA_SHA256',
  /** RSA-SHA384 */
  RSA_SHA384 = 'RSA_SHA384',
  /** RSA-SHA512 */
  RSA_SHA512 = 'RSA_SHA512'
}

/** A Saved Reply is text a user can use to reply quickly. */
export type GraphQLSavedReply = GraphQLNode & {
  readonly __typename?: 'SavedReply';
  /** The body of the saved reply. */
  readonly body: Scalars['String'];
  /** The saved reply body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The title of the saved reply. */
  readonly title: Scalars['String'];
  /** The user that saved this reply. */
  readonly user: Maybe<GraphQLActor>;
};

/** The connection type for SavedReply. */
export type GraphQLSavedReplyConnection = {
  readonly __typename?: 'SavedReplyConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSavedReplyEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSavedReply>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLSavedReplyEdge = {
  readonly __typename?: 'SavedReplyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSavedReply>;
};

/** Ordering options for saved reply connections. */
export type GraphQLSavedReplyOrder = {
  /** The field to order saved replies by. */
  readonly field: GraphQLSavedReplyOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which saved reply connections can be ordered. */
export enum GraphQLSavedReplyOrderField {
  /** Order saved reply by when they were updated. */
  UPDATED_AT = 'UPDATED_AT'
}

/** The results of a search. */
export type GraphQLSearchResultItem = GraphQLApp | GraphQLDiscussion | GraphQLIssue | GraphQLMarketplaceListing | GraphQLOrganization | GraphQLPullRequest | GraphQLRepository | GraphQLUser;

/** A list of results that matched against a search query. */
export type GraphQLSearchResultItemConnection = {
  readonly __typename?: 'SearchResultItemConnection';
  /** The number of pieces of code that matched the search query. */
  readonly codeCount: Scalars['Int'];
  /** The number of discussions that matched the search query. */
  readonly discussionCount: Scalars['Int'];
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSearchResultItemEdge>>>;
  /** The number of issues that matched the search query. */
  readonly issueCount: Scalars['Int'];
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSearchResultItem>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** The number of repositories that matched the search query. */
  readonly repositoryCount: Scalars['Int'];
  /** The number of users that matched the search query. */
  readonly userCount: Scalars['Int'];
  /** The number of wiki pages that matched the search query. */
  readonly wikiCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLSearchResultItemEdge = {
  readonly __typename?: 'SearchResultItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSearchResultItem>;
  /** Text matches on the result found. */
  readonly textMatches: Maybe<ReadonlyArray<Maybe<GraphQLTextMatch>>>;
};

/** Represents the individual results of a search. */
export enum GraphQLSearchType {
  /** Returns results matching issues in repositories. */
  ISSUE = 'ISSUE',
  /** Returns results matching repositories. */
  REPOSITORY = 'REPOSITORY',
  /** Returns results matching users and organizations on GitHub. */
  USER = 'USER',
  /** Returns matching discussions in repositories. */
  DISCUSSION = 'DISCUSSION'
}

/** A GitHub Security Advisory */
export type GraphQLSecurityAdvisory = GraphQLNode & {
  readonly __typename?: 'SecurityAdvisory';
  /** The CVSS associated with this advisory */
  readonly cvss: GraphQLCvss;
  /** CWEs associated with this Advisory */
  readonly cwes: GraphQLCweConnection;
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** This is a long plaintext description of the advisory */
  readonly description: Scalars['String'];
  /** The GitHub Security Advisory ID */
  readonly ghsaId: Scalars['String'];
  readonly id: Scalars['ID'];
  /** A list of identifiers for this advisory */
  readonly identifiers: ReadonlyArray<GraphQLSecurityAdvisoryIdentifier>;
  /** The permalink for the advisory's dependabot alerts page */
  readonly notificationsPermalink: Maybe<Scalars['URI']>;
  /** The organization that originated the advisory */
  readonly origin: Scalars['String'];
  /** The permalink for the advisory */
  readonly permalink: Maybe<Scalars['URI']>;
  /** When the advisory was published */
  readonly publishedAt: Scalars['DateTime'];
  /** A list of references for this advisory */
  readonly references: ReadonlyArray<GraphQLSecurityAdvisoryReference>;
  /** The severity of the advisory */
  readonly severity: GraphQLSecurityAdvisorySeverity;
  /** A short plaintext summary of the advisory */
  readonly summary: Scalars['String'];
  /** When the advisory was last updated */
  readonly updatedAt: Scalars['DateTime'];
  /** Vulnerabilities associated with this Advisory */
  readonly vulnerabilities: GraphQLSecurityVulnerabilityConnection;
  /** When the advisory was withdrawn, if it has been withdrawn */
  readonly withdrawnAt: Maybe<Scalars['DateTime']>;
};


/** A GitHub Security Advisory */
export type GraphQLSecurityAdvisoryCwesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A GitHub Security Advisory */
export type GraphQLSecurityAdvisoryVulnerabilitiesArgs = {
  orderBy?: Maybe<GraphQLSecurityVulnerabilityOrder>;
  ecosystem: Maybe<GraphQLSecurityAdvisoryEcosystem>;
  package: Maybe<Scalars['String']>;
  severities: Maybe<ReadonlyArray<GraphQLSecurityAdvisorySeverity>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for SecurityAdvisory. */
export type GraphQLSecurityAdvisoryConnection = {
  readonly __typename?: 'SecurityAdvisoryConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSecurityAdvisoryEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSecurityAdvisory>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** The possible ecosystems of a security vulnerability's package. */
export enum GraphQLSecurityAdvisoryEcosystem {
  /** PHP packages hosted at packagist.org */
  COMPOSER = 'COMPOSER',
  /** Go modules */
  GO = 'GO',
  /** Java artifacts hosted at the Maven central repository */
  MAVEN = 'MAVEN',
  /** JavaScript packages hosted at npmjs.com */
  NPM = 'NPM',
  /** .NET packages hosted at the NuGet Gallery */
  NUGET = 'NUGET',
  /** Python packages hosted at PyPI.org */
  PIP = 'PIP',
  /** Ruby gems hosted at RubyGems.org */
  RUBYGEMS = 'RUBYGEMS',
  /** Rust crates */
  RUST = 'RUST'
}

/** An edge in a connection. */
export type GraphQLSecurityAdvisoryEdge = {
  readonly __typename?: 'SecurityAdvisoryEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSecurityAdvisory>;
};

/** A GitHub Security Advisory Identifier */
export type GraphQLSecurityAdvisoryIdentifier = {
  readonly __typename?: 'SecurityAdvisoryIdentifier';
  /** The identifier type, e.g. GHSA, CVE */
  readonly type: Scalars['String'];
  /** The identifier */
  readonly value: Scalars['String'];
};

/** An advisory identifier to filter results on. */
export type GraphQLSecurityAdvisoryIdentifierFilter = {
  /** The identifier type. */
  readonly type: GraphQLSecurityAdvisoryIdentifierType;
  /** The identifier string. Supports exact or partial matching. */
  readonly value: Scalars['String'];
};

/** Identifier formats available for advisories. */
export enum GraphQLSecurityAdvisoryIdentifierType {
  /** Common Vulnerabilities and Exposures Identifier. */
  CVE = 'CVE',
  /** GitHub Security Advisory ID. */
  GHSA = 'GHSA'
}

/** Ordering options for security advisory connections */
export type GraphQLSecurityAdvisoryOrder = {
  /** The field to order security advisories by. */
  readonly field: GraphQLSecurityAdvisoryOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which security advisory connections can be ordered. */
export enum GraphQLSecurityAdvisoryOrderField {
  /** Order advisories by publication time */
  PUBLISHED_AT = 'PUBLISHED_AT',
  /** Order advisories by update time */
  UPDATED_AT = 'UPDATED_AT'
}

/** An individual package */
export type GraphQLSecurityAdvisoryPackage = {
  readonly __typename?: 'SecurityAdvisoryPackage';
  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */
  readonly ecosystem: GraphQLSecurityAdvisoryEcosystem;
  /** The package name */
  readonly name: Scalars['String'];
};

/** An individual package version */
export type GraphQLSecurityAdvisoryPackageVersion = {
  readonly __typename?: 'SecurityAdvisoryPackageVersion';
  /** The package name or version */
  readonly identifier: Scalars['String'];
};

/** A GitHub Security Advisory Reference */
export type GraphQLSecurityAdvisoryReference = {
  readonly __typename?: 'SecurityAdvisoryReference';
  /** A publicly accessible reference */
  readonly url: Scalars['URI'];
};

/** Severity of the vulnerability. */
export enum GraphQLSecurityAdvisorySeverity {
  /** Low. */
  LOW = 'LOW',
  /** Moderate. */
  MODERATE = 'MODERATE',
  /** High. */
  HIGH = 'HIGH',
  /** Critical. */
  CRITICAL = 'CRITICAL'
}

/** An individual vulnerability within an Advisory */
export type GraphQLSecurityVulnerability = {
  readonly __typename?: 'SecurityVulnerability';
  /** The Advisory associated with this Vulnerability */
  readonly advisory: GraphQLSecurityAdvisory;
  /** The first version containing a fix for the vulnerability */
  readonly firstPatchedVersion: Maybe<GraphQLSecurityAdvisoryPackageVersion>;
  /** A description of the vulnerable package */
  readonly package: GraphQLSecurityAdvisoryPackage;
  /** The severity of the vulnerability within this package */
  readonly severity: GraphQLSecurityAdvisorySeverity;
  /** When the vulnerability was last updated */
  readonly updatedAt: Scalars['DateTime'];
  /**
   * A string that describes the vulnerable package versions.
   * This string follows a basic syntax with a few forms.
   * + `= 0.2.0` denotes a single vulnerable version.
   * + `<= 1.0.8` denotes a version range up to and including the specified version
   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
   */
  readonly vulnerableVersionRange: Scalars['String'];
};

/** The connection type for SecurityVulnerability. */
export type GraphQLSecurityVulnerabilityConnection = {
  readonly __typename?: 'SecurityVulnerabilityConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSecurityVulnerabilityEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSecurityVulnerability>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLSecurityVulnerabilityEdge = {
  readonly __typename?: 'SecurityVulnerabilityEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSecurityVulnerability>;
};

/** Ordering options for security vulnerability connections */
export type GraphQLSecurityVulnerabilityOrder = {
  /** The field to order security vulnerabilities by. */
  readonly field: GraphQLSecurityVulnerabilityOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which security vulnerability connections can be ordered. */
export enum GraphQLSecurityVulnerabilityOrderField {
  /** Order vulnerability by update time */
  UPDATED_AT = 'UPDATED_AT'
}

/** Autogenerated input type of SetEnterpriseIdentityProvider */
export type GraphQLSetEnterpriseIdentityProviderInput = {
  /** The ID of the enterprise on which to set an identity provider. */
  readonly enterpriseId: Scalars['ID'];
  /** The URL endpoint for the identity provider's SAML SSO. */
  readonly ssoUrl: Scalars['URI'];
  /** The Issuer Entity ID for the SAML identity provider */
  readonly issuer: Maybe<Scalars['String']>;
  /** The x509 certificate used by the identity provider to sign assertions and responses. */
  readonly idpCertificate: Scalars['String'];
  /** The signature algorithm used to sign SAML requests for the identity provider. */
  readonly signatureMethod: GraphQLSamlSignatureAlgorithm;
  /** The digest algorithm used to sign SAML requests for the identity provider. */
  readonly digestMethod: GraphQLSamlDigestAlgorithm;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of SetEnterpriseIdentityProvider */
export type GraphQLSetEnterpriseIdentityProviderPayload = {
  readonly __typename?: 'SetEnterpriseIdentityProviderPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The identity provider for the enterprise. */
  readonly identityProvider: Maybe<GraphQLEnterpriseIdentityProvider>;
};

/** Autogenerated input type of SetOrganizationInteractionLimit */
export type GraphQLSetOrganizationInteractionLimitInput = {
  /** The ID of the organization to set a limit for. */
  readonly organizationId: Scalars['ID'];
  /** The limit to set. */
  readonly limit: GraphQLRepositoryInteractionLimit;
  /** When this limit should expire. */
  readonly expiry: Maybe<GraphQLRepositoryInteractionLimitExpiry>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of SetOrganizationInteractionLimit */
export type GraphQLSetOrganizationInteractionLimitPayload = {
  readonly __typename?: 'SetOrganizationInteractionLimitPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The organization that the interaction limit was set for. */
  readonly organization: Maybe<GraphQLOrganization>;
};

/** Autogenerated input type of SetRepositoryInteractionLimit */
export type GraphQLSetRepositoryInteractionLimitInput = {
  /** The ID of the repository to set a limit for. */
  readonly repositoryId: Scalars['ID'];
  /** The limit to set. */
  readonly limit: GraphQLRepositoryInteractionLimit;
  /** When this limit should expire. */
  readonly expiry: Maybe<GraphQLRepositoryInteractionLimitExpiry>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of SetRepositoryInteractionLimit */
export type GraphQLSetRepositoryInteractionLimitPayload = {
  readonly __typename?: 'SetRepositoryInteractionLimitPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The repository that the interaction limit was set for. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** Autogenerated input type of SetUserInteractionLimit */
export type GraphQLSetUserInteractionLimitInput = {
  /** The ID of the user to set a limit for. */
  readonly userId: Scalars['ID'];
  /** The limit to set. */
  readonly limit: GraphQLRepositoryInteractionLimit;
  /** When this limit should expire. */
  readonly expiry: Maybe<GraphQLRepositoryInteractionLimitExpiry>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of SetUserInteractionLimit */
export type GraphQLSetUserInteractionLimitPayload = {
  readonly __typename?: 'SetUserInteractionLimitPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The user that the interaction limit was set for. */
  readonly user: Maybe<GraphQLUser>;
};

/** Represents an S/MIME signature on a Commit or Tag. */
export type GraphQLSmimeSignature = GraphQLGitSignature & {
  readonly __typename?: 'SmimeSignature';
  /** Email used to sign this object. */
  readonly email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  readonly isValid: Scalars['Boolean'];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  readonly payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  readonly signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  readonly signer: Maybe<GraphQLUser>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  readonly state: GraphQLGitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  readonly wasSignedByGitHub: Scalars['Boolean'];
};

/** Represents a sort by field and direction. */
export type GraphQLSortBy = {
  readonly __typename?: 'SortBy';
  /** The direction of the sorting. Possible values are ASC and DESC. */
  readonly direction: GraphQLOrderDirection;
  /** The id of the field by which the column is sorted. */
  readonly field: Scalars['Int'];
};

/** Entities that can sponsor others via GitHub Sponsors */
export type GraphQLSponsor = GraphQLOrganization | GraphQLUser;

/** The connection type for Sponsor. */
export type GraphQLSponsorConnection = {
  readonly __typename?: 'SponsorConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSponsorEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSponsor>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */
export type GraphQLSponsorEdge = {
  readonly __typename?: 'SponsorEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSponsor>;
};

/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */
export type GraphQLSponsorOrder = {
  /** The field to order sponsor entities by. */
  readonly field: GraphQLSponsorOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which sponsor connections can be ordered. */
export enum GraphQLSponsorOrderField {
  /** Order sponsorable entities by login (username). */
  LOGIN = 'LOGIN',
  /** Order sponsors by their relevance to the viewer. */
  RELEVANCE = 'RELEVANCE'
}

/** Entities that can be sponsored through GitHub Sponsors */
export type GraphQLSponsorable = {
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  readonly estimatedNextSponsorsPayoutInCents: Scalars['Int'];
  /** True if this user/organization has a GitHub Sponsors listing. */
  readonly hasSponsorsListing: Scalars['Boolean'];
  /** Check if the given account is sponsoring this user/organization. */
  readonly isSponsoredBy: Scalars['Boolean'];
  /** True if the viewer is sponsored by this user/organization. */
  readonly isSponsoringViewer: Scalars['Boolean'];
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  readonly monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];
  /** List of users and organizations this entity is sponsoring. */
  readonly sponsoring: GraphQLSponsorConnection;
  /** List of sponsors for this user or organization. */
  readonly sponsors: GraphQLSponsorConnection;
  /** Events involving this sponsorable, such as new sponsorships. */
  readonly sponsorsActivities: GraphQLSponsorsActivityConnection;
  /** The GitHub Sponsors listing for this user or organization. */
  readonly sponsorsListing: Maybe<GraphQLSponsorsListing>;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
  readonly sponsorshipForViewerAsSponsor: Maybe<GraphQLSponsorship>;
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */
  readonly sponsorshipForViewerAsSponsorable: Maybe<GraphQLSponsorship>;
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  readonly sponsorshipNewsletters: GraphQLSponsorshipNewsletterConnection;
  /** This object's sponsorships as the maintainer. */
  readonly sponsorshipsAsMaintainer: GraphQLSponsorshipConnection;
  /** This object's sponsorships as the sponsor. */
  readonly sponsorshipsAsSponsor: GraphQLSponsorshipConnection;
  /** Whether or not the viewer is able to sponsor this user/organization. */
  readonly viewerCanSponsor: Scalars['Boolean'];
  /** True if the viewer is sponsoring this user/organization. */
  readonly viewerIsSponsoring: Scalars['Boolean'];
};


/** Entities that can be sponsored through GitHub Sponsors */
export type GraphQLSponsorableIsSponsoredByArgs = {
  accountLogin: Scalars['String'];
};


/** Entities that can be sponsored through GitHub Sponsors */
export type GraphQLSponsorableSponsoringArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLSponsorOrder>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type GraphQLSponsorableSponsorsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  tierId: Maybe<Scalars['ID']>;
  orderBy?: Maybe<GraphQLSponsorOrder>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type GraphQLSponsorableSponsorsActivitiesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  period?: Maybe<GraphQLSponsorsActivityPeriod>;
  orderBy?: Maybe<GraphQLSponsorsActivityOrder>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type GraphQLSponsorableSponsorshipNewslettersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLSponsorshipNewsletterOrder>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type GraphQLSponsorableSponsorshipsAsMaintainerArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  includePrivate?: Maybe<Scalars['Boolean']>;
  orderBy: Maybe<GraphQLSponsorshipOrder>;
};


/** Entities that can be sponsored through GitHub Sponsors */
export type GraphQLSponsorableSponsorshipsAsSponsorArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLSponsorshipOrder>;
};

/** Entities that can be sponsored via GitHub Sponsors */
export type GraphQLSponsorableItem = GraphQLOrganization | GraphQLUser;

/** The connection type for SponsorableItem. */
export type GraphQLSponsorableItemConnection = {
  readonly __typename?: 'SponsorableItemConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSponsorableItemEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSponsorableItem>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLSponsorableItemEdge = {
  readonly __typename?: 'SponsorableItemEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSponsorableItem>;
};

/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */
export type GraphQLSponsorableOrder = {
  /** The field to order sponsorable entities by. */
  readonly field: GraphQLSponsorableOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which sponsorable connections can be ordered. */
export enum GraphQLSponsorableOrderField {
  /** Order sponsorable entities by login (username). */
  LOGIN = 'LOGIN'
}

/** An event related to sponsorship activity. */
export type GraphQLSponsorsActivity = GraphQLNode & {
  readonly __typename?: 'SponsorsActivity';
  /** What action this activity indicates took place. */
  readonly action: GraphQLSponsorsActivityAction;
  readonly id: Scalars['ID'];
  /** The tier that the sponsorship used to use, for tier change events. */
  readonly previousSponsorsTier: Maybe<GraphQLSponsorsTier>;
  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */
  readonly sponsor: Maybe<GraphQLSponsor>;
  /** The user or organization that is being sponsored, the maintainer. */
  readonly sponsorable: GraphQLSponsorable;
  /** The associated sponsorship tier. */
  readonly sponsorsTier: Maybe<GraphQLSponsorsTier>;
  /** The timestamp of this event. */
  readonly timestamp: Maybe<Scalars['DateTime']>;
};

/** The possible actions that GitHub Sponsors activities can represent. */
export enum GraphQLSponsorsActivityAction {
  /** The activity was starting a sponsorship. */
  NEW_SPONSORSHIP = 'NEW_SPONSORSHIP',
  /** The activity was cancelling a sponsorship. */
  CANCELLED_SPONSORSHIP = 'CANCELLED_SPONSORSHIP',
  /** The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */
  TIER_CHANGE = 'TIER_CHANGE',
  /** The activity was funds being refunded to the sponsor or GitHub. */
  REFUND = 'REFUND',
  /** The activity was scheduling a downgrade or cancellation. */
  PENDING_CHANGE = 'PENDING_CHANGE',
  /** The activity was disabling matching for a previously matched sponsorship. */
  SPONSOR_MATCH_DISABLED = 'SPONSOR_MATCH_DISABLED'
}

/** The connection type for SponsorsActivity. */
export type GraphQLSponsorsActivityConnection = {
  readonly __typename?: 'SponsorsActivityConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSponsorsActivityEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSponsorsActivity>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLSponsorsActivityEdge = {
  readonly __typename?: 'SponsorsActivityEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSponsorsActivity>;
};

/** Ordering options for GitHub Sponsors activity connections. */
export type GraphQLSponsorsActivityOrder = {
  /** The field to order activity by. */
  readonly field: GraphQLSponsorsActivityOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which GitHub Sponsors activity connections can be ordered. */
export enum GraphQLSponsorsActivityOrderField {
  /** Order activities by when they happened. */
  TIMESTAMP = 'TIMESTAMP'
}

/** The possible time periods for which Sponsors activities can be requested. */
export enum GraphQLSponsorsActivityPeriod {
  /** The previous calendar day. */
  DAY = 'DAY',
  /** The previous seven days. */
  WEEK = 'WEEK',
  /** The previous thirty days. */
  MONTH = 'MONTH',
  /** Don't restrict the activity to any date range, include all activity. */
  ALL = 'ALL'
}

/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */
export type GraphQLSponsorsGoal = {
  readonly __typename?: 'SponsorsGoal';
  /** A description of the goal from the maintainer. */
  readonly description: Maybe<Scalars['String']>;
  /** What the objective of this goal is. */
  readonly kind: GraphQLSponsorsGoalKind;
  /** The percentage representing how complete this goal is, between 0-100. */
  readonly percentComplete: Scalars['Int'];
  /** What the goal amount is. Represents an amount in USD for monthly sponsorship amount goals. Represents a count of unique sponsors for total sponsors count goals. */
  readonly targetValue: Scalars['Int'];
  /** A brief summary of the kind and target value of this goal. */
  readonly title: Scalars['String'];
};

/** The different kinds of goals a GitHub Sponsors member can have. */
export enum GraphQLSponsorsGoalKind {
  /** The goal is about reaching a certain number of sponsors. */
  TOTAL_SPONSORS_COUNT = 'TOTAL_SPONSORS_COUNT',
  /** The goal is about getting a certain amount in USD from sponsorships each month. */
  MONTHLY_SPONSORSHIP_AMOUNT = 'MONTHLY_SPONSORSHIP_AMOUNT'
}

/** A GitHub Sponsors listing. */
export type GraphQLSponsorsListing = GraphQLNode & {
  readonly __typename?: 'SponsorsListing';
  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */
  readonly activeGoal: Maybe<GraphQLSponsorsGoal>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The full description of the listing. */
  readonly fullDescription: Scalars['String'];
  /** The full description of the listing rendered to HTML. */
  readonly fullDescriptionHTML: Scalars['HTML'];
  readonly id: Scalars['ID'];
  /** Whether this listing is publicly visible. */
  readonly isPublic: Scalars['Boolean'];
  /** The listing's full name. */
  readonly name: Scalars['String'];
  /** A future date on which this listing is eligible to receive a payout. */
  readonly nextPayoutDate: Maybe<Scalars['Date']>;
  /** The short description of the listing. */
  readonly shortDescription: Scalars['String'];
  /** The short name of the listing. */
  readonly slug: Scalars['String'];
  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */
  readonly sponsorable: GraphQLSponsorable;
  /** The published tiers for this GitHub Sponsors listing. */
  readonly tiers: Maybe<GraphQLSponsorsTierConnection>;
};


/** A GitHub Sponsors listing. */
export type GraphQLSponsorsListingTiersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLSponsorsTierOrder>;
};

/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */
export type GraphQLSponsorsTier = GraphQLNode & {
  readonly __typename?: 'SponsorsTier';
  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
  readonly adminInfo: Maybe<GraphQLSponsorsTierAdminInfo>;
  /** Get a different tier for this tier's maintainer that is at the same frequency as this tier but with an equal or lesser cost. Returns the published tier with the monthly price closest to this tier's without going over. */
  readonly closestLesserValueTier: Maybe<GraphQLSponsorsTier>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The description of the tier. */
  readonly description: Scalars['String'];
  /** The tier description rendered to HTML */
  readonly descriptionHTML: Scalars['HTML'];
  readonly id: Scalars['ID'];
  /** Whether this tier was chosen at checkout time by the sponsor rather than defined ahead of time by the maintainer who manages the Sponsors listing. */
  readonly isCustomAmount: Scalars['Boolean'];
  /** Whether this tier is only for use with one-time sponsorships. */
  readonly isOneTime: Scalars['Boolean'];
  /** How much this tier costs per month in cents. */
  readonly monthlyPriceInCents: Scalars['Int'];
  /** How much this tier costs per month in USD. */
  readonly monthlyPriceInDollars: Scalars['Int'];
  /** The name of the tier. */
  readonly name: Scalars['String'];
  /** The sponsors listing that this tier belongs to. */
  readonly sponsorsListing: GraphQLSponsorsListing;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export type GraphQLSponsorsTierAdminInfo = {
  readonly __typename?: 'SponsorsTierAdminInfo';
  /** The sponsorships associated with this tier. */
  readonly sponsorships: GraphQLSponsorshipConnection;
};


/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */
export type GraphQLSponsorsTierAdminInfoSponsorshipsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  includePrivate?: Maybe<Scalars['Boolean']>;
  orderBy: Maybe<GraphQLSponsorshipOrder>;
};

/** The connection type for SponsorsTier. */
export type GraphQLSponsorsTierConnection = {
  readonly __typename?: 'SponsorsTierConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSponsorsTierEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSponsorsTier>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLSponsorsTierEdge = {
  readonly __typename?: 'SponsorsTierEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSponsorsTier>;
};

/** Ordering options for Sponsors tiers connections. */
export type GraphQLSponsorsTierOrder = {
  /** The field to order tiers by. */
  readonly field: GraphQLSponsorsTierOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which Sponsors tiers connections can be ordered. */
export enum GraphQLSponsorsTierOrderField {
  /** Order tiers by creation time. */
  CREATED_AT = 'CREATED_AT',
  /** Order tiers by their monthly price in cents */
  MONTHLY_PRICE_IN_CENTS = 'MONTHLY_PRICE_IN_CENTS'
}

/** A sponsorship relationship between a sponsor and a maintainer */
export type GraphQLSponsorship = GraphQLNode & {
  readonly __typename?: 'Sponsorship';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */
  readonly isOneTimePayment: Scalars['Boolean'];
  /** Check if the sponsor has chosen to receive sponsorship update emails sent from the sponsorable. Only returns a non-null value when the viewer has permission to know this. */
  readonly isSponsorOptedIntoEmail: Maybe<Scalars['Boolean']>;
  /**
   * The entity that is being sponsored
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
   */
  readonly maintainer: GraphQLUser;
  /** The privacy level for this sponsorship. */
  readonly privacyLevel: GraphQLSponsorshipPrivacy;
  /**
   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
   */
  readonly sponsor: Maybe<GraphQLUser>;
  /** The user or organization that is sponsoring, if you have permission to view them. */
  readonly sponsorEntity: Maybe<GraphQLSponsor>;
  /** The entity that is being sponsored */
  readonly sponsorable: GraphQLSponsorable;
  /** The associated sponsorship tier */
  readonly tier: Maybe<GraphQLSponsorsTier>;
  /** Identifies the date and time when the current tier was chosen for this sponsorship. */
  readonly tierSelectedAt: Maybe<Scalars['DateTime']>;
};

/** The connection type for Sponsorship. */
export type GraphQLSponsorshipConnection = {
  readonly __typename?: 'SponsorshipConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSponsorshipEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSponsorship>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
  /** The total amount in cents of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  readonly totalRecurringMonthlyPriceInCents: Scalars['Int'];
  /** The total amount in USD of all recurring sponsorships in the connection whose amount you can view. Does not include one-time sponsorships. */
  readonly totalRecurringMonthlyPriceInDollars: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLSponsorshipEdge = {
  readonly __typename?: 'SponsorshipEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSponsorship>;
};

/** An update sent to sponsors of a user or organization on GitHub Sponsors. */
export type GraphQLSponsorshipNewsletter = GraphQLNode & {
  readonly __typename?: 'SponsorshipNewsletter';
  /** The contents of the newsletter, the message the sponsorable wanted to give. */
  readonly body: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Indicates if the newsletter has been made available to sponsors. */
  readonly isPublished: Scalars['Boolean'];
  /** The user or organization this newsletter is from. */
  readonly sponsorable: GraphQLSponsorable;
  /** The subject of the newsletter, what it's about. */
  readonly subject: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** The connection type for SponsorshipNewsletter. */
export type GraphQLSponsorshipNewsletterConnection = {
  readonly __typename?: 'SponsorshipNewsletterConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSponsorshipNewsletterEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSponsorshipNewsletter>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLSponsorshipNewsletterEdge = {
  readonly __typename?: 'SponsorshipNewsletterEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSponsorshipNewsletter>;
};

/** Ordering options for sponsorship newsletter connections. */
export type GraphQLSponsorshipNewsletterOrder = {
  /** The field to order sponsorship newsletters by. */
  readonly field: GraphQLSponsorshipNewsletterOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which sponsorship update connections can be ordered. */
export enum GraphQLSponsorshipNewsletterOrderField {
  /** Order sponsorship newsletters by when they were created. */
  CREATED_AT = 'CREATED_AT'
}

/** Ordering options for sponsorship connections. */
export type GraphQLSponsorshipOrder = {
  /** The field to order sponsorship by. */
  readonly field: GraphQLSponsorshipOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which sponsorship connections can be ordered. */
export enum GraphQLSponsorshipOrderField {
  /** Order sponsorship by creation time. */
  CREATED_AT = 'CREATED_AT'
}

/** The privacy of a sponsorship */
export enum GraphQLSponsorshipPrivacy {
  /** Public */
  PUBLIC = 'PUBLIC',
  /** Private */
  PRIVATE = 'PRIVATE'
}

/** Ways in which star connections can be ordered. */
export type GraphQLStarOrder = {
  /** The field in which to order nodes by. */
  readonly field: GraphQLStarOrderField;
  /** The direction in which to order nodes. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which star connections can be ordered. */
export enum GraphQLStarOrderField {
  /** Allows ordering a list of stars by when they were created. */
  STARRED_AT = 'STARRED_AT'
}

/** The connection type for User. */
export type GraphQLStargazerConnection = {
  readonly __typename?: 'StargazerConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLStargazerEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents a user that's starred a repository. */
export type GraphQLStargazerEdge = {
  readonly __typename?: 'StargazerEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  readonly node: GraphQLUser;
  /** Identifies when the item was starred. */
  readonly starredAt: Scalars['DateTime'];
};

/** Things that can be starred. */
export type GraphQLStarrable = {
  readonly id: Scalars['ID'];
  /** Returns a count of how many stargazers there are on this object */
  readonly stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  readonly stargazers: GraphQLStargazerConnection;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  readonly viewerHasStarred: Scalars['Boolean'];
};


/** Things that can be starred. */
export type GraphQLStarrableStargazersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLStarOrder>;
};

/** The connection type for Repository. */
export type GraphQLStarredRepositoryConnection = {
  readonly __typename?: 'StarredRepositoryConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLStarredRepositoryEdge>>>;
  /** Is the list of stars for this user truncated? This is true for users that have many stars. */
  readonly isOverLimit: Scalars['Boolean'];
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLRepository>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents a starred repository. */
export type GraphQLStarredRepositoryEdge = {
  readonly __typename?: 'StarredRepositoryEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  readonly node: GraphQLRepository;
  /** Identifies when the item was starred. */
  readonly starredAt: Scalars['DateTime'];
};

/** Autogenerated input type of StartRepositoryMigration */
export type GraphQLStartRepositoryMigrationInput = {
  /** The ID of the Octoshift migration source. */
  readonly sourceId: Scalars['ID'];
  /** The ID of the organization that will own the imported repository. */
  readonly ownerId: Scalars['ID'];
  /** The Octoshift migration source repository URL. */
  readonly sourceRepositoryUrl: Scalars['URI'];
  /** The name of the imported repository. */
  readonly repositoryName: Scalars['String'];
  /** Whether to continue the migration on error */
  readonly continueOnError: Maybe<Scalars['Boolean']>;
  /** The signed URL to access the user-uploaded git archive */
  readonly gitArchiveUrl: Maybe<Scalars['String']>;
  /** The signed URL to access the user-uploaded metadata archive */
  readonly metadataArchiveUrl: Maybe<Scalars['String']>;
  /** The Octoshift migration source access token. */
  readonly accessToken: Maybe<Scalars['String']>;
  /** The GitHub personal access token of the user importing to the target repository. */
  readonly githubPat: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of StartRepositoryMigration */
export type GraphQLStartRepositoryMigrationPayload = {
  readonly __typename?: 'StartRepositoryMigrationPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The new Octoshift repository migration. */
  readonly repositoryMigration: Maybe<GraphQLRepositoryMigration>;
};

/** Represents a commit status. */
export type GraphQLStatus = GraphQLNode & {
  readonly __typename?: 'Status';
  /** A list of status contexts and check runs for this commit. */
  readonly combinedContexts: GraphQLStatusCheckRollupContextConnection;
  /** The commit this status is attached to. */
  readonly commit: Maybe<GraphQLCommit>;
  /** Looks up an individual status context by context name. */
  readonly context: Maybe<GraphQLStatusContext>;
  /** The individual status contexts for this commit. */
  readonly contexts: ReadonlyArray<GraphQLStatusContext>;
  readonly id: Scalars['ID'];
  /** The combined commit status. */
  readonly state: GraphQLStatusState;
};


/** Represents a commit status. */
export type GraphQLStatusCombinedContextsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** Represents a commit status. */
export type GraphQLStatusContextArgs = {
  name: Scalars['String'];
};

/** Represents the rollup for both the check runs and status for a commit. */
export type GraphQLStatusCheckRollup = GraphQLNode & {
  readonly __typename?: 'StatusCheckRollup';
  /** The commit the status and check runs are attached to. */
  readonly commit: Maybe<GraphQLCommit>;
  /** A list of status contexts and check runs for this commit. */
  readonly contexts: GraphQLStatusCheckRollupContextConnection;
  readonly id: Scalars['ID'];
  /** The combined status for the commit. */
  readonly state: GraphQLStatusState;
};


/** Represents the rollup for both the check runs and status for a commit. */
export type GraphQLStatusCheckRollupContextsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** Types that can be inside a StatusCheckRollup context. */
export type GraphQLStatusCheckRollupContext = GraphQLCheckRun | GraphQLStatusContext;

/** The connection type for StatusCheckRollupContext. */
export type GraphQLStatusCheckRollupContextConnection = {
  readonly __typename?: 'StatusCheckRollupContextConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLStatusCheckRollupContextEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLStatusCheckRollupContext>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLStatusCheckRollupContextEdge = {
  readonly __typename?: 'StatusCheckRollupContextEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLStatusCheckRollupContext>;
};

/** Represents an individual commit status context */
export type GraphQLStatusContext = GraphQLRequirableByPullRequest & GraphQLNode & {
  readonly __typename?: 'StatusContext';
  /** The avatar of the OAuth application or the user that created the status */
  readonly avatarUrl: Maybe<Scalars['URI']>;
  /** This commit this status context is attached to. */
  readonly commit: Maybe<GraphQLCommit>;
  /** The name of this status context. */
  readonly context: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The actor who created this status context. */
  readonly creator: Maybe<GraphQLActor>;
  /** The description for this status context. */
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  /** Whether this is required to pass before merging for a specific pull request. */
  readonly isRequired: Scalars['Boolean'];
  /** The state of this status context. */
  readonly state: GraphQLStatusState;
  /** The URL for this status context. */
  readonly targetUrl: Maybe<Scalars['URI']>;
};


/** Represents an individual commit status context */
export type GraphQLStatusContextAvatarUrlArgs = {
  size?: Maybe<Scalars['Int']>;
};


/** Represents an individual commit status context */
export type GraphQLStatusContextIsRequiredArgs = {
  pullRequestId: Maybe<Scalars['ID']>;
  pullRequestNumber: Maybe<Scalars['Int']>;
};

/** The possible commit status states. */
export enum GraphQLStatusState {
  /** Status is expected. */
  EXPECTED = 'EXPECTED',
  /** Status is errored. */
  ERROR = 'ERROR',
  /** Status is failing. */
  FAILURE = 'FAILURE',
  /** Status is pending. */
  PENDING = 'PENDING',
  /** Status is successful. */
  SUCCESS = 'SUCCESS'
}

/** Autogenerated input type of SubmitPullRequestReview */
export type GraphQLSubmitPullRequestReviewInput = {
  /** The Pull Request ID to submit any pending reviews. */
  readonly pullRequestId: Maybe<Scalars['ID']>;
  /** The Pull Request Review ID to submit. */
  readonly pullRequestReviewId: Maybe<Scalars['ID']>;
  /** The event to send to the Pull Request Review. */
  readonly event: GraphQLPullRequestReviewEvent;
  /** The text field to set on the Pull Request Review. */
  readonly body: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of SubmitPullRequestReview */
export type GraphQLSubmitPullRequestReviewPayload = {
  readonly __typename?: 'SubmitPullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The submitted pull request review. */
  readonly pullRequestReview: Maybe<GraphQLPullRequestReview>;
};

/** A pointer to a repository at a specific revision embedded inside another repository. */
export type GraphQLSubmodule = {
  readonly __typename?: 'Submodule';
  /** The branch of the upstream submodule for tracking updates */
  readonly branch: Maybe<Scalars['String']>;
  /** The git URL of the submodule repository */
  readonly gitUrl: Scalars['URI'];
  /** The name of the submodule in .gitmodules */
  readonly name: Scalars['String'];
  /** The path in the superproject that this submodule is located in */
  readonly path: Scalars['String'];
  /** The commit revision of the subproject repository being tracked by the submodule */
  readonly subprojectCommitOid: Maybe<Scalars['GitObjectID']>;
};

/** The connection type for Submodule. */
export type GraphQLSubmoduleConnection = {
  readonly __typename?: 'SubmoduleConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLSubmoduleEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLSubmodule>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLSubmoduleEdge = {
  readonly __typename?: 'SubmoduleEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLSubmodule>;
};

/** Entities that can be subscribed to for web and email notifications. */
export type GraphQLSubscribable = {
  readonly id: Scalars['ID'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  readonly viewerCanSubscribe: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  readonly viewerSubscription: Maybe<GraphQLSubscriptionState>;
};

/** Represents a 'subscribed' event on a given `Subscribable`. */
export type GraphQLSubscribedEvent = GraphQLNode & {
  readonly __typename?: 'SubscribedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Object referenced by event. */
  readonly subscribable: GraphQLSubscribable;
};

/** The possible states of a subscription. */
export enum GraphQLSubscriptionState {
  /** The User is only notified when participating or @mentioned. */
  UNSUBSCRIBED = 'UNSUBSCRIBED',
  /** The User is notified of all conversations. */
  SUBSCRIBED = 'SUBSCRIBED',
  /** The User is never notified. */
  IGNORED = 'IGNORED'
}

/** A suggestion to review a pull request based on a user's commit history and review comments. */
export type GraphQLSuggestedReviewer = {
  readonly __typename?: 'SuggestedReviewer';
  /** Is this suggestion based on past commits? */
  readonly isAuthor: Scalars['Boolean'];
  /** Is this suggestion based on past review comments? */
  readonly isCommenter: Scalars['Boolean'];
  /** Identifies the user suggested to review the pull request. */
  readonly reviewer: GraphQLUser;
};

/** Represents a Git tag. */
export type GraphQLTag = GraphQLNode & GraphQLGitObject & {
  readonly __typename?: 'Tag';
  /** An abbreviated version of the Git object ID */
  readonly abbreviatedOid: Scalars['String'];
  /** The HTTP path for this Git object */
  readonly commitResourcePath: Scalars['URI'];
  /** The HTTP URL for this Git object */
  readonly commitUrl: Scalars['URI'];
  readonly id: Scalars['ID'];
  /** The Git tag message. */
  readonly message: Maybe<Scalars['String']>;
  /** The Git tag name. */
  readonly name: Scalars['String'];
  /** The Git object ID */
  readonly oid: Scalars['GitObjectID'];
  /** The Repository the Git object belongs to */
  readonly repository: GraphQLRepository;
  /** Details about the tag author. */
  readonly tagger: Maybe<GraphQLGitActor>;
  /** The Git object the tag points to. */
  readonly target: GraphQLGitObject;
};

/** A team of users in an organization. */
export type GraphQLTeam = GraphQLNode & GraphQLSubscribable & GraphQLMemberStatusable & {
  readonly __typename?: 'Team';
  /** A list of teams that are ancestors of this team. */
  readonly ancestors: GraphQLTeamConnection;
  /** A URL pointing to the team's avatar. */
  readonly avatarUrl: Maybe<Scalars['URI']>;
  /** List of child teams belonging to this team */
  readonly childTeams: GraphQLTeamConnection;
  /** The slug corresponding to the organization and team. */
  readonly combinedSlug: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The description of the team. */
  readonly description: Maybe<Scalars['String']>;
  /** Find a team discussion by its number. */
  readonly discussion: Maybe<GraphQLTeamDiscussion>;
  /** A list of team discussions. */
  readonly discussions: GraphQLTeamDiscussionConnection;
  /** The HTTP path for team discussions */
  readonly discussionsResourcePath: Scalars['URI'];
  /** The HTTP URL for team discussions */
  readonly discussionsUrl: Scalars['URI'];
  /** The HTTP path for editing this team */
  readonly editTeamResourcePath: Scalars['URI'];
  /** The HTTP URL for editing this team */
  readonly editTeamUrl: Scalars['URI'];
  readonly id: Scalars['ID'];
  /** A list of pending invitations for users to this team */
  readonly invitations: Maybe<GraphQLOrganizationInvitationConnection>;
  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */
  readonly memberStatuses: GraphQLUserStatusConnection;
  /** A list of users who are members of this team. */
  readonly members: GraphQLTeamMemberConnection;
  /** The HTTP path for the team' members */
  readonly membersResourcePath: Scalars['URI'];
  /** The HTTP URL for the team' members */
  readonly membersUrl: Scalars['URI'];
  /** The name of the team. */
  readonly name: Scalars['String'];
  /** The HTTP path creating a new team */
  readonly newTeamResourcePath: Scalars['URI'];
  /** The HTTP URL creating a new team */
  readonly newTeamUrl: Scalars['URI'];
  /** The organization that owns this team. */
  readonly organization: GraphQLOrganization;
  /** The parent team of the team. */
  readonly parentTeam: Maybe<GraphQLTeam>;
  /** The level of privacy the team has. */
  readonly privacy: GraphQLTeamPrivacy;
  /** A list of repositories this team has access to. */
  readonly repositories: GraphQLTeamRepositoryConnection;
  /** The HTTP path for this team's repositories */
  readonly repositoriesResourcePath: Scalars['URI'];
  /** The HTTP URL for this team's repositories */
  readonly repositoriesUrl: Scalars['URI'];
  /** The HTTP path for this team */
  readonly resourcePath: Scalars['URI'];
  /** The slug corresponding to the team. */
  readonly slug: Scalars['String'];
  /** The HTTP path for this team's teams */
  readonly teamsResourcePath: Scalars['URI'];
  /** The HTTP URL for this team's teams */
  readonly teamsUrl: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this team */
  readonly url: Scalars['URI'];
  /** Team is adminable by the viewer. */
  readonly viewerCanAdminister: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  readonly viewerCanSubscribe: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  readonly viewerSubscription: Maybe<GraphQLSubscriptionState>;
};


/** A team of users in an organization. */
export type GraphQLTeamAncestorsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A team of users in an organization. */
export type GraphQLTeamAvatarUrlArgs = {
  size?: Maybe<Scalars['Int']>;
};


/** A team of users in an organization. */
export type GraphQLTeamChildTeamsArgs = {
  orderBy: Maybe<GraphQLTeamOrder>;
  userLogins: Maybe<ReadonlyArray<Scalars['String']>>;
  immediateOnly?: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A team of users in an organization. */
export type GraphQLTeamDiscussionArgs = {
  number: Scalars['Int'];
};


/** A team of users in an organization. */
export type GraphQLTeamDiscussionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  isPinned: Maybe<Scalars['Boolean']>;
  orderBy: Maybe<GraphQLTeamDiscussionOrder>;
};


/** A team of users in an organization. */
export type GraphQLTeamInvitationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A team of users in an organization. */
export type GraphQLTeamMemberStatusesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLUserStatusOrder>;
};


/** A team of users in an organization. */
export type GraphQLTeamMembersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
  membership?: Maybe<GraphQLTeamMembershipType>;
  role: Maybe<GraphQLTeamMemberRole>;
  orderBy: Maybe<GraphQLTeamMemberOrder>;
};


/** A team of users in an organization. */
export type GraphQLTeamRepositoriesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
  orderBy: Maybe<GraphQLTeamRepositoryOrder>;
};

/** Audit log entry for a team.add_member event. */
export type GraphQLTeamAddMemberAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLTeamAuditEntryData & {
  readonly __typename?: 'TeamAddMemberAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  readonly isLdapMapped: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The team associated with the action */
  readonly team: Maybe<GraphQLTeam>;
  /** The name of the team */
  readonly teamName: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  readonly teamResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for this team */
  readonly teamUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a team.add_repository event. */
export type GraphQLTeamAddRepositoryAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & GraphQLTeamAuditEntryData & {
  readonly __typename?: 'TeamAddRepositoryAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  readonly isLdapMapped: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The team associated with the action */
  readonly team: Maybe<GraphQLTeam>;
  /** The name of the team */
  readonly teamName: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  readonly teamResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for this team */
  readonly teamUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Metadata for an audit entry with action team.* */
export type GraphQLTeamAuditEntryData = {
  /** The team associated with the action */
  readonly team: Maybe<GraphQLTeam>;
  /** The name of the team */
  readonly teamName: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  readonly teamResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for this team */
  readonly teamUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a team.change_parent_team event. */
export type GraphQLTeamChangeParentTeamAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLTeamAuditEntryData & {
  readonly __typename?: 'TeamChangeParentTeamAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  readonly isLdapMapped: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The new parent team. */
  readonly parentTeam: Maybe<GraphQLTeam>;
  /** The name of the new parent team */
  readonly parentTeamName: Maybe<Scalars['String']>;
  /** The name of the former parent team */
  readonly parentTeamNameWas: Maybe<Scalars['String']>;
  /** The HTTP path for the parent team */
  readonly parentTeamResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the parent team */
  readonly parentTeamUrl: Maybe<Scalars['URI']>;
  /** The former parent team. */
  readonly parentTeamWas: Maybe<GraphQLTeam>;
  /** The HTTP path for the previous parent team */
  readonly parentTeamWasResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the previous parent team */
  readonly parentTeamWasUrl: Maybe<Scalars['URI']>;
  /** The team associated with the action */
  readonly team: Maybe<GraphQLTeam>;
  /** The name of the team */
  readonly teamName: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  readonly teamResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for this team */
  readonly teamUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The connection type for Team. */
export type GraphQLTeamConnection = {
  readonly __typename?: 'TeamConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLTeamEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLTeam>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** A team discussion. */
export type GraphQLTeamDiscussion = GraphQLNode & GraphQLComment & GraphQLDeletable & GraphQLReactable & GraphQLSubscribable & GraphQLUniformResourceLocatable & GraphQLUpdatable & GraphQLUpdatableComment & {
  readonly __typename?: 'TeamDiscussion';
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the discussion's team. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** The body as Markdown. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  readonly bodyText: Scalars['String'];
  /** Identifies the discussion body hash. */
  readonly bodyVersion: Scalars['String'];
  /** A list of comments on this discussion. */
  readonly comments: GraphQLTeamDiscussionCommentConnection;
  /** The HTTP path for discussion comments */
  readonly commentsResourcePath: Scalars['URI'];
  /** The HTTP URL for discussion comments */
  readonly commentsUrl: Scalars['URI'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** Whether or not the discussion is pinned. */
  readonly isPinned: Scalars['Boolean'];
  /** Whether or not the discussion is only visible to team members and org admins. */
  readonly isPrivate: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** Identifies the discussion within its team. */
  readonly number: Scalars['Int'];
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The HTTP path for this discussion */
  readonly resourcePath: Scalars['URI'];
  /** The team that defines the context of this discussion. */
  readonly team: GraphQLTeam;
  /** The title of the discussion */
  readonly title: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this discussion */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
  /** Whether or not the current viewer can pin this discussion. */
  readonly viewerCanPin: Scalars['Boolean'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Check if the viewer is able to change their subscription status for the repository. */
  readonly viewerCanSubscribe: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */
  readonly viewerSubscription: Maybe<GraphQLSubscriptionState>;
};


/** A team discussion. */
export type GraphQLTeamDiscussionCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLTeamDiscussionCommentOrder>;
  fromComment: Maybe<Scalars['Int']>;
};


/** A team discussion. */
export type GraphQLTeamDiscussionReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** A team discussion. */
export type GraphQLTeamDiscussionUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** A comment on a team discussion. */
export type GraphQLTeamDiscussionComment = GraphQLNode & GraphQLComment & GraphQLDeletable & GraphQLReactable & GraphQLUniformResourceLocatable & GraphQLUpdatable & GraphQLUpdatableComment & {
  readonly __typename?: 'TeamDiscussionComment';
  /** The actor who authored the comment. */
  readonly author: Maybe<GraphQLActor>;
  /** Author's association with the comment's team. */
  readonly authorAssociation: GraphQLCommentAuthorAssociation;
  /** The body as Markdown. */
  readonly body: Scalars['String'];
  /** The body rendered to HTML. */
  readonly bodyHTML: Scalars['HTML'];
  /** The body rendered to text. */
  readonly bodyText: Scalars['String'];
  /** The current version of the body content. */
  readonly bodyVersion: Scalars['String'];
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Check if this comment was created via an email reply. */
  readonly createdViaEmail: Scalars['Boolean'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The discussion this comment is about. */
  readonly discussion: GraphQLTeamDiscussion;
  /** The actor who edited the comment. */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Check if this comment was edited and includes an edit with the creation data */
  readonly includesCreatedEdit: Scalars['Boolean'];
  /** The moment the editor made the last edit */
  readonly lastEditedAt: Maybe<Scalars['DateTime']>;
  /** Identifies the comment number. */
  readonly number: Scalars['Int'];
  /** Identifies when the comment was published at. */
  readonly publishedAt: Maybe<Scalars['DateTime']>;
  /** A list of reactions grouped by content left on the subject. */
  readonly reactionGroups: Maybe<ReadonlyArray<GraphQLReactionGroup>>;
  /** A list of Reactions left on the Issue. */
  readonly reactions: GraphQLReactionConnection;
  /** The HTTP path for this comment */
  readonly resourcePath: Scalars['URI'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this comment */
  readonly url: Scalars['URI'];
  /** A list of edits to this content. */
  readonly userContentEdits: Maybe<GraphQLUserContentEditConnection>;
  /** Check if the current viewer can delete this object. */
  readonly viewerCanDelete: Scalars['Boolean'];
  /** Can user react to this subject */
  readonly viewerCanReact: Scalars['Boolean'];
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
  /** Did the viewer author this comment. */
  readonly viewerDidAuthor: Scalars['Boolean'];
};


/** A comment on a team discussion. */
export type GraphQLTeamDiscussionCommentReactionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  content: Maybe<GraphQLReactionContent>;
  orderBy: Maybe<GraphQLReactionOrder>;
};


/** A comment on a team discussion. */
export type GraphQLTeamDiscussionCommentUserContentEditsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The connection type for TeamDiscussionComment. */
export type GraphQLTeamDiscussionCommentConnection = {
  readonly __typename?: 'TeamDiscussionCommentConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLTeamDiscussionCommentEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLTeamDiscussionComment>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLTeamDiscussionCommentEdge = {
  readonly __typename?: 'TeamDiscussionCommentEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLTeamDiscussionComment>;
};

/** Ways in which team discussion comment connections can be ordered. */
export type GraphQLTeamDiscussionCommentOrder = {
  /** The field by which to order nodes. */
  readonly field: GraphQLTeamDiscussionCommentOrderField;
  /** The direction in which to order nodes. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which team discussion comment connections can be ordered. */
export enum GraphQLTeamDiscussionCommentOrderField {
  /** Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */
  NUMBER = 'NUMBER'
}

/** The connection type for TeamDiscussion. */
export type GraphQLTeamDiscussionConnection = {
  readonly __typename?: 'TeamDiscussionConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLTeamDiscussionEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLTeamDiscussion>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLTeamDiscussionEdge = {
  readonly __typename?: 'TeamDiscussionEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLTeamDiscussion>;
};

/** Ways in which team discussion connections can be ordered. */
export type GraphQLTeamDiscussionOrder = {
  /** The field by which to order nodes. */
  readonly field: GraphQLTeamDiscussionOrderField;
  /** The direction in which to order nodes. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which team discussion connections can be ordered. */
export enum GraphQLTeamDiscussionOrderField {
  /** Allows chronological ordering of team discussions. */
  CREATED_AT = 'CREATED_AT'
}

/** An edge in a connection. */
export type GraphQLTeamEdge = {
  readonly __typename?: 'TeamEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLTeam>;
};

/** The connection type for User. */
export type GraphQLTeamMemberConnection = {
  readonly __typename?: 'TeamMemberConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLTeamMemberEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents a user who is a member of a team. */
export type GraphQLTeamMemberEdge = {
  readonly __typename?: 'TeamMemberEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The HTTP path to the organization's member access page. */
  readonly memberAccessResourcePath: Scalars['URI'];
  /** The HTTP URL to the organization's member access page. */
  readonly memberAccessUrl: Scalars['URI'];
  readonly node: GraphQLUser;
  /** The role the member has on the team. */
  readonly role: GraphQLTeamMemberRole;
};

/** Ordering options for team member connections */
export type GraphQLTeamMemberOrder = {
  /** The field to order team members by. */
  readonly field: GraphQLTeamMemberOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which team member connections can be ordered. */
export enum GraphQLTeamMemberOrderField {
  /** Order team members by login */
  LOGIN = 'LOGIN',
  /** Order team members by creation time */
  CREATED_AT = 'CREATED_AT'
}

/** The possible team member roles; either 'maintainer' or 'member'. */
export enum GraphQLTeamMemberRole {
  /** A team maintainer has permission to add and remove team members. */
  MAINTAINER = 'MAINTAINER',
  /** A team member has no administrative permissions on the team. */
  MEMBER = 'MEMBER'
}

/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */
export enum GraphQLTeamMembershipType {
  /** Includes only immediate members of the team. */
  IMMEDIATE = 'IMMEDIATE',
  /** Includes only child team members for the team. */
  CHILD_TEAM = 'CHILD_TEAM',
  /** Includes immediate and child team members for the team. */
  ALL = 'ALL'
}

/** Ways in which team connections can be ordered. */
export type GraphQLTeamOrder = {
  /** The field in which to order nodes by. */
  readonly field: GraphQLTeamOrderField;
  /** The direction in which to order nodes. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which team connections can be ordered. */
export enum GraphQLTeamOrderField {
  /** Allows ordering a list of teams by name. */
  NAME = 'NAME'
}

/** The possible team privacy values. */
export enum GraphQLTeamPrivacy {
  /** A secret team can only be seen by its members. */
  SECRET = 'SECRET',
  /** A visible team can be seen and @mentioned by every member of the organization. */
  VISIBLE = 'VISIBLE'
}

/** Audit log entry for a team.remove_member event. */
export type GraphQLTeamRemoveMemberAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLTeamAuditEntryData & {
  readonly __typename?: 'TeamRemoveMemberAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  readonly isLdapMapped: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The team associated with the action */
  readonly team: Maybe<GraphQLTeam>;
  /** The name of the team */
  readonly teamName: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  readonly teamResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for this team */
  readonly teamUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** Audit log entry for a team.remove_repository event. */
export type GraphQLTeamRemoveRepositoryAuditEntry = GraphQLNode & GraphQLAuditEntry & GraphQLOrganizationAuditEntryData & GraphQLRepositoryAuditEntryData & GraphQLTeamAuditEntryData & {
  readonly __typename?: 'TeamRemoveRepositoryAuditEntry';
  /** The action name */
  readonly action: Scalars['String'];
  /** The user who initiated the action */
  readonly actor: Maybe<GraphQLAuditEntryActor>;
  /** The IP address of the actor */
  readonly actorIp: Maybe<Scalars['String']>;
  /** A readable representation of the actor's location */
  readonly actorLocation: Maybe<GraphQLActorLocation>;
  /** The username of the user who initiated the action */
  readonly actorLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the actor. */
  readonly actorResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the actor. */
  readonly actorUrl: Maybe<Scalars['URI']>;
  /** The time the action was initiated */
  readonly createdAt: Scalars['PreciseDateTime'];
  readonly id: Scalars['ID'];
  /** Whether the team was mapped to an LDAP Group. */
  readonly isLdapMapped: Maybe<Scalars['Boolean']>;
  /** The corresponding operation type for the action */
  readonly operationType: Maybe<GraphQLOperationType>;
  /** The Organization associated with the Audit Entry. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** The name of the Organization. */
  readonly organizationName: Maybe<Scalars['String']>;
  /** The HTTP path for the organization */
  readonly organizationResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the organization */
  readonly organizationUrl: Maybe<Scalars['URI']>;
  /** The repository associated with the action */
  readonly repository: Maybe<GraphQLRepository>;
  /** The name of the repository */
  readonly repositoryName: Maybe<Scalars['String']>;
  /** The HTTP path for the repository */
  readonly repositoryResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the repository */
  readonly repositoryUrl: Maybe<Scalars['URI']>;
  /** The team associated with the action */
  readonly team: Maybe<GraphQLTeam>;
  /** The name of the team */
  readonly teamName: Maybe<Scalars['String']>;
  /** The HTTP path for this team */
  readonly teamResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for this team */
  readonly teamUrl: Maybe<Scalars['URI']>;
  /** The user affected by the action */
  readonly user: Maybe<GraphQLUser>;
  /** For actions involving two users, the actor is the initiator and the user is the affected user. */
  readonly userLogin: Maybe<Scalars['String']>;
  /** The HTTP path for the user. */
  readonly userResourcePath: Maybe<Scalars['URI']>;
  /** The HTTP URL for the user. */
  readonly userUrl: Maybe<Scalars['URI']>;
};

/** The connection type for Repository. */
export type GraphQLTeamRepositoryConnection = {
  readonly __typename?: 'TeamRepositoryConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLTeamRepositoryEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLRepository>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** Represents a team repository. */
export type GraphQLTeamRepositoryEdge = {
  readonly __typename?: 'TeamRepositoryEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  readonly node: GraphQLRepository;
  /** The permission level the team has on the repository */
  readonly permission: GraphQLRepositoryPermission;
};

/** Ordering options for team repository connections */
export type GraphQLTeamRepositoryOrder = {
  /** The field to order repositories by. */
  readonly field: GraphQLTeamRepositoryOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which team repository connections can be ordered. */
export enum GraphQLTeamRepositoryOrderField {
  /** Order repositories by creation time */
  CREATED_AT = 'CREATED_AT',
  /** Order repositories by update time */
  UPDATED_AT = 'UPDATED_AT',
  /** Order repositories by push time */
  PUSHED_AT = 'PUSHED_AT',
  /** Order repositories by name */
  NAME = 'NAME',
  /** Order repositories by permission */
  PERMISSION = 'PERMISSION',
  /** Order repositories by number of stargazers */
  STARGAZERS = 'STARGAZERS'
}

/** The role of a user on a team. */
export enum GraphQLTeamRole {
  /** User has admin rights on the team. */
  ADMIN = 'ADMIN',
  /** User is a member of the team. */
  MEMBER = 'MEMBER'
}

/** A text match within a search result. */
export type GraphQLTextMatch = {
  readonly __typename?: 'TextMatch';
  /** The specific text fragment within the property matched on. */
  readonly fragment: Scalars['String'];
  /** Highlights within the matched fragment. */
  readonly highlights: ReadonlyArray<GraphQLTextMatchHighlight>;
  /** The property matched on. */
  readonly property: Scalars['String'];
};

/** Represents a single highlight in a search result match. */
export type GraphQLTextMatchHighlight = {
  readonly __typename?: 'TextMatchHighlight';
  /** The indice in the fragment where the matched text begins. */
  readonly beginIndice: Scalars['Int'];
  /** The indice in the fragment where the matched text ends. */
  readonly endIndice: Scalars['Int'];
  /** The text matched. */
  readonly text: Scalars['String'];
};

/** A topic aggregates entities that are related to a subject. */
export type GraphQLTopic = GraphQLNode & GraphQLStarrable & {
  readonly __typename?: 'Topic';
  readonly id: Scalars['ID'];
  /** The topic's name. */
  readonly name: Scalars['String'];
  /**
   * A list of related topics, including aliases of this topic, sorted with the most relevant
   * first. Returns up to 10 Topics.
   */
  readonly relatedTopics: ReadonlyArray<GraphQLTopic>;
  /** A list of repositories. */
  readonly repositories: GraphQLRepositoryConnection;
  /** Returns a count of how many stargazers there are on this object */
  readonly stargazerCount: Scalars['Int'];
  /** A list of users who have starred this starrable. */
  readonly stargazers: GraphQLStargazerConnection;
  /** Returns a boolean indicating whether the viewing user has starred this starrable. */
  readonly viewerHasStarred: Scalars['Boolean'];
};


/** A topic aggregates entities that are related to a subject. */
export type GraphQLTopicRelatedTopicsArgs = {
  first?: Maybe<Scalars['Int']>;
};


/** A topic aggregates entities that are related to a subject. */
export type GraphQLTopicRepositoriesArgs = {
  privacy: Maybe<GraphQLRepositoryPrivacy>;
  orderBy: Maybe<GraphQLRepositoryOrder>;
  affiliations: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  ownerAffiliations?: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  isLocked: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  sponsorableOnly?: Maybe<Scalars['Boolean']>;
};


/** A topic aggregates entities that are related to a subject. */
export type GraphQLTopicStargazersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLStarOrder>;
};

/** Metadata for an audit entry with a topic. */
export type GraphQLTopicAuditEntryData = {
  /** The name of the topic added to the repository */
  readonly topic: Maybe<GraphQLTopic>;
  /** The name of the topic added to the repository */
  readonly topicName: Maybe<Scalars['String']>;
};

/** Reason that the suggested topic is declined. */
export enum GraphQLTopicSuggestionDeclineReason {
  /** The suggested topic is not relevant to the repository. */
  NOT_RELEVANT = 'NOT_RELEVANT',
  /** The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1). */
  TOO_SPECIFIC = 'TOO_SPECIFIC',
  /** The viewer does not like the suggested topic. */
  PERSONAL_PREFERENCE = 'PERSONAL_PREFERENCE',
  /** The suggested topic is too general for the repository. */
  TOO_GENERAL = 'TOO_GENERAL'
}

/** The possible states of a tracked issue. */
export enum GraphQLTrackedIssueStates {
  /** The tracked issue is open */
  OPEN = 'OPEN',
  /** The tracked issue is closed */
  CLOSED = 'CLOSED'
}

/** Autogenerated input type of TransferIssue */
export type GraphQLTransferIssueInput = {
  /** The Node ID of the issue to be transferred */
  readonly issueId: Scalars['ID'];
  /** The Node ID of the repository the issue should be transferred to */
  readonly repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of TransferIssue */
export type GraphQLTransferIssuePayload = {
  readonly __typename?: 'TransferIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The issue that was transferred */
  readonly issue: Maybe<GraphQLIssue>;
};

/** Represents a 'transferred' event on a given issue or pull request. */
export type GraphQLTransferredEvent = GraphQLNode & {
  readonly __typename?: 'TransferredEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The repository this came from */
  readonly fromRepository: Maybe<GraphQLRepository>;
  readonly id: Scalars['ID'];
  /** Identifies the issue associated with the event. */
  readonly issue: GraphQLIssue;
};

/** Represents a Git tree. */
export type GraphQLTree = GraphQLNode & GraphQLGitObject & {
  readonly __typename?: 'Tree';
  /** An abbreviated version of the Git object ID */
  readonly abbreviatedOid: Scalars['String'];
  /** The HTTP path for this Git object */
  readonly commitResourcePath: Scalars['URI'];
  /** The HTTP URL for this Git object */
  readonly commitUrl: Scalars['URI'];
  /** A list of tree entries. */
  readonly entries: Maybe<ReadonlyArray<GraphQLTreeEntry>>;
  readonly id: Scalars['ID'];
  /** The Git object ID */
  readonly oid: Scalars['GitObjectID'];
  /** The Repository the Git object belongs to */
  readonly repository: GraphQLRepository;
};

/** Represents a Git tree entry. */
export type GraphQLTreeEntry = {
  readonly __typename?: 'TreeEntry';
  /** The extension of the file */
  readonly extension: Maybe<Scalars['String']>;
  /** Whether or not this tree entry is generated */
  readonly isGenerated: Scalars['Boolean'];
  /** Entry file mode. */
  readonly mode: Scalars['Int'];
  /** Entry file name. */
  readonly name: Scalars['String'];
  /** Entry file object. */
  readonly object: Maybe<GraphQLGitObject>;
  /** Entry file Git object ID. */
  readonly oid: Scalars['GitObjectID'];
  /** The full path of the file. */
  readonly path: Maybe<Scalars['String']>;
  /** The Repository the tree entry belongs to */
  readonly repository: GraphQLRepository;
  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */
  readonly submodule: Maybe<GraphQLSubmodule>;
  /** Entry file type. */
  readonly type: Scalars['String'];
};


/** Autogenerated input type of UnarchiveRepository */
export type GraphQLUnarchiveRepositoryInput = {
  /** The ID of the repository to unarchive. */
  readonly repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnarchiveRepository */
export type GraphQLUnarchiveRepositoryPayload = {
  readonly __typename?: 'UnarchiveRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The repository that was unarchived. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** Represents an 'unassigned' event on any assignable object. */
export type GraphQLUnassignedEvent = GraphQLNode & {
  readonly __typename?: 'UnassignedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the assignable associated with the event. */
  readonly assignable: GraphQLAssignable;
  /** Identifies the user or mannequin that was unassigned. */
  readonly assignee: Maybe<GraphQLAssignee>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /**
   * Identifies the subject (user) who was unassigned.
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */
  readonly user: Maybe<GraphQLUser>;
};

/** Autogenerated input type of UnfollowUser */
export type GraphQLUnfollowUserInput = {
  /** ID of the user to unfollow. */
  readonly userId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnfollowUser */
export type GraphQLUnfollowUserPayload = {
  readonly __typename?: 'UnfollowUserPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The user that was unfollowed. */
  readonly user: Maybe<GraphQLUser>;
};

/** Represents a type that can be retrieved by a URL. */
export type GraphQLUniformResourceLocatable = {
  /** The HTML path to this resource. */
  readonly resourcePath: Scalars['URI'];
  /** The URL to this resource. */
  readonly url: Scalars['URI'];
};

/** Represents an unknown signature on a Commit or Tag. */
export type GraphQLUnknownSignature = GraphQLGitSignature & {
  readonly __typename?: 'UnknownSignature';
  /** Email used to sign this object. */
  readonly email: Scalars['String'];
  /** True if the signature is valid and verified by GitHub. */
  readonly isValid: Scalars['Boolean'];
  /** Payload for GPG signing object. Raw ODB object without the signature header. */
  readonly payload: Scalars['String'];
  /** ASCII-armored signature header from object. */
  readonly signature: Scalars['String'];
  /** GitHub user corresponding to the email signing this commit. */
  readonly signer: Maybe<GraphQLUser>;
  /** The state of this signature. `VALID` if signature is valid and verified by GitHub, otherwise represents reason why signature is considered invalid. */
  readonly state: GraphQLGitSignatureState;
  /** True if the signature was made with GitHub's signing key. */
  readonly wasSignedByGitHub: Scalars['Boolean'];
};

/** Represents an 'unlabeled' event on a given issue or pull request. */
export type GraphQLUnlabeledEvent = GraphQLNode & {
  readonly __typename?: 'UnlabeledEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Identifies the label associated with the 'unlabeled' event. */
  readonly label: GraphQLLabel;
  /** Identifies the `Labelable` associated with the event. */
  readonly labelable: GraphQLLabelable;
};

/** Autogenerated input type of UnlinkRepositoryFromProject */
export type GraphQLUnlinkRepositoryFromProjectInput = {
  /** The ID of the Project linked to the Repository. */
  readonly projectId: Scalars['ID'];
  /** The ID of the Repository linked to the Project. */
  readonly repositoryId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnlinkRepositoryFromProject */
export type GraphQLUnlinkRepositoryFromProjectPayload = {
  readonly __typename?: 'UnlinkRepositoryFromProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The linked Project. */
  readonly project: Maybe<GraphQLProject>;
  /** The linked Repository. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** Autogenerated input type of UnlockLockable */
export type GraphQLUnlockLockableInput = {
  /** ID of the item to be unlocked. */
  readonly lockableId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnlockLockable */
export type GraphQLUnlockLockablePayload = {
  readonly __typename?: 'UnlockLockablePayload';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The item that was unlocked. */
  readonly unlockedRecord: Maybe<GraphQLLockable>;
};

/** Represents an 'unlocked' event on a given issue or pull request. */
export type GraphQLUnlockedEvent = GraphQLNode & {
  readonly __typename?: 'UnlockedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Object that was unlocked. */
  readonly lockable: GraphQLLockable;
};

/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */
export type GraphQLUnmarkDiscussionCommentAsAnswerInput = {
  /** The Node ID of the discussion comment to unmark as an answer. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */
export type GraphQLUnmarkDiscussionCommentAsAnswerPayload = {
  readonly __typename?: 'UnmarkDiscussionCommentAsAnswerPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The discussion that includes the comment. */
  readonly discussion: Maybe<GraphQLDiscussion>;
};

/** Autogenerated input type of UnmarkFileAsViewed */
export type GraphQLUnmarkFileAsViewedInput = {
  /** The Node ID of the pull request. */
  readonly pullRequestId: Scalars['ID'];
  /** The path of the file to mark as unviewed */
  readonly path: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnmarkFileAsViewed */
export type GraphQLUnmarkFileAsViewedPayload = {
  readonly __typename?: 'UnmarkFileAsViewedPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated pull request. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Autogenerated input type of UnmarkIssueAsDuplicate */
export type GraphQLUnmarkIssueAsDuplicateInput = {
  /** ID of the issue or pull request currently marked as a duplicate. */
  readonly duplicateId: Scalars['ID'];
  /** ID of the issue or pull request currently considered canonical/authoritative/original. */
  readonly canonicalId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnmarkIssueAsDuplicate */
export type GraphQLUnmarkIssueAsDuplicatePayload = {
  readonly __typename?: 'UnmarkIssueAsDuplicatePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The issue or pull request that was marked as a duplicate. */
  readonly duplicate: Maybe<GraphQLIssueOrPullRequest>;
};

/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */
export type GraphQLUnmarkedAsDuplicateEvent = GraphQLNode & {
  readonly __typename?: 'UnmarkedAsDuplicateEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** The authoritative issue or pull request which has been duplicated by another. */
  readonly canonical: Maybe<GraphQLIssueOrPullRequest>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** The issue or pull request which has been marked as a duplicate of another. */
  readonly duplicate: Maybe<GraphQLIssueOrPullRequest>;
  readonly id: Scalars['ID'];
  /** Canonical and duplicate belong to different repositories. */
  readonly isCrossRepository: Scalars['Boolean'];
};

/** Autogenerated input type of UnminimizeComment */
export type GraphQLUnminimizeCommentInput = {
  /** The Node ID of the subject to modify. */
  readonly subjectId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnminimizeComment */
export type GraphQLUnminimizeCommentPayload = {
  readonly __typename?: 'UnminimizeCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The comment that was unminimized. */
  readonly unminimizedComment: Maybe<GraphQLMinimizable>;
};

/** Autogenerated input type of UnpinIssue */
export type GraphQLUnpinIssueInput = {
  /** The ID of the issue to be unpinned */
  readonly issueId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnpinIssue */
export type GraphQLUnpinIssuePayload = {
  readonly __typename?: 'UnpinIssuePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The issue that was unpinned */
  readonly issue: Maybe<GraphQLIssue>;
};

/** Represents an 'unpinned' event on a given issue or pull request. */
export type GraphQLUnpinnedEvent = GraphQLNode & {
  readonly __typename?: 'UnpinnedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Identifies the issue associated with the event. */
  readonly issue: GraphQLIssue;
};

/** Autogenerated input type of UnresolveReviewThread */
export type GraphQLUnresolveReviewThreadInput = {
  /** The ID of the thread to unresolve */
  readonly threadId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UnresolveReviewThread */
export type GraphQLUnresolveReviewThreadPayload = {
  readonly __typename?: 'UnresolveReviewThreadPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The thread to resolve. */
  readonly thread: Maybe<GraphQLPullRequestReviewThread>;
};

/** Represents an 'unsubscribed' event on a given `Subscribable`. */
export type GraphQLUnsubscribedEvent = GraphQLNode & {
  readonly __typename?: 'UnsubscribedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** Object referenced by event. */
  readonly subscribable: GraphQLSubscribable;
};

/** Entities that can be updated. */
export type GraphQLUpdatable = {
  /** Check if the current viewer can update this object. */
  readonly viewerCanUpdate: Scalars['Boolean'];
};

/** Comments that can be updated. */
export type GraphQLUpdatableComment = {
  /** Reasons why the current viewer can not update this comment. */
  readonly viewerCannotUpdateReasons: ReadonlyArray<GraphQLCommentCannotUpdateReason>;
};

/** Autogenerated input type of UpdateBranchProtectionRule */
export type GraphQLUpdateBranchProtectionRuleInput = {
  /** The global relay id of the branch protection rule to be updated. */
  readonly branchProtectionRuleId: Scalars['ID'];
  /** The glob-like pattern used to determine matching branches. */
  readonly pattern: Maybe<Scalars['String']>;
  /** Are approving reviews required to update matching branches. */
  readonly requiresApprovingReviews: Maybe<Scalars['Boolean']>;
  /** Number of approving reviews required to update matching branches. */
  readonly requiredApprovingReviewCount: Maybe<Scalars['Int']>;
  /** Are commits required to be signed. */
  readonly requiresCommitSignatures: Maybe<Scalars['Boolean']>;
  /** Are merge commits prohibited from being pushed to this branch. */
  readonly requiresLinearHistory: Maybe<Scalars['Boolean']>;
  /** Is branch creation a protected operation. */
  readonly blocksCreations: Maybe<Scalars['Boolean']>;
  /** Are force pushes allowed on this branch. */
  readonly allowsForcePushes: Maybe<Scalars['Boolean']>;
  /** Can this branch be deleted. */
  readonly allowsDeletions: Maybe<Scalars['Boolean']>;
  /** Can admins overwrite branch protection. */
  readonly isAdminEnforced: Maybe<Scalars['Boolean']>;
  /** Are status checks required to update matching branches. */
  readonly requiresStatusChecks: Maybe<Scalars['Boolean']>;
  /** Are branches required to be up to date before merging. */
  readonly requiresStrictStatusChecks: Maybe<Scalars['Boolean']>;
  /** Are reviews from code owners required to update matching branches. */
  readonly requiresCodeOwnerReviews: Maybe<Scalars['Boolean']>;
  /** Will new commits pushed to matching branches dismiss pull request review approvals. */
  readonly dismissesStaleReviews: Maybe<Scalars['Boolean']>;
  /** Is dismissal of pull request reviews restricted. */
  readonly restrictsReviewDismissals: Maybe<Scalars['Boolean']>;
  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */
  readonly reviewDismissalActorIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */
  readonly bypassPullRequestActorIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */
  readonly bypassForcePushActorIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** Is pushing to matching branches restricted. */
  readonly restrictsPushes: Maybe<Scalars['Boolean']>;
  /** A list of User, Team or App IDs allowed to push to matching branches. */
  readonly pushActorIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */
  readonly requiredStatusCheckContexts: Maybe<ReadonlyArray<Scalars['String']>>;
  /** The list of required status checks */
  readonly requiredStatusChecks: Maybe<ReadonlyArray<GraphQLRequiredStatusCheckInput>>;
  /** Are conversations required to be resolved before merging. */
  readonly requiresConversationResolution: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateBranchProtectionRule */
export type GraphQLUpdateBranchProtectionRulePayload = {
  readonly __typename?: 'UpdateBranchProtectionRulePayload';
  /** The newly created BranchProtectionRule. */
  readonly branchProtectionRule: Maybe<GraphQLBranchProtectionRule>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateCheckRun */
export type GraphQLUpdateCheckRunInput = {
  /** The node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** The node of the check. */
  readonly checkRunId: Scalars['ID'];
  /** The name of the check. */
  readonly name: Maybe<Scalars['String']>;
  /** The URL of the integrator's site that has the full details of the check. */
  readonly detailsUrl: Maybe<Scalars['URI']>;
  /** A reference for the run on the integrator's system. */
  readonly externalId: Maybe<Scalars['String']>;
  /** The current status. */
  readonly status: Maybe<GraphQLRequestableCheckStatusState>;
  /** The time that the check run began. */
  readonly startedAt: Maybe<Scalars['DateTime']>;
  /** The final conclusion of the check. */
  readonly conclusion: Maybe<GraphQLCheckConclusionState>;
  /** The time that the check run finished. */
  readonly completedAt: Maybe<Scalars['DateTime']>;
  /** Descriptive details about the run. */
  readonly output: Maybe<GraphQLCheckRunOutput>;
  /** Possible further actions the integrator can perform, which a user may trigger. */
  readonly actions: Maybe<ReadonlyArray<GraphQLCheckRunAction>>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateCheckRun */
export type GraphQLUpdateCheckRunPayload = {
  readonly __typename?: 'UpdateCheckRunPayload';
  /** The updated check run. */
  readonly checkRun: Maybe<GraphQLCheckRun>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateCheckSuitePreferences */
export type GraphQLUpdateCheckSuitePreferencesInput = {
  /** The Node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** The check suite preferences to modify. */
  readonly autoTriggerPreferences: ReadonlyArray<GraphQLCheckSuiteAutoTriggerPreference>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateCheckSuitePreferences */
export type GraphQLUpdateCheckSuitePreferencesPayload = {
  readonly __typename?: 'UpdateCheckSuitePreferencesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated repository. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** Autogenerated input type of UpdateDiscussionComment */
export type GraphQLUpdateDiscussionCommentInput = {
  /** The Node ID of the discussion comment to update. */
  readonly commentId: Scalars['ID'];
  /** The new contents of the comment body. */
  readonly body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateDiscussionComment */
export type GraphQLUpdateDiscussionCommentPayload = {
  readonly __typename?: 'UpdateDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The modified discussion comment. */
  readonly comment: Maybe<GraphQLDiscussionComment>;
};

/** Autogenerated input type of UpdateDiscussion */
export type GraphQLUpdateDiscussionInput = {
  /** The Node ID of the discussion to update. */
  readonly discussionId: Scalars['ID'];
  /** The new discussion title. */
  readonly title: Maybe<Scalars['String']>;
  /** The new contents of the discussion body. */
  readonly body: Maybe<Scalars['String']>;
  /** The Node ID of a discussion category within the same repository to change this discussion to. */
  readonly categoryId: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateDiscussion */
export type GraphQLUpdateDiscussionPayload = {
  readonly __typename?: 'UpdateDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The modified discussion. */
  readonly discussion: Maybe<GraphQLDiscussion>;
};

/** Autogenerated input type of UpdateEnterpriseAdministratorRole */
export type GraphQLUpdateEnterpriseAdministratorRoleInput = {
  /** The ID of the Enterprise which the admin belongs to. */
  readonly enterpriseId: Scalars['ID'];
  /** The login of a administrator whose role is being changed. */
  readonly login: Scalars['String'];
  /** The new role for the Enterprise administrator. */
  readonly role: GraphQLEnterpriseAdministratorRole;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseAdministratorRole */
export type GraphQLUpdateEnterpriseAdministratorRolePayload = {
  readonly __typename?: 'UpdateEnterpriseAdministratorRolePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** A message confirming the result of changing the administrator's role. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export type GraphQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput = {
  /** The ID of the enterprise on which to set the allow private repository forking setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the allow private repository forking setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */
export type GraphQLUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated allow private repository forking setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the allow private repository forking setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export type GraphQLUpdateEnterpriseDefaultRepositoryPermissionSettingInput = {
  /** The ID of the enterprise on which to set the base repository permission setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the base repository permission setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseDefaultRepositoryPermissionSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */
export type GraphQLUpdateEnterpriseDefaultRepositoryPermissionSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseDefaultRepositoryPermissionSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated base repository permission setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the base repository permission setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export type GraphQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput = {
  /** The ID of the enterprise on which to set the members can change repository visibility setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the members can change repository visibility setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */
export type GraphQLUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload = {
  readonly __typename?: 'UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can change repository visibility setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the members can change repository visibility setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export type GraphQLUpdateEnterpriseMembersCanCreateRepositoriesSettingInput = {
  /** The ID of the enterprise on which to set the members can create repositories setting. */
  readonly enterpriseId: Scalars['ID'];
  /** Value for the members can create repositories setting on the enterprise. This or the granular public/private/internal allowed fields (but not both) must be provided. */
  readonly settingValue: Maybe<GraphQLEnterpriseMembersCanCreateRepositoriesSettingValue>;
  /** When false, allow member organizations to set their own repository creation member privileges. */
  readonly membersCanCreateRepositoriesPolicyEnabled: Maybe<Scalars['Boolean']>;
  /** Allow members to create public repositories. Defaults to current value. */
  readonly membersCanCreatePublicRepositories: Maybe<Scalars['Boolean']>;
  /** Allow members to create private repositories. Defaults to current value. */
  readonly membersCanCreatePrivateRepositories: Maybe<Scalars['Boolean']>;
  /** Allow members to create internal repositories. Defaults to current value. */
  readonly membersCanCreateInternalRepositories: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */
export type GraphQLUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can create repositories setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the members can create repositories setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export type GraphQLUpdateEnterpriseMembersCanDeleteIssuesSettingInput = {
  /** The ID of the enterprise on which to set the members can delete issues setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the members can delete issues setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */
export type GraphQLUpdateEnterpriseMembersCanDeleteIssuesSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseMembersCanDeleteIssuesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can delete issues setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the members can delete issues setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export type GraphQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput = {
  /** The ID of the enterprise on which to set the members can delete repositories setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the members can delete repositories setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */
export type GraphQLUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can delete repositories setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the members can delete repositories setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export type GraphQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput = {
  /** The ID of the enterprise on which to set the members can invite collaborators setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the members can invite collaborators setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */
export type GraphQLUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can invite collaborators setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the members can invite collaborators setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export type GraphQLUpdateEnterpriseMembersCanMakePurchasesSettingInput = {
  /** The ID of the enterprise on which to set the members can make purchases setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the members can make purchases setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseMembersCanMakePurchasesSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */
export type GraphQLUpdateEnterpriseMembersCanMakePurchasesSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseMembersCanMakePurchasesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can make purchases setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the members can make purchases setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export type GraphQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput = {
  /** The ID of the enterprise on which to set the members can update protected branches setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the members can update protected branches setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */
export type GraphQLUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can update protected branches setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the members can update protected branches setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export type GraphQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput = {
  /** The ID of the enterprise on which to set the members can view dependency insights setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the members can view dependency insights setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */
export type GraphQLUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated members can view dependency insights setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the members can view dependency insights setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */
export type GraphQLUpdateEnterpriseOrganizationProjectsSettingInput = {
  /** The ID of the enterprise on which to set the organization projects setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the organization projects setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */
export type GraphQLUpdateEnterpriseOrganizationProjectsSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseOrganizationProjectsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated organization projects setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the organization projects setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */
export type GraphQLUpdateEnterpriseOwnerOrganizationRoleInput = {
  /** The ID of the Enterprise which the owner belongs to. */
  readonly enterpriseId: Scalars['ID'];
  /** The ID of the organization for membership change. */
  readonly organizationId: Scalars['ID'];
  /** The role to assume in the organization. */
  readonly organizationRole: GraphQLRoleInOrganization;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */
export type GraphQLUpdateEnterpriseOwnerOrganizationRolePayload = {
  readonly __typename?: 'UpdateEnterpriseOwnerOrganizationRolePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** A message confirming the result of changing the owner's organization role. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseProfile */
export type GraphQLUpdateEnterpriseProfileInput = {
  /** The Enterprise ID to update. */
  readonly enterpriseId: Scalars['ID'];
  /** The name of the enterprise. */
  readonly name: Maybe<Scalars['String']>;
  /** The description of the enterprise. */
  readonly description: Maybe<Scalars['String']>;
  /** The URL of the enterprise's website. */
  readonly websiteUrl: Maybe<Scalars['String']>;
  /** The location of the enterprise. */
  readonly location: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseProfile */
export type GraphQLUpdateEnterpriseProfilePayload = {
  readonly __typename?: 'UpdateEnterpriseProfilePayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated enterprise. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
};

/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */
export type GraphQLUpdateEnterpriseRepositoryProjectsSettingInput = {
  /** The ID of the enterprise on which to set the repository projects setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the repository projects setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */
export type GraphQLUpdateEnterpriseRepositoryProjectsSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseRepositoryProjectsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated repository projects setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the repository projects setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */
export type GraphQLUpdateEnterpriseTeamDiscussionsSettingInput = {
  /** The ID of the enterprise on which to set the team discussions setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the team discussions setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledDisabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */
export type GraphQLUpdateEnterpriseTeamDiscussionsSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseTeamDiscussionsSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated team discussions setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the team discussions setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export type GraphQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput = {
  /** The ID of the enterprise on which to set the two factor authentication required setting. */
  readonly enterpriseId: Scalars['ID'];
  /** The value for the two factor authentication required setting on the enterprise. */
  readonly settingValue: GraphQLEnterpriseEnabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */
export type GraphQLUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload = {
  readonly __typename?: 'UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The enterprise with the updated two factor authentication required setting. */
  readonly enterprise: Maybe<GraphQLEnterprise>;
  /** A message confirming the result of updating the two factor authentication required setting. */
  readonly message: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateEnvironment */
export type GraphQLUpdateEnvironmentInput = {
  /** The node ID of the environment. */
  readonly environmentId: Scalars['ID'];
  /** The wait timer in minutes. */
  readonly waitTimer: Maybe<Scalars['Int']>;
  /** The ids of users or teams that can approve deployments to this environment */
  readonly reviewers: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateEnvironment */
export type GraphQLUpdateEnvironmentPayload = {
  readonly __typename?: 'UpdateEnvironmentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated environment. */
  readonly environment: Maybe<GraphQLEnvironment>;
};

/** Autogenerated input type of UpdateIpAllowListEnabledSetting */
export type GraphQLUpdateIpAllowListEnabledSettingInput = {
  /** The ID of the owner on which to set the IP allow list enabled setting. */
  readonly ownerId: Scalars['ID'];
  /** The value for the IP allow list enabled setting. */
  readonly settingValue: GraphQLIpAllowListEnabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateIpAllowListEnabledSetting */
export type GraphQLUpdateIpAllowListEnabledSettingPayload = {
  readonly __typename?: 'UpdateIpAllowListEnabledSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The IP allow list owner on which the setting was updated. */
  readonly owner: Maybe<GraphQLIpAllowListOwner>;
};

/** Autogenerated input type of UpdateIpAllowListEntry */
export type GraphQLUpdateIpAllowListEntryInput = {
  /** The ID of the IP allow list entry to update. */
  readonly ipAllowListEntryId: Scalars['ID'];
  /** An IP address or range of addresses in CIDR notation. */
  readonly allowListValue: Scalars['String'];
  /** An optional name for the IP allow list entry. */
  readonly name: Maybe<Scalars['String']>;
  /** Whether the IP allow list entry is active when an IP allow list is enabled. */
  readonly isActive: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateIpAllowListEntry */
export type GraphQLUpdateIpAllowListEntryPayload = {
  readonly __typename?: 'UpdateIpAllowListEntryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The IP allow list entry that was updated. */
  readonly ipAllowListEntry: Maybe<GraphQLIpAllowListEntry>;
};

/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export type GraphQLUpdateIpAllowListForInstalledAppsEnabledSettingInput = {
  /** The ID of the owner. */
  readonly ownerId: Scalars['ID'];
  /** The value for the IP allow list configuration for installed GitHub Apps setting. */
  readonly settingValue: GraphQLIpAllowListForInstalledAppsEnabledSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */
export type GraphQLUpdateIpAllowListForInstalledAppsEnabledSettingPayload = {
  readonly __typename?: 'UpdateIpAllowListForInstalledAppsEnabledSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The IP allow list owner on which the setting was updated. */
  readonly owner: Maybe<GraphQLIpAllowListOwner>;
};

/** Autogenerated input type of UpdateIssueComment */
export type GraphQLUpdateIssueCommentInput = {
  /** The ID of the IssueComment to modify. */
  readonly id: Scalars['ID'];
  /** The updated text of the comment. */
  readonly body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateIssueComment */
export type GraphQLUpdateIssueCommentPayload = {
  readonly __typename?: 'UpdateIssueCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated comment. */
  readonly issueComment: Maybe<GraphQLIssueComment>;
};

/** Autogenerated input type of UpdateIssue */
export type GraphQLUpdateIssueInput = {
  /** The ID of the Issue to modify. */
  readonly id: Scalars['ID'];
  /** The title for the issue. */
  readonly title: Maybe<Scalars['String']>;
  /** The body for the issue description. */
  readonly body: Maybe<Scalars['String']>;
  /** An array of Node IDs of users for this issue. */
  readonly assigneeIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** The Node ID of the milestone for this issue. */
  readonly milestoneId: Maybe<Scalars['ID']>;
  /** An array of Node IDs of labels for this issue. */
  readonly labelIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** The desired issue state. */
  readonly state: Maybe<GraphQLIssueState>;
  /** An array of Node IDs for projects associated with this issue. */
  readonly projectIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateIssue */
export type GraphQLUpdateIssuePayload = {
  readonly __typename?: 'UpdateIssuePayload';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The issue. */
  readonly issue: Maybe<GraphQLIssue>;
};

/** Autogenerated input type of UpdateNotificationRestrictionSetting */
export type GraphQLUpdateNotificationRestrictionSettingInput = {
  /** The ID of the owner on which to set the restrict notifications setting. */
  readonly ownerId: Scalars['ID'];
  /** The value for the restrict notifications setting. */
  readonly settingValue: GraphQLNotificationRestrictionSettingValue;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateNotificationRestrictionSetting */
export type GraphQLUpdateNotificationRestrictionSettingPayload = {
  readonly __typename?: 'UpdateNotificationRestrictionSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The owner on which the setting was updated. */
  readonly owner: Maybe<GraphQLVerifiableDomainOwner>;
};

/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export type GraphQLUpdateOrganizationAllowPrivateRepositoryForkingSettingInput = {
  /** The ID of the organization on which to set the allow private repository forking setting. */
  readonly organizationId: Scalars['ID'];
  /** Enable forking of private repositories in the organization? */
  readonly forkingEnabled: Scalars['Boolean'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */
export type GraphQLUpdateOrganizationAllowPrivateRepositoryForkingSettingPayload = {
  readonly __typename?: 'UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** A message confirming the result of updating the allow private repository forking setting. */
  readonly message: Maybe<Scalars['String']>;
  /** The organization with the updated allow private repository forking setting. */
  readonly organization: Maybe<GraphQLOrganization>;
};

/** Autogenerated input type of UpdateProjectCard */
export type GraphQLUpdateProjectCardInput = {
  /** The ProjectCard ID to update. */
  readonly projectCardId: Scalars['ID'];
  /** Whether or not the ProjectCard should be archived */
  readonly isArchived: Maybe<Scalars['Boolean']>;
  /** The note of ProjectCard. */
  readonly note: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateProjectCard */
export type GraphQLUpdateProjectCardPayload = {
  readonly __typename?: 'UpdateProjectCardPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated ProjectCard. */
  readonly projectCard: Maybe<GraphQLProjectCard>;
};

/** Autogenerated input type of UpdateProjectColumn */
export type GraphQLUpdateProjectColumnInput = {
  /** The ProjectColumn ID to update. */
  readonly projectColumnId: Scalars['ID'];
  /** The name of project column. */
  readonly name: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateProjectColumn */
export type GraphQLUpdateProjectColumnPayload = {
  readonly __typename?: 'UpdateProjectColumnPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated project column. */
  readonly projectColumn: Maybe<GraphQLProjectColumn>;
};

/** Autogenerated input type of UpdateProject */
export type GraphQLUpdateProjectInput = {
  /** The Project ID to update. */
  readonly projectId: Scalars['ID'];
  /** The name of project. */
  readonly name: Maybe<Scalars['String']>;
  /** The description of project. */
  readonly body: Maybe<Scalars['String']>;
  /** Whether the project is open or closed. */
  readonly state: Maybe<GraphQLProjectState>;
  /** Whether the project is public or not. */
  readonly public: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateProjectNext */
export type GraphQLUpdateProjectNextInput = {
  /** The ID of the Project to update. */
  readonly projectId: Scalars['ID'];
  /** Set the title of the project. */
  readonly title: Maybe<Scalars['String']>;
  /** Set the readme description of the project. */
  readonly description: Maybe<Scalars['String']>;
  /** Set the short description of the project. */
  readonly shortDescription: Maybe<Scalars['String']>;
  /** Set the project to closed or open. */
  readonly closed: Maybe<Scalars['Boolean']>;
  /** Set the project to public or private. */
  readonly public: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateProjectNextItemField */
export type GraphQLUpdateProjectNextItemFieldInput = {
  /** The ID of the Project. */
  readonly projectId: Scalars['ID'];
  /** The id of the item to be updated. */
  readonly itemId: Scalars['ID'];
  /** The id of the field to be updated. */
  readonly fieldId: Maybe<Scalars['ID']>;
  /** The value which will be set on the field. */
  readonly value: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateProjectNextItemField */
export type GraphQLUpdateProjectNextItemFieldPayload = {
  readonly __typename?: 'UpdateProjectNextItemFieldPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated item. */
  readonly projectNextItem: Maybe<GraphQLProjectNextItem>;
};

/** Autogenerated return type of UpdateProjectNext */
export type GraphQLUpdateProjectNextPayload = {
  readonly __typename?: 'UpdateProjectNextPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated Project. */
  readonly projectNext: Maybe<GraphQLProjectNext>;
};

/** Autogenerated return type of UpdateProject */
export type GraphQLUpdateProjectPayload = {
  readonly __typename?: 'UpdateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated project. */
  readonly project: Maybe<GraphQLProject>;
};

/** Autogenerated input type of UpdatePullRequestBranch */
export type GraphQLUpdatePullRequestBranchInput = {
  /** The Node ID of the pull request. */
  readonly pullRequestId: Scalars['ID'];
  /** The head ref oid for the upstream branch. */
  readonly expectedHeadOid: Maybe<Scalars['GitObjectID']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePullRequestBranch */
export type GraphQLUpdatePullRequestBranchPayload = {
  readonly __typename?: 'UpdatePullRequestBranchPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated pull request. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Autogenerated input type of UpdatePullRequest */
export type GraphQLUpdatePullRequestInput = {
  /** The Node ID of the pull request. */
  readonly pullRequestId: Scalars['ID'];
  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch
   * on the current repository.
   */
  readonly baseRefName: Maybe<Scalars['String']>;
  /** The title of the pull request. */
  readonly title: Maybe<Scalars['String']>;
  /** The contents of the pull request. */
  readonly body: Maybe<Scalars['String']>;
  /** The target state of the pull request. */
  readonly state: Maybe<GraphQLPullRequestUpdateState>;
  /** Indicates whether maintainers can modify the pull request. */
  readonly maintainerCanModify: Maybe<Scalars['Boolean']>;
  /** An array of Node IDs of users for this pull request. */
  readonly assigneeIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** The Node ID of the milestone for this pull request. */
  readonly milestoneId: Maybe<Scalars['ID']>;
  /** An array of Node IDs of labels for this pull request. */
  readonly labelIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** An array of Node IDs for projects associated with this pull request. */
  readonly projectIds: Maybe<ReadonlyArray<Scalars['ID']>>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePullRequest */
export type GraphQLUpdatePullRequestPayload = {
  readonly __typename?: 'UpdatePullRequestPayload';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated pull request. */
  readonly pullRequest: Maybe<GraphQLPullRequest>;
};

/** Autogenerated input type of UpdatePullRequestReviewComment */
export type GraphQLUpdatePullRequestReviewCommentInput = {
  /** The Node ID of the comment to modify. */
  readonly pullRequestReviewCommentId: Scalars['ID'];
  /** The text of the comment. */
  readonly body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePullRequestReviewComment */
export type GraphQLUpdatePullRequestReviewCommentPayload = {
  readonly __typename?: 'UpdatePullRequestReviewCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated comment. */
  readonly pullRequestReviewComment: Maybe<GraphQLPullRequestReviewComment>;
};

/** Autogenerated input type of UpdatePullRequestReview */
export type GraphQLUpdatePullRequestReviewInput = {
  /** The Node ID of the pull request review to modify. */
  readonly pullRequestReviewId: Scalars['ID'];
  /** The contents of the pull request review body. */
  readonly body: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePullRequestReview */
export type GraphQLUpdatePullRequestReviewPayload = {
  readonly __typename?: 'UpdatePullRequestReviewPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated pull request review. */
  readonly pullRequestReview: Maybe<GraphQLPullRequestReview>;
};

/** Autogenerated input type of UpdateRef */
export type GraphQLUpdateRefInput = {
  /** The Node ID of the Ref to be updated. */
  readonly refId: Scalars['ID'];
  /** The GitObjectID that the Ref shall be updated to target. */
  readonly oid: Scalars['GitObjectID'];
  /** Permit updates of branch Refs that are not fast-forwards? */
  readonly force: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateRef */
export type GraphQLUpdateRefPayload = {
  readonly __typename?: 'UpdateRefPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated Ref. */
  readonly ref: Maybe<GraphQLRef>;
};

/** Autogenerated input type of UpdateRepository */
export type GraphQLUpdateRepositoryInput = {
  /** The ID of the repository to update. */
  readonly repositoryId: Scalars['ID'];
  /** The new name of the repository. */
  readonly name: Maybe<Scalars['String']>;
  /** A new description for the repository. Pass an empty string to erase the existing description. */
  readonly description: Maybe<Scalars['String']>;
  /** Whether this repository should be marked as a template such that anyone who can access it can create new repositories with the same files and directory structure. */
  readonly template: Maybe<Scalars['Boolean']>;
  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */
  readonly homepageUrl: Maybe<Scalars['URI']>;
  /** Indicates if the repository should have the wiki feature enabled. */
  readonly hasWikiEnabled: Maybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the issues feature enabled. */
  readonly hasIssuesEnabled: Maybe<Scalars['Boolean']>;
  /** Indicates if the repository should have the project boards feature enabled. */
  readonly hasProjectsEnabled: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateRepository */
export type GraphQLUpdateRepositoryPayload = {
  readonly __typename?: 'UpdateRepositoryPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated repository. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** Autogenerated input type of UpdateSponsorshipPreferences */
export type GraphQLUpdateSponsorshipPreferencesInput = {
  /** The ID of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorLogin is not given. */
  readonly sponsorId: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorship. Required if sponsorId is not given. */
  readonly sponsorLogin: Maybe<Scalars['String']>;
  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */
  readonly sponsorableId: Maybe<Scalars['ID']>;
  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */
  readonly sponsorableLogin: Maybe<Scalars['String']>;
  /** Whether the sponsor should receive email updates from the sponsorable. */
  readonly receiveEmails: Maybe<Scalars['Boolean']>;
  /** Specify whether others should be able to see that the sponsor is sponsoring the sponsorable. Public visibility still does not reveal which tier is used. */
  readonly privacyLevel: Maybe<GraphQLSponsorshipPrivacy>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateSponsorshipPreferences */
export type GraphQLUpdateSponsorshipPreferencesPayload = {
  readonly __typename?: 'UpdateSponsorshipPreferencesPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The sponsorship that was updated. */
  readonly sponsorship: Maybe<GraphQLSponsorship>;
};

/** Autogenerated input type of UpdateSubscription */
export type GraphQLUpdateSubscriptionInput = {
  /** The Node ID of the subscribable object to modify. */
  readonly subscribableId: Scalars['ID'];
  /** The new state of the subscription. */
  readonly state: GraphQLSubscriptionState;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateSubscription */
export type GraphQLUpdateSubscriptionPayload = {
  readonly __typename?: 'UpdateSubscriptionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The input subscribable entity. */
  readonly subscribable: Maybe<GraphQLSubscribable>;
};

/** Autogenerated input type of UpdateTeamDiscussionComment */
export type GraphQLUpdateTeamDiscussionCommentInput = {
  /** The ID of the comment to modify. */
  readonly id: Scalars['ID'];
  /** The updated text of the comment. */
  readonly body: Scalars['String'];
  /** The current version of the body content. */
  readonly bodyVersion: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTeamDiscussionComment */
export type GraphQLUpdateTeamDiscussionCommentPayload = {
  readonly __typename?: 'UpdateTeamDiscussionCommentPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated comment. */
  readonly teamDiscussionComment: Maybe<GraphQLTeamDiscussionComment>;
};

/** Autogenerated input type of UpdateTeamDiscussion */
export type GraphQLUpdateTeamDiscussionInput = {
  /** The Node ID of the discussion to modify. */
  readonly id: Scalars['ID'];
  /** The updated title of the discussion. */
  readonly title: Maybe<Scalars['String']>;
  /** The updated text of the discussion. */
  readonly body: Maybe<Scalars['String']>;
  /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
  readonly bodyVersion: Maybe<Scalars['String']>;
  /** If provided, sets the pinned state of the updated discussion. */
  readonly pinned: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTeamDiscussion */
export type GraphQLUpdateTeamDiscussionPayload = {
  readonly __typename?: 'UpdateTeamDiscussionPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The updated discussion. */
  readonly teamDiscussion: Maybe<GraphQLTeamDiscussion>;
};

/** Autogenerated input type of UpdateTopics */
export type GraphQLUpdateTopicsInput = {
  /** The Node ID of the repository. */
  readonly repositoryId: Scalars['ID'];
  /** An array of topic names. */
  readonly topicNames: ReadonlyArray<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTopics */
export type GraphQLUpdateTopicsPayload = {
  readonly __typename?: 'UpdateTopicsPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** Names of the provided topics that are not valid. */
  readonly invalidTopicNames: Maybe<ReadonlyArray<Scalars['String']>>;
  /** The updated repository. */
  readonly repository: Maybe<GraphQLRepository>;
};

/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUser = GraphQLNode & GraphQLActor & GraphQLPackageOwner & GraphQLProjectOwner & GraphQLProjectNextOwner & GraphQLRepositoryDiscussionAuthor & GraphQLRepositoryDiscussionCommentAuthor & GraphQLRepositoryOwner & GraphQLUniformResourceLocatable & GraphQLProfileOwner & GraphQLSponsorable & {
  readonly __typename?: 'User';
  /** Determine if this repository owner has any items that can be pinned to their profile. */
  readonly anyPinnableItems: Scalars['Boolean'];
  /** A URL pointing to the user's public avatar. */
  readonly avatarUrl: Scalars['URI'];
  /** The user's public profile bio. */
  readonly bio: Maybe<Scalars['String']>;
  /** The user's public profile bio as HTML. */
  readonly bioHTML: Scalars['HTML'];
  /** Could this user receive email notifications, if the organization had notification restrictions enabled? */
  readonly canReceiveOrganizationEmailsWhenNotificationsRestricted: Scalars['Boolean'];
  /** A list of commit comments made by this user. */
  readonly commitComments: GraphQLCommitCommentConnection;
  /** The user's public profile company. */
  readonly company: Maybe<Scalars['String']>;
  /** The user's public profile company as HTML. */
  readonly companyHTML: Scalars['HTML'];
  /** The collection of contributions this user has made to different repositories. */
  readonly contributionsCollection: GraphQLContributionsCollection;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The user's publicly visible profile email. */
  readonly email: Scalars['String'];
  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */
  readonly estimatedNextSponsorsPayoutInCents: Scalars['Int'];
  /** A list of users the given user is followed by. */
  readonly followers: GraphQLFollowerConnection;
  /** A list of users the given user is following. */
  readonly following: GraphQLFollowingConnection;
  /** Find gist by repo name. */
  readonly gist: Maybe<GraphQLGist>;
  /** A list of gist comments made by this user. */
  readonly gistComments: GraphQLGistCommentConnection;
  /** A list of the Gists the user has created. */
  readonly gists: GraphQLGistConnection;
  /** True if this user/organization has a GitHub Sponsors listing. */
  readonly hasSponsorsListing: Scalars['Boolean'];
  /** The hovercard information for this user in a given context */
  readonly hovercard: GraphQLHovercard;
  readonly id: Scalars['ID'];
  /** The interaction ability settings for this user. */
  readonly interactionAbility: Maybe<GraphQLRepositoryInteractionAbility>;
  /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */
  readonly isBountyHunter: Scalars['Boolean'];
  /** Whether or not this user is a participant in the GitHub Campus Experts Program. */
  readonly isCampusExpert: Scalars['Boolean'];
  /** Whether or not this user is a GitHub Developer Program member. */
  readonly isDeveloperProgramMember: Scalars['Boolean'];
  /** Whether or not this user is a GitHub employee. */
  readonly isEmployee: Scalars['Boolean'];
  /** Whether or not this user is following the viewer. Inverse of viewer_is_following */
  readonly isFollowingViewer: Scalars['Boolean'];
  /** Whether or not this user is a member of the GitHub Stars Program. */
  readonly isGitHubStar: Scalars['Boolean'];
  /** Whether or not the user has marked themselves as for hire. */
  readonly isHireable: Scalars['Boolean'];
  /** Whether or not this user is a site administrator. */
  readonly isSiteAdmin: Scalars['Boolean'];
  /** Check if the given account is sponsoring this user/organization. */
  readonly isSponsoredBy: Scalars['Boolean'];
  /** True if the viewer is sponsored by this user/organization. */
  readonly isSponsoringViewer: Scalars['Boolean'];
  /** Whether or not this user is the viewing user. */
  readonly isViewer: Scalars['Boolean'];
  /** A list of issue comments made by this user. */
  readonly issueComments: GraphQLIssueCommentConnection;
  /** A list of issues associated with this user. */
  readonly issues: GraphQLIssueConnection;
  /** Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. */
  readonly itemShowcase: GraphQLProfileItemShowcase;
  /** The user's public profile location. */
  readonly location: Maybe<Scalars['String']>;
  /** The username used to login. */
  readonly login: Scalars['String'];
  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */
  readonly monthlyEstimatedSponsorsIncomeInCents: Scalars['Int'];
  /** The user's public profile name. */
  readonly name: Maybe<Scalars['String']>;
  /** Find an organization by its login that the user belongs to. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** Verified email addresses that match verified domains for a specified organization the user is a member of. */
  readonly organizationVerifiedDomainEmails: ReadonlyArray<Scalars['String']>;
  /** A list of organizations the user belongs to. */
  readonly organizations: GraphQLOrganizationConnection;
  /** A list of packages under the owner. */
  readonly packages: GraphQLPackageConnection;
  /** A list of repositories and gists this profile owner can pin to their profile. */
  readonly pinnableItems: GraphQLPinnableItemConnection;
  /** A list of repositories and gists this profile owner has pinned to their profile */
  readonly pinnedItems: GraphQLPinnableItemConnection;
  /** Returns how many more items this profile owner can pin to their profile. */
  readonly pinnedItemsRemaining: Scalars['Int'];
  /** Find project by number. */
  readonly project: Maybe<GraphQLProject>;
  /** Find a project by project (beta) number. */
  readonly projectNext: Maybe<GraphQLProjectNext>;
  /** A list of projects under the owner. */
  readonly projects: GraphQLProjectConnection;
  /** A list of projects (beta) under the owner. */
  readonly projectsNext: GraphQLProjectNextConnection;
  /** The HTTP path listing user's projects */
  readonly projectsResourcePath: Scalars['URI'];
  /** The HTTP URL listing user's projects */
  readonly projectsUrl: Scalars['URI'];
  /** A list of public keys associated with this user. */
  readonly publicKeys: GraphQLPublicKeyConnection;
  /** A list of pull requests associated with this user. */
  readonly pullRequests: GraphQLPullRequestConnection;
  /** A list of repositories that the user owns. */
  readonly repositories: GraphQLRepositoryConnection;
  /** A list of repositories that the user recently contributed to. */
  readonly repositoriesContributedTo: GraphQLRepositoryConnection;
  /** Find Repository. */
  readonly repository: Maybe<GraphQLRepository>;
  /** Discussion comments this user has authored. */
  readonly repositoryDiscussionComments: GraphQLDiscussionCommentConnection;
  /** Discussions this user has started. */
  readonly repositoryDiscussions: GraphQLDiscussionConnection;
  /** The HTTP path for this user */
  readonly resourcePath: Scalars['URI'];
  /** Replies this user has saved */
  readonly savedReplies: Maybe<GraphQLSavedReplyConnection>;
  /** List of users and organizations this entity is sponsoring. */
  readonly sponsoring: GraphQLSponsorConnection;
  /** List of sponsors for this user or organization. */
  readonly sponsors: GraphQLSponsorConnection;
  /** Events involving this sponsorable, such as new sponsorships. */
  readonly sponsorsActivities: GraphQLSponsorsActivityConnection;
  /** The GitHub Sponsors listing for this user or organization. */
  readonly sponsorsListing: Maybe<GraphQLSponsorsListing>;
  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. */
  readonly sponsorshipForViewerAsSponsor: Maybe<GraphQLSponsorship>;
  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. */
  readonly sponsorshipForViewerAsSponsorable: Maybe<GraphQLSponsorship>;
  /** List of sponsorship updates sent from this sponsorable to sponsors. */
  readonly sponsorshipNewsletters: GraphQLSponsorshipNewsletterConnection;
  /** This object's sponsorships as the maintainer. */
  readonly sponsorshipsAsMaintainer: GraphQLSponsorshipConnection;
  /** This object's sponsorships as the sponsor. */
  readonly sponsorshipsAsSponsor: GraphQLSponsorshipConnection;
  /** Repositories the user has starred. */
  readonly starredRepositories: GraphQLStarredRepositoryConnection;
  /** The user's description of what they're currently doing. */
  readonly status: Maybe<GraphQLUserStatus>;
  /** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */
  readonly topRepositories: GraphQLRepositoryConnection;
  /** The user's Twitter username. */
  readonly twitterUsername: Maybe<Scalars['String']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this user */
  readonly url: Scalars['URI'];
  /** Can the viewer pin repositories and gists to the profile? */
  readonly viewerCanChangePinnedItems: Scalars['Boolean'];
  /** Can the current viewer create new projects on this owner. */
  readonly viewerCanCreateProjects: Scalars['Boolean'];
  /** Whether or not the viewer is able to follow the user. */
  readonly viewerCanFollow: Scalars['Boolean'];
  /** Whether or not the viewer is able to sponsor this user/organization. */
  readonly viewerCanSponsor: Scalars['Boolean'];
  /** Whether or not this user is followed by the viewer. Inverse of is_following_viewer. */
  readonly viewerIsFollowing: Scalars['Boolean'];
  /** True if the viewer is sponsoring this user/organization. */
  readonly viewerIsSponsoring: Scalars['Boolean'];
  /** A list of repositories the given user is watching. */
  readonly watching: GraphQLRepositoryConnection;
  /** A URL pointing to the user's public website/blog. */
  readonly websiteUrl: Maybe<Scalars['URI']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserAnyPinnableItemsArgs = {
  type: Maybe<GraphQLPinnableItemType>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserAvatarUrlArgs = {
  size: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserCanReceiveOrganizationEmailsWhenNotificationsRestrictedArgs = {
  login: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserCommitCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserContributionsCollectionArgs = {
  organizationID: Maybe<Scalars['ID']>;
  from: Maybe<Scalars['DateTime']>;
  to: Maybe<Scalars['DateTime']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserFollowersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserFollowingArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserGistArgs = {
  name: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserGistCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserGistsArgs = {
  privacy: Maybe<GraphQLGistPrivacy>;
  orderBy: Maybe<GraphQLGistOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserHovercardArgs = {
  primarySubjectId: Maybe<Scalars['ID']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserIsSponsoredByArgs = {
  accountLogin: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserIssueCommentsArgs = {
  orderBy: Maybe<GraphQLIssueCommentOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserIssuesArgs = {
  orderBy: Maybe<GraphQLIssueOrder>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  states: Maybe<ReadonlyArray<GraphQLIssueState>>;
  filterBy: Maybe<GraphQLIssueFilters>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserOrganizationArgs = {
  login: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserOrganizationVerifiedDomainEmailsArgs = {
  login: Scalars['String'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserOrganizationsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserPackagesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  names: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  repositoryId: Maybe<Scalars['ID']>;
  packageType: Maybe<GraphQLPackageType>;
  orderBy?: Maybe<GraphQLPackageOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserPinnableItemsArgs = {
  types: Maybe<ReadonlyArray<GraphQLPinnableItemType>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserPinnedItemsArgs = {
  types: Maybe<ReadonlyArray<GraphQLPinnableItemType>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserProjectArgs = {
  number: Scalars['Int'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserProjectNextArgs = {
  number: Scalars['Int'];
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserProjectsArgs = {
  orderBy: Maybe<GraphQLProjectOrder>;
  search: Maybe<Scalars['String']>;
  states: Maybe<ReadonlyArray<GraphQLProjectState>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserProjectsNextArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  query: Maybe<Scalars['String']>;
  sortBy?: Maybe<GraphQLProjectNextOrderField>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserPublicKeysArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserPullRequestsArgs = {
  states: Maybe<ReadonlyArray<GraphQLPullRequestState>>;
  labels: Maybe<ReadonlyArray<Scalars['String']>>;
  headRefName: Maybe<Scalars['String']>;
  baseRefName: Maybe<Scalars['String']>;
  orderBy: Maybe<GraphQLIssueOrder>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserRepositoriesArgs = {
  privacy: Maybe<GraphQLRepositoryPrivacy>;
  orderBy: Maybe<GraphQLRepositoryOrder>;
  affiliations: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  ownerAffiliations?: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  isLocked: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  isFork: Maybe<Scalars['Boolean']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserRepositoriesContributedToArgs = {
  privacy: Maybe<GraphQLRepositoryPrivacy>;
  orderBy: Maybe<GraphQLRepositoryOrder>;
  isLocked: Maybe<Scalars['Boolean']>;
  includeUserRepositories: Maybe<Scalars['Boolean']>;
  contributionTypes: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryContributionType>>>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserRepositoryArgs = {
  name: Scalars['String'];
  followRenames?: Maybe<Scalars['Boolean']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserRepositoryDiscussionCommentsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  repositoryId: Maybe<Scalars['ID']>;
  onlyAnswers?: Maybe<Scalars['Boolean']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserRepositoryDiscussionsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLDiscussionOrder>;
  repositoryId: Maybe<Scalars['ID']>;
  answered?: Maybe<Scalars['Boolean']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserSavedRepliesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLSavedReplyOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserSponsoringArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLSponsorOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserSponsorsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  tierId: Maybe<Scalars['ID']>;
  orderBy?: Maybe<GraphQLSponsorOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserSponsorsActivitiesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  period?: Maybe<GraphQLSponsorsActivityPeriod>;
  orderBy?: Maybe<GraphQLSponsorsActivityOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserSponsorshipNewslettersArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy?: Maybe<GraphQLSponsorshipNewsletterOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserSponsorshipsAsMaintainerArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  includePrivate?: Maybe<Scalars['Boolean']>;
  orderBy: Maybe<GraphQLSponsorshipOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserSponsorshipsAsSponsorArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: Maybe<GraphQLSponsorshipOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserStarredRepositoriesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  ownedByViewer: Maybe<Scalars['Boolean']>;
  orderBy: Maybe<GraphQLStarOrder>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserTopRepositoriesArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
  orderBy: GraphQLRepositoryOrder;
  since: Maybe<Scalars['DateTime']>;
};


/** A user is an individual's account on GitHub that owns repositories and can make new content. */
export type GraphQLUserWatchingArgs = {
  privacy: Maybe<GraphQLRepositoryPrivacy>;
  orderBy: Maybe<GraphQLRepositoryOrder>;
  affiliations: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  ownerAffiliations?: Maybe<ReadonlyArray<Maybe<GraphQLRepositoryAffiliation>>>;
  isLocked: Maybe<Scalars['Boolean']>;
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};

/** The possible durations that a user can be blocked for. */
export enum GraphQLUserBlockDuration {
  /** The user was blocked for 1 day */
  ONE_DAY = 'ONE_DAY',
  /** The user was blocked for 3 days */
  THREE_DAYS = 'THREE_DAYS',
  /** The user was blocked for 7 days */
  ONE_WEEK = 'ONE_WEEK',
  /** The user was blocked for 30 days */
  ONE_MONTH = 'ONE_MONTH',
  /** The user was blocked permanently */
  PERMANENT = 'PERMANENT'
}

/** Represents a 'user_blocked' event on a given user. */
export type GraphQLUserBlockedEvent = GraphQLNode & {
  readonly __typename?: 'UserBlockedEvent';
  /** Identifies the actor who performed the event. */
  readonly actor: Maybe<GraphQLActor>;
  /** Number of days that the user was blocked for. */
  readonly blockDuration: GraphQLUserBlockDuration;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  readonly id: Scalars['ID'];
  /** The user who was blocked. */
  readonly subject: Maybe<GraphQLUser>;
};

/** The connection type for User. */
export type GraphQLUserConnection = {
  readonly __typename?: 'UserConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLUserEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUser>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edit on user content */
export type GraphQLUserContentEdit = GraphQLNode & {
  readonly __typename?: 'UserContentEdit';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the date and time when the object was deleted. */
  readonly deletedAt: Maybe<Scalars['DateTime']>;
  /** The actor who deleted this content */
  readonly deletedBy: Maybe<GraphQLActor>;
  /** A summary of the changes for this edit */
  readonly diff: Maybe<Scalars['String']>;
  /** When this content was edited */
  readonly editedAt: Scalars['DateTime'];
  /** The actor who edited this content */
  readonly editor: Maybe<GraphQLActor>;
  readonly id: Scalars['ID'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** A list of edits to content. */
export type GraphQLUserContentEditConnection = {
  readonly __typename?: 'UserContentEditConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLUserContentEditEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUserContentEdit>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLUserContentEditEdge = {
  readonly __typename?: 'UserContentEditEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLUserContentEdit>;
};

/** Represents a user. */
export type GraphQLUserEdge = {
  readonly __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLUser>;
};

/** Email attributes from External Identity */
export type GraphQLUserEmailMetadata = {
  readonly __typename?: 'UserEmailMetadata';
  /** Boolean to identify primary emails */
  readonly primary: Maybe<Scalars['Boolean']>;
  /** Type of email */
  readonly type: Maybe<Scalars['String']>;
  /** Email id */
  readonly value: Scalars['String'];
};

/** The user's description of what they're currently doing. */
export type GraphQLUserStatus = GraphQLNode & {
  readonly __typename?: 'UserStatus';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** An emoji summarizing the user's status. */
  readonly emoji: Maybe<Scalars['String']>;
  /** The status emoji as HTML. */
  readonly emojiHTML: Maybe<Scalars['HTML']>;
  /** If set, the status will not be shown after this date. */
  readonly expiresAt: Maybe<Scalars['DateTime']>;
  readonly id: Scalars['ID'];
  /** Whether this status indicates the user is not fully available on GitHub. */
  readonly indicatesLimitedAvailability: Scalars['Boolean'];
  /** A brief message describing what the user is doing. */
  readonly message: Maybe<Scalars['String']>;
  /** The organization whose members can see this status. If null, this status is publicly visible. */
  readonly organization: Maybe<GraphQLOrganization>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The user who has this status. */
  readonly user: GraphQLUser;
};

/** The connection type for UserStatus. */
export type GraphQLUserStatusConnection = {
  readonly __typename?: 'UserStatusConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLUserStatusEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLUserStatus>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLUserStatusEdge = {
  readonly __typename?: 'UserStatusEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLUserStatus>;
};

/** Ordering options for user status connections. */
export type GraphQLUserStatusOrder = {
  /** The field to order user statuses by. */
  readonly field: GraphQLUserStatusOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which user status connections can be ordered. */
export enum GraphQLUserStatusOrderField {
  /** Order user statuses by when they were updated. */
  UPDATED_AT = 'UPDATED_AT'
}

/** A domain that can be verified or approved for an organization or an enterprise. */
export type GraphQLVerifiableDomain = GraphQLNode & {
  readonly __typename?: 'VerifiableDomain';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The DNS host name that should be used for verification. */
  readonly dnsHostName: Maybe<Scalars['URI']>;
  /** The unicode encoded domain. */
  readonly domain: Scalars['URI'];
  /** Whether a TXT record for verification with the expected host name was found. */
  readonly hasFoundHostName: Scalars['Boolean'];
  /** Whether a TXT record for verification with the expected verification token was found. */
  readonly hasFoundVerificationToken: Scalars['Boolean'];
  readonly id: Scalars['ID'];
  /** Whether or not the domain is approved. */
  readonly isApproved: Scalars['Boolean'];
  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */
  readonly isRequiredForPolicyEnforcement: Scalars['Boolean'];
  /** Whether or not the domain is verified. */
  readonly isVerified: Scalars['Boolean'];
  /** The owner of the domain. */
  readonly owner: GraphQLVerifiableDomainOwner;
  /** The punycode encoded domain. */
  readonly punycodeEncodedDomain: Scalars['URI'];
  /** The time that the current verification token will expire. */
  readonly tokenExpirationTime: Maybe<Scalars['DateTime']>;
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The current verification token for the domain. */
  readonly verificationToken: Maybe<Scalars['String']>;
};

/** The connection type for VerifiableDomain. */
export type GraphQLVerifiableDomainConnection = {
  readonly __typename?: 'VerifiableDomainConnection';
  /** A list of edges. */
  readonly edges: Maybe<ReadonlyArray<Maybe<GraphQLVerifiableDomainEdge>>>;
  /** A list of nodes. */
  readonly nodes: Maybe<ReadonlyArray<Maybe<GraphQLVerifiableDomain>>>;
  /** Information to aid in pagination. */
  readonly pageInfo: GraphQLPageInfo;
  /** Identifies the total count of items in the connection. */
  readonly totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type GraphQLVerifiableDomainEdge = {
  readonly __typename?: 'VerifiableDomainEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Scalars['String'];
  /** The item at the end of the edge. */
  readonly node: Maybe<GraphQLVerifiableDomain>;
};

/** Ordering options for verifiable domain connections. */
export type GraphQLVerifiableDomainOrder = {
  /** The field to order verifiable domains by. */
  readonly field: GraphQLVerifiableDomainOrderField;
  /** The ordering direction. */
  readonly direction: GraphQLOrderDirection;
};

/** Properties by which verifiable domain connections can be ordered. */
export enum GraphQLVerifiableDomainOrderField {
  /** Order verifiable domains by the domain name. */
  DOMAIN = 'DOMAIN',
  /** Order verifiable domains by their creation date. */
  CREATED_AT = 'CREATED_AT'
}

/** Types that can own a verifiable domain. */
export type GraphQLVerifiableDomainOwner = GraphQLEnterprise | GraphQLOrganization;

/** Autogenerated input type of VerifyVerifiableDomain */
export type GraphQLVerifyVerifiableDomainInput = {
  /** The ID of the verifiable domain to verify. */
  readonly id: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
};

/** Autogenerated return type of VerifyVerifiableDomain */
export type GraphQLVerifyVerifiableDomainPayload = {
  readonly __typename?: 'VerifyVerifiableDomainPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId: Maybe<Scalars['String']>;
  /** The verifiable domain that was verified. */
  readonly domain: Maybe<GraphQLVerifiableDomain>;
};

/** A hovercard context with a message describing how the viewer is related. */
export type GraphQLViewerHovercardContext = GraphQLHovercardContext & {
  readonly __typename?: 'ViewerHovercardContext';
  /** A string describing this context */
  readonly message: Scalars['String'];
  /** An octicon to accompany this context */
  readonly octicon: Scalars['String'];
  /** Identifies the user who is related to this context. */
  readonly viewer: GraphQLUser;
};

/** A subject that may be upvoted. */
export type GraphQLVotable = {
  /** Number of upvotes that this subject has received. */
  readonly upvoteCount: Scalars['Int'];
  /** Whether or not the current user can add or remove an upvote on this subject. */
  readonly viewerCanUpvote: Scalars['Boolean'];
  /** Whether or not the current user has already upvoted this subject. */
  readonly viewerHasUpvoted: Scalars['Boolean'];
};

/** A workflow contains meta information about an Actions workflow file. */
export type GraphQLWorkflow = GraphQLNode & {
  readonly __typename?: 'Workflow';
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  /** The name of the workflow. */
  readonly name: Scalars['String'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
};

/** A workflow run. */
export type GraphQLWorkflowRun = GraphQLNode & {
  readonly __typename?: 'WorkflowRun';
  /** The check suite this workflow run belongs to. */
  readonly checkSuite: GraphQLCheckSuite;
  /** Identifies the date and time when the object was created. */
  readonly createdAt: Scalars['DateTime'];
  /** Identifies the primary key from the database. */
  readonly databaseId: Maybe<Scalars['Int']>;
  /** The log of deployment reviews */
  readonly deploymentReviews: GraphQLDeploymentReviewConnection;
  readonly id: Scalars['ID'];
  /** The pending deployment requests of all check runs in this workflow run */
  readonly pendingDeploymentRequests: GraphQLDeploymentRequestConnection;
  /** The HTTP path for this workflow run */
  readonly resourcePath: Scalars['URI'];
  /** A number that uniquely identifies this workflow run in its parent workflow. */
  readonly runNumber: Scalars['Int'];
  /** Identifies the date and time when the object was last updated. */
  readonly updatedAt: Scalars['DateTime'];
  /** The HTTP URL for this workflow run */
  readonly url: Scalars['URI'];
  /** The workflow executed in this workflow run. */
  readonly workflow: GraphQLWorkflow;
};


/** A workflow run. */
export type GraphQLWorkflowRunDeploymentReviewsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};


/** A workflow run. */
export type GraphQLWorkflowRunPendingDeploymentRequestsArgs = {
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
  first: Maybe<Scalars['Int']>;
  last: Maybe<Scalars['Int']>;
};



export const FetchReposDocument = gql`
    query FetchRepos($pageSize: Int!, $after: String, $before: String) {
  search(
    query: "topic:react sort:stars"
    type: REPOSITORY
    first: $pageSize
    after: $after
    before: $before
  ) {
    repositoryCount
    nodes {
      ... on Repository {
        name: nameWithOwner
        stars: stargazerCount
        forks: forkCount
        url
        id
        __typename
      }
    }
    pageInfo {
      endCursor
    }
  }
}
    `;

/**
 * __useFetchReposQuery__
 *
 * To run a query within a React component, call `useFetchReposQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchReposQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchReposQuery({
 *   variables: {
 *      pageSize: // value for 'pageSize'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *   },
 * });
 */
export function useFetchReposQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GraphQLFetchReposQuery, GraphQLFetchReposQueryVariables>) {
        return ApolloReactHooks.useQuery<GraphQLFetchReposQuery, GraphQLFetchReposQueryVariables>(FetchReposDocument, baseOptions);
      }
export function useFetchReposLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GraphQLFetchReposQuery, GraphQLFetchReposQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GraphQLFetchReposQuery, GraphQLFetchReposQueryVariables>(FetchReposDocument, baseOptions);
        }
export type FetchReposQueryHookResult = ReturnType<typeof useFetchReposQuery>;
export type FetchReposLazyQueryHookResult = ReturnType<typeof useFetchReposLazyQuery>;
export type FetchReposQueryResult = ApolloReactCommon.QueryResult<GraphQLFetchReposQuery, GraphQLFetchReposQueryVariables>;
export type GraphQLFetchReposQueryVariables = Exact<{
  pageSize: Scalars['Int'];
  after: Maybe<Scalars['String']>;
  before: Maybe<Scalars['String']>;
}>;


export type GraphQLFetchReposQuery = (
  { readonly __typename?: 'Query' }
  & { readonly search: (
    { readonly __typename?: 'SearchResultItemConnection' }
    & Pick<GraphQLSearchResultItemConnection, 'repositoryCount'>
    & { readonly nodes: Maybe<ReadonlyArray<Maybe<{ readonly __typename?: 'App' } | { readonly __typename?: 'Discussion' } | { readonly __typename?: 'Issue' } | { readonly __typename?: 'MarketplaceListing' } | { readonly __typename?: 'Organization' } | { readonly __typename?: 'PullRequest' } | (
      { readonly __typename: 'Repository' }
      & Pick<GraphQLRepository, 'url' | 'id'>
      & { name: GraphQLRepository['nameWithOwner'], stars: GraphQLRepository['stargazerCount'], forks: GraphQLRepository['forkCount'] }
    ) | { readonly __typename?: 'User' }>>>, readonly pageInfo: (
      { readonly __typename?: 'PageInfo' }
      & Pick<GraphQLPageInfo, 'endCursor'>
    ) }
  ) }
);


      export interface IntrospectionResultData {
        __schema: {
          types: {
            kind: string;
            name: string;
            possibleTypes: {
              name: string;
            }[];
          }[];
        };
      }
      const result: IntrospectionResultData = {
  "__schema": {
    "types": [
      {
        "kind": "INTERFACE",
        "name": "Actor",
        "possibleTypes": [
          {
            "name": "Bot"
          },
          {
            "name": "EnterpriseUserAccount"
          },
          {
            "name": "Mannequin"
          },
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Assignable",
        "possibleTypes": [
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "Assignee",
        "possibleTypes": [
          {
            "name": "Bot"
          },
          {
            "name": "Mannequin"
          },
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "AuditEntry",
        "possibleTypes": [
          {
            "name": "MembersCanDeleteReposClearAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposDisableAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposEnableAuditEntry"
          },
          {
            "name": "OauthApplicationCreateAuditEntry"
          },
          {
            "name": "OrgAddBillingManagerAuditEntry"
          },
          {
            "name": "OrgAddMemberAuditEntry"
          },
          {
            "name": "OrgBlockUserAuditEntry"
          },
          {
            "name": "OrgConfigDisableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "OrgConfigEnableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "OrgCreateAuditEntry"
          },
          {
            "name": "OrgDisableOauthAppRestrictionsAuditEntry"
          },
          {
            "name": "OrgDisableSamlAuditEntry"
          },
          {
            "name": "OrgDisableTwoFactorRequirementAuditEntry"
          },
          {
            "name": "OrgEnableOauthAppRestrictionsAuditEntry"
          },
          {
            "name": "OrgEnableSamlAuditEntry"
          },
          {
            "name": "OrgEnableTwoFactorRequirementAuditEntry"
          },
          {
            "name": "OrgInviteMemberAuditEntry"
          },
          {
            "name": "OrgInviteToBusinessAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessApprovedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessDeniedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessRequestedAuditEntry"
          },
          {
            "name": "OrgRemoveBillingManagerAuditEntry"
          },
          {
            "name": "OrgRemoveMemberAuditEntry"
          },
          {
            "name": "OrgRemoveOutsideCollaboratorAuditEntry"
          },
          {
            "name": "OrgRestoreMemberAuditEntry"
          },
          {
            "name": "OrgUnblockUserAuditEntry"
          },
          {
            "name": "OrgUpdateDefaultRepositoryPermissionAuditEntry"
          },
          {
            "name": "OrgUpdateMemberAuditEntry"
          },
          {
            "name": "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
          },
          {
            "name": "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingDisableAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingEnableAuditEntry"
          },
          {
            "name": "RepoAccessAuditEntry"
          },
          {
            "name": "RepoAddMemberAuditEntry"
          },
          {
            "name": "RepoAddTopicAuditEntry"
          },
          {
            "name": "RepoArchivedAuditEntry"
          },
          {
            "name": "RepoChangeMergeSettingAuditEntry"
          },
          {
            "name": "RepoConfigDisableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigDisableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigEnableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigEnableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigLockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigUnlockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoCreateAuditEntry"
          },
          {
            "name": "RepoDestroyAuditEntry"
          },
          {
            "name": "RepoRemoveMemberAuditEntry"
          },
          {
            "name": "RepoRemoveTopicAuditEntry"
          },
          {
            "name": "RepositoryVisibilityChangeDisableAuditEntry"
          },
          {
            "name": "RepositoryVisibilityChangeEnableAuditEntry"
          },
          {
            "name": "TeamAddMemberAuditEntry"
          },
          {
            "name": "TeamAddRepositoryAuditEntry"
          },
          {
            "name": "TeamChangeParentTeamAuditEntry"
          },
          {
            "name": "TeamRemoveMemberAuditEntry"
          },
          {
            "name": "TeamRemoveRepositoryAuditEntry"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "AuditEntryActor",
        "possibleTypes": [
          {
            "name": "Bot"
          },
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "BranchActorAllowanceActor",
        "possibleTypes": [
          {
            "name": "Team"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Closable",
        "possibleTypes": [
          {
            "name": "Issue"
          },
          {
            "name": "Milestone"
          },
          {
            "name": "Project"
          },
          {
            "name": "ProjectNext"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "Closer",
        "possibleTypes": [
          {
            "name": "Commit"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Comment",
        "possibleTypes": [
          {
            "name": "CommitComment"
          },
          {
            "name": "Discussion"
          },
          {
            "name": "DiscussionComment"
          },
          {
            "name": "GistComment"
          },
          {
            "name": "Issue"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "PullRequestReview"
          },
          {
            "name": "PullRequestReviewComment"
          },
          {
            "name": "TeamDiscussion"
          },
          {
            "name": "TeamDiscussionComment"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Contribution",
        "possibleTypes": [
          {
            "name": "CreatedCommitContribution"
          },
          {
            "name": "CreatedIssueContribution"
          },
          {
            "name": "CreatedPullRequestContribution"
          },
          {
            "name": "CreatedPullRequestReviewContribution"
          },
          {
            "name": "CreatedRepositoryContribution"
          },
          {
            "name": "JoinedGitHubContribution"
          },
          {
            "name": "RestrictedContribution"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "CreatedIssueOrRestrictedContribution",
        "possibleTypes": [
          {
            "name": "CreatedIssueContribution"
          },
          {
            "name": "RestrictedContribution"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "CreatedPullRequestOrRestrictedContribution",
        "possibleTypes": [
          {
            "name": "CreatedPullRequestContribution"
          },
          {
            "name": "RestrictedContribution"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "CreatedRepositoryOrRestrictedContribution",
        "possibleTypes": [
          {
            "name": "CreatedRepositoryContribution"
          },
          {
            "name": "RestrictedContribution"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Deletable",
        "possibleTypes": [
          {
            "name": "CommitComment"
          },
          {
            "name": "Discussion"
          },
          {
            "name": "DiscussionComment"
          },
          {
            "name": "GistComment"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "PullRequestReview"
          },
          {
            "name": "PullRequestReviewComment"
          },
          {
            "name": "TeamDiscussion"
          },
          {
            "name": "TeamDiscussionComment"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "DeploymentReviewer",
        "possibleTypes": [
          {
            "name": "Team"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "EnterpriseAuditEntryData",
        "possibleTypes": [
          {
            "name": "MembersCanDeleteReposClearAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposDisableAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposEnableAuditEntry"
          },
          {
            "name": "OrgInviteToBusinessAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingDisableAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingEnableAuditEntry"
          },
          {
            "name": "RepositoryVisibilityChangeDisableAuditEntry"
          },
          {
            "name": "RepositoryVisibilityChangeEnableAuditEntry"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "EnterpriseMember",
        "possibleTypes": [
          {
            "name": "EnterpriseUserAccount"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "GitObject",
        "possibleTypes": [
          {
            "name": "Blob"
          },
          {
            "name": "Commit"
          },
          {
            "name": "Tag"
          },
          {
            "name": "Tree"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "GitSignature",
        "possibleTypes": [
          {
            "name": "GpgSignature"
          },
          {
            "name": "SmimeSignature"
          },
          {
            "name": "UnknownSignature"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "HovercardContext",
        "possibleTypes": [
          {
            "name": "GenericHovercardContext"
          },
          {
            "name": "OrganizationTeamsHovercardContext"
          },
          {
            "name": "OrganizationsHovercardContext"
          },
          {
            "name": "ReviewStatusHovercardContext"
          },
          {
            "name": "ViewerHovercardContext"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "IpAllowListOwner",
        "possibleTypes": [
          {
            "name": "App"
          },
          {
            "name": "Enterprise"
          },
          {
            "name": "Organization"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "IssueOrPullRequest",
        "possibleTypes": [
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "IssueTimelineItem",
        "possibleTypes": [
          {
            "name": "AssignedEvent"
          },
          {
            "name": "ClosedEvent"
          },
          {
            "name": "Commit"
          },
          {
            "name": "CrossReferencedEvent"
          },
          {
            "name": "DemilestonedEvent"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "LabeledEvent"
          },
          {
            "name": "LockedEvent"
          },
          {
            "name": "MilestonedEvent"
          },
          {
            "name": "ReferencedEvent"
          },
          {
            "name": "RenamedTitleEvent"
          },
          {
            "name": "ReopenedEvent"
          },
          {
            "name": "SubscribedEvent"
          },
          {
            "name": "TransferredEvent"
          },
          {
            "name": "UnassignedEvent"
          },
          {
            "name": "UnlabeledEvent"
          },
          {
            "name": "UnlockedEvent"
          },
          {
            "name": "UnsubscribedEvent"
          },
          {
            "name": "UserBlockedEvent"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "IssueTimelineItems",
        "possibleTypes": [
          {
            "name": "AddedToProjectEvent"
          },
          {
            "name": "AssignedEvent"
          },
          {
            "name": "ClosedEvent"
          },
          {
            "name": "CommentDeletedEvent"
          },
          {
            "name": "ConnectedEvent"
          },
          {
            "name": "ConvertedNoteToIssueEvent"
          },
          {
            "name": "ConvertedToDiscussionEvent"
          },
          {
            "name": "CrossReferencedEvent"
          },
          {
            "name": "DemilestonedEvent"
          },
          {
            "name": "DisconnectedEvent"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "LabeledEvent"
          },
          {
            "name": "LockedEvent"
          },
          {
            "name": "MarkedAsDuplicateEvent"
          },
          {
            "name": "MentionedEvent"
          },
          {
            "name": "MilestonedEvent"
          },
          {
            "name": "MovedColumnsInProjectEvent"
          },
          {
            "name": "PinnedEvent"
          },
          {
            "name": "ReferencedEvent"
          },
          {
            "name": "RemovedFromProjectEvent"
          },
          {
            "name": "RenamedTitleEvent"
          },
          {
            "name": "ReopenedEvent"
          },
          {
            "name": "SubscribedEvent"
          },
          {
            "name": "TransferredEvent"
          },
          {
            "name": "UnassignedEvent"
          },
          {
            "name": "UnlabeledEvent"
          },
          {
            "name": "UnlockedEvent"
          },
          {
            "name": "UnmarkedAsDuplicateEvent"
          },
          {
            "name": "UnpinnedEvent"
          },
          {
            "name": "UnsubscribedEvent"
          },
          {
            "name": "UserBlockedEvent"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Labelable",
        "possibleTypes": [
          {
            "name": "Discussion"
          },
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Lockable",
        "possibleTypes": [
          {
            "name": "Discussion"
          },
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "MemberStatusable",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "Team"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Migration",
        "possibleTypes": [
          {
            "name": "RepositoryMigration"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "MilestoneItem",
        "possibleTypes": [
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Minimizable",
        "possibleTypes": [
          {
            "name": "CommitComment"
          },
          {
            "name": "DiscussionComment"
          },
          {
            "name": "GistComment"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "PullRequestReviewComment"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Node",
        "possibleTypes": [
          {
            "name": "AddedToProjectEvent"
          },
          {
            "name": "App"
          },
          {
            "name": "AssignedEvent"
          },
          {
            "name": "AutoMergeDisabledEvent"
          },
          {
            "name": "AutoMergeEnabledEvent"
          },
          {
            "name": "AutoRebaseEnabledEvent"
          },
          {
            "name": "AutoSquashEnabledEvent"
          },
          {
            "name": "AutomaticBaseChangeFailedEvent"
          },
          {
            "name": "AutomaticBaseChangeSucceededEvent"
          },
          {
            "name": "BaseRefChangedEvent"
          },
          {
            "name": "BaseRefDeletedEvent"
          },
          {
            "name": "BaseRefForcePushedEvent"
          },
          {
            "name": "Blob"
          },
          {
            "name": "Bot"
          },
          {
            "name": "BranchProtectionRule"
          },
          {
            "name": "BypassForcePushAllowance"
          },
          {
            "name": "BypassPullRequestAllowance"
          },
          {
            "name": "CWE"
          },
          {
            "name": "CheckRun"
          },
          {
            "name": "CheckSuite"
          },
          {
            "name": "ClosedEvent"
          },
          {
            "name": "CodeOfConduct"
          },
          {
            "name": "CommentDeletedEvent"
          },
          {
            "name": "Commit"
          },
          {
            "name": "CommitComment"
          },
          {
            "name": "CommitCommentThread"
          },
          {
            "name": "ConnectedEvent"
          },
          {
            "name": "ConvertToDraftEvent"
          },
          {
            "name": "ConvertedNoteToIssueEvent"
          },
          {
            "name": "ConvertedToDiscussionEvent"
          },
          {
            "name": "CrossReferencedEvent"
          },
          {
            "name": "DemilestonedEvent"
          },
          {
            "name": "DeployKey"
          },
          {
            "name": "DeployedEvent"
          },
          {
            "name": "Deployment"
          },
          {
            "name": "DeploymentEnvironmentChangedEvent"
          },
          {
            "name": "DeploymentReview"
          },
          {
            "name": "DeploymentStatus"
          },
          {
            "name": "DisconnectedEvent"
          },
          {
            "name": "Discussion"
          },
          {
            "name": "DiscussionCategory"
          },
          {
            "name": "DiscussionComment"
          },
          {
            "name": "DraftIssue"
          },
          {
            "name": "Enterprise"
          },
          {
            "name": "EnterpriseAdministratorInvitation"
          },
          {
            "name": "EnterpriseIdentityProvider"
          },
          {
            "name": "EnterpriseRepositoryInfo"
          },
          {
            "name": "EnterpriseServerInstallation"
          },
          {
            "name": "EnterpriseServerUserAccount"
          },
          {
            "name": "EnterpriseServerUserAccountEmail"
          },
          {
            "name": "EnterpriseServerUserAccountsUpload"
          },
          {
            "name": "EnterpriseUserAccount"
          },
          {
            "name": "Environment"
          },
          {
            "name": "ExternalIdentity"
          },
          {
            "name": "Gist"
          },
          {
            "name": "GistComment"
          },
          {
            "name": "HeadRefDeletedEvent"
          },
          {
            "name": "HeadRefForcePushedEvent"
          },
          {
            "name": "HeadRefRestoredEvent"
          },
          {
            "name": "IpAllowListEntry"
          },
          {
            "name": "Issue"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "Label"
          },
          {
            "name": "LabeledEvent"
          },
          {
            "name": "Language"
          },
          {
            "name": "License"
          },
          {
            "name": "LockedEvent"
          },
          {
            "name": "Mannequin"
          },
          {
            "name": "MarkedAsDuplicateEvent"
          },
          {
            "name": "MarketplaceCategory"
          },
          {
            "name": "MarketplaceListing"
          },
          {
            "name": "MembersCanDeleteReposClearAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposDisableAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposEnableAuditEntry"
          },
          {
            "name": "MentionedEvent"
          },
          {
            "name": "MergedEvent"
          },
          {
            "name": "MigrationSource"
          },
          {
            "name": "Milestone"
          },
          {
            "name": "MilestonedEvent"
          },
          {
            "name": "MovedColumnsInProjectEvent"
          },
          {
            "name": "OIDCProvider"
          },
          {
            "name": "OauthApplicationCreateAuditEntry"
          },
          {
            "name": "OrgAddBillingManagerAuditEntry"
          },
          {
            "name": "OrgAddMemberAuditEntry"
          },
          {
            "name": "OrgBlockUserAuditEntry"
          },
          {
            "name": "OrgConfigDisableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "OrgConfigEnableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "OrgCreateAuditEntry"
          },
          {
            "name": "OrgDisableOauthAppRestrictionsAuditEntry"
          },
          {
            "name": "OrgDisableSamlAuditEntry"
          },
          {
            "name": "OrgDisableTwoFactorRequirementAuditEntry"
          },
          {
            "name": "OrgEnableOauthAppRestrictionsAuditEntry"
          },
          {
            "name": "OrgEnableSamlAuditEntry"
          },
          {
            "name": "OrgEnableTwoFactorRequirementAuditEntry"
          },
          {
            "name": "OrgInviteMemberAuditEntry"
          },
          {
            "name": "OrgInviteToBusinessAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessApprovedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessDeniedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessRequestedAuditEntry"
          },
          {
            "name": "OrgRemoveBillingManagerAuditEntry"
          },
          {
            "name": "OrgRemoveMemberAuditEntry"
          },
          {
            "name": "OrgRemoveOutsideCollaboratorAuditEntry"
          },
          {
            "name": "OrgRestoreMemberAuditEntry"
          },
          {
            "name": "OrgUnblockUserAuditEntry"
          },
          {
            "name": "OrgUpdateDefaultRepositoryPermissionAuditEntry"
          },
          {
            "name": "OrgUpdateMemberAuditEntry"
          },
          {
            "name": "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
          },
          {
            "name": "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
          },
          {
            "name": "Organization"
          },
          {
            "name": "OrganizationIdentityProvider"
          },
          {
            "name": "OrganizationInvitation"
          },
          {
            "name": "Package"
          },
          {
            "name": "PackageFile"
          },
          {
            "name": "PackageTag"
          },
          {
            "name": "PackageVersion"
          },
          {
            "name": "PinnedDiscussion"
          },
          {
            "name": "PinnedEvent"
          },
          {
            "name": "PinnedIssue"
          },
          {
            "name": "PrivateRepositoryForkingDisableAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingEnableAuditEntry"
          },
          {
            "name": "Project"
          },
          {
            "name": "ProjectCard"
          },
          {
            "name": "ProjectColumn"
          },
          {
            "name": "ProjectNext"
          },
          {
            "name": "ProjectNextField"
          },
          {
            "name": "ProjectNextItem"
          },
          {
            "name": "ProjectNextItemFieldValue"
          },
          {
            "name": "ProjectView"
          },
          {
            "name": "PublicKey"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "PullRequestCommit"
          },
          {
            "name": "PullRequestCommitCommentThread"
          },
          {
            "name": "PullRequestReview"
          },
          {
            "name": "PullRequestReviewComment"
          },
          {
            "name": "PullRequestReviewThread"
          },
          {
            "name": "Push"
          },
          {
            "name": "PushAllowance"
          },
          {
            "name": "Reaction"
          },
          {
            "name": "ReadyForReviewEvent"
          },
          {
            "name": "Ref"
          },
          {
            "name": "ReferencedEvent"
          },
          {
            "name": "Release"
          },
          {
            "name": "ReleaseAsset"
          },
          {
            "name": "RemovedFromProjectEvent"
          },
          {
            "name": "RenamedTitleEvent"
          },
          {
            "name": "ReopenedEvent"
          },
          {
            "name": "RepoAccessAuditEntry"
          },
          {
            "name": "RepoAddMemberAuditEntry"
          },
          {
            "name": "RepoAddTopicAuditEntry"
          },
          {
            "name": "RepoArchivedAuditEntry"
          },
          {
            "name": "RepoChangeMergeSettingAuditEntry"
          },
          {
            "name": "RepoConfigDisableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigDisableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigEnableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigEnableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigLockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigUnlockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoCreateAuditEntry"
          },
          {
            "name": "RepoDestroyAuditEntry"
          },
          {
            "name": "RepoRemoveMemberAuditEntry"
          },
          {
            "name": "RepoRemoveTopicAuditEntry"
          },
          {
            "name": "Repository"
          },
          {
            "name": "RepositoryInvitation"
          },
          {
            "name": "RepositoryMigration"
          },
          {
            "name": "RepositoryTopic"
          },
          {
            "name": "RepositoryVisibilityChangeDisableAuditEntry"
          },
          {
            "name": "RepositoryVisibilityChangeEnableAuditEntry"
          },
          {
            "name": "RepositoryVulnerabilityAlert"
          },
          {
            "name": "ReviewDismissalAllowance"
          },
          {
            "name": "ReviewDismissedEvent"
          },
          {
            "name": "ReviewRequest"
          },
          {
            "name": "ReviewRequestRemovedEvent"
          },
          {
            "name": "ReviewRequestedEvent"
          },
          {
            "name": "SavedReply"
          },
          {
            "name": "SecurityAdvisory"
          },
          {
            "name": "SponsorsActivity"
          },
          {
            "name": "SponsorsListing"
          },
          {
            "name": "SponsorsTier"
          },
          {
            "name": "Sponsorship"
          },
          {
            "name": "SponsorshipNewsletter"
          },
          {
            "name": "Status"
          },
          {
            "name": "StatusCheckRollup"
          },
          {
            "name": "StatusContext"
          },
          {
            "name": "SubscribedEvent"
          },
          {
            "name": "Tag"
          },
          {
            "name": "Team"
          },
          {
            "name": "TeamAddMemberAuditEntry"
          },
          {
            "name": "TeamAddRepositoryAuditEntry"
          },
          {
            "name": "TeamChangeParentTeamAuditEntry"
          },
          {
            "name": "TeamDiscussion"
          },
          {
            "name": "TeamDiscussionComment"
          },
          {
            "name": "TeamRemoveMemberAuditEntry"
          },
          {
            "name": "TeamRemoveRepositoryAuditEntry"
          },
          {
            "name": "Topic"
          },
          {
            "name": "TransferredEvent"
          },
          {
            "name": "Tree"
          },
          {
            "name": "UnassignedEvent"
          },
          {
            "name": "UnlabeledEvent"
          },
          {
            "name": "UnlockedEvent"
          },
          {
            "name": "UnmarkedAsDuplicateEvent"
          },
          {
            "name": "UnpinnedEvent"
          },
          {
            "name": "UnsubscribedEvent"
          },
          {
            "name": "User"
          },
          {
            "name": "UserBlockedEvent"
          },
          {
            "name": "UserContentEdit"
          },
          {
            "name": "UserStatus"
          },
          {
            "name": "VerifiableDomain"
          },
          {
            "name": "Workflow"
          },
          {
            "name": "WorkflowRun"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "OauthApplicationAuditEntryData",
        "possibleTypes": [
          {
            "name": "OauthApplicationCreateAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessApprovedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessDeniedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessRequestedAuditEntry"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "OrgRestoreMemberAuditEntryMembership",
        "possibleTypes": [
          {
            "name": "OrgRestoreMemberMembershipOrganizationAuditEntryData"
          },
          {
            "name": "OrgRestoreMemberMembershipRepositoryAuditEntryData"
          },
          {
            "name": "OrgRestoreMemberMembershipTeamAuditEntryData"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "OrganizationAuditEntry",
        "possibleTypes": [
          {
            "name": "MembersCanDeleteReposClearAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposDisableAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposEnableAuditEntry"
          },
          {
            "name": "OauthApplicationCreateAuditEntry"
          },
          {
            "name": "OrgAddBillingManagerAuditEntry"
          },
          {
            "name": "OrgAddMemberAuditEntry"
          },
          {
            "name": "OrgBlockUserAuditEntry"
          },
          {
            "name": "OrgConfigDisableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "OrgConfigEnableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "OrgCreateAuditEntry"
          },
          {
            "name": "OrgDisableOauthAppRestrictionsAuditEntry"
          },
          {
            "name": "OrgDisableSamlAuditEntry"
          },
          {
            "name": "OrgDisableTwoFactorRequirementAuditEntry"
          },
          {
            "name": "OrgEnableOauthAppRestrictionsAuditEntry"
          },
          {
            "name": "OrgEnableSamlAuditEntry"
          },
          {
            "name": "OrgEnableTwoFactorRequirementAuditEntry"
          },
          {
            "name": "OrgInviteMemberAuditEntry"
          },
          {
            "name": "OrgInviteToBusinessAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessApprovedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessDeniedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessRequestedAuditEntry"
          },
          {
            "name": "OrgRemoveBillingManagerAuditEntry"
          },
          {
            "name": "OrgRemoveMemberAuditEntry"
          },
          {
            "name": "OrgRemoveOutsideCollaboratorAuditEntry"
          },
          {
            "name": "OrgRestoreMemberAuditEntry"
          },
          {
            "name": "OrgUnblockUserAuditEntry"
          },
          {
            "name": "OrgUpdateDefaultRepositoryPermissionAuditEntry"
          },
          {
            "name": "OrgUpdateMemberAuditEntry"
          },
          {
            "name": "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
          },
          {
            "name": "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingDisableAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingEnableAuditEntry"
          },
          {
            "name": "RepoAccessAuditEntry"
          },
          {
            "name": "RepoAddMemberAuditEntry"
          },
          {
            "name": "RepoAddTopicAuditEntry"
          },
          {
            "name": "RepoArchivedAuditEntry"
          },
          {
            "name": "RepoChangeMergeSettingAuditEntry"
          },
          {
            "name": "RepoConfigDisableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigDisableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigEnableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigEnableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigLockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigUnlockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoCreateAuditEntry"
          },
          {
            "name": "RepoDestroyAuditEntry"
          },
          {
            "name": "RepoRemoveMemberAuditEntry"
          },
          {
            "name": "RepoRemoveTopicAuditEntry"
          },
          {
            "name": "RepositoryVisibilityChangeDisableAuditEntry"
          },
          {
            "name": "RepositoryVisibilityChangeEnableAuditEntry"
          },
          {
            "name": "TeamAddMemberAuditEntry"
          },
          {
            "name": "TeamAddRepositoryAuditEntry"
          },
          {
            "name": "TeamChangeParentTeamAuditEntry"
          },
          {
            "name": "TeamRemoveMemberAuditEntry"
          },
          {
            "name": "TeamRemoveRepositoryAuditEntry"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "OrganizationAuditEntryData",
        "possibleTypes": [
          {
            "name": "MembersCanDeleteReposClearAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposDisableAuditEntry"
          },
          {
            "name": "MembersCanDeleteReposEnableAuditEntry"
          },
          {
            "name": "OauthApplicationCreateAuditEntry"
          },
          {
            "name": "OrgAddBillingManagerAuditEntry"
          },
          {
            "name": "OrgAddMemberAuditEntry"
          },
          {
            "name": "OrgBlockUserAuditEntry"
          },
          {
            "name": "OrgConfigDisableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "OrgConfigEnableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "OrgCreateAuditEntry"
          },
          {
            "name": "OrgDisableOauthAppRestrictionsAuditEntry"
          },
          {
            "name": "OrgDisableSamlAuditEntry"
          },
          {
            "name": "OrgDisableTwoFactorRequirementAuditEntry"
          },
          {
            "name": "OrgEnableOauthAppRestrictionsAuditEntry"
          },
          {
            "name": "OrgEnableSamlAuditEntry"
          },
          {
            "name": "OrgEnableTwoFactorRequirementAuditEntry"
          },
          {
            "name": "OrgInviteMemberAuditEntry"
          },
          {
            "name": "OrgInviteToBusinessAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessApprovedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessDeniedAuditEntry"
          },
          {
            "name": "OrgOauthAppAccessRequestedAuditEntry"
          },
          {
            "name": "OrgRemoveBillingManagerAuditEntry"
          },
          {
            "name": "OrgRemoveMemberAuditEntry"
          },
          {
            "name": "OrgRemoveOutsideCollaboratorAuditEntry"
          },
          {
            "name": "OrgRestoreMemberAuditEntry"
          },
          {
            "name": "OrgRestoreMemberMembershipOrganizationAuditEntryData"
          },
          {
            "name": "OrgUnblockUserAuditEntry"
          },
          {
            "name": "OrgUpdateDefaultRepositoryPermissionAuditEntry"
          },
          {
            "name": "OrgUpdateMemberAuditEntry"
          },
          {
            "name": "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
          },
          {
            "name": "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingDisableAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingEnableAuditEntry"
          },
          {
            "name": "RepoAccessAuditEntry"
          },
          {
            "name": "RepoAddMemberAuditEntry"
          },
          {
            "name": "RepoAddTopicAuditEntry"
          },
          {
            "name": "RepoArchivedAuditEntry"
          },
          {
            "name": "RepoChangeMergeSettingAuditEntry"
          },
          {
            "name": "RepoConfigDisableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigDisableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigEnableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigEnableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigLockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigUnlockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoCreateAuditEntry"
          },
          {
            "name": "RepoDestroyAuditEntry"
          },
          {
            "name": "RepoRemoveMemberAuditEntry"
          },
          {
            "name": "RepoRemoveTopicAuditEntry"
          },
          {
            "name": "RepositoryVisibilityChangeDisableAuditEntry"
          },
          {
            "name": "RepositoryVisibilityChangeEnableAuditEntry"
          },
          {
            "name": "TeamAddMemberAuditEntry"
          },
          {
            "name": "TeamAddRepositoryAuditEntry"
          },
          {
            "name": "TeamChangeParentTeamAuditEntry"
          },
          {
            "name": "TeamRemoveMemberAuditEntry"
          },
          {
            "name": "TeamRemoveRepositoryAuditEntry"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "PackageOwner",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "Repository"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "PermissionGranter",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "Repository"
          },
          {
            "name": "Team"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "PinnableItem",
        "possibleTypes": [
          {
            "name": "Gist"
          },
          {
            "name": "Repository"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "ProfileOwner",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "ProjectCardItem",
        "possibleTypes": [
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "ProjectNextFieldCommon",
        "possibleTypes": [
          {
            "name": "ProjectNextField"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "ProjectNextItemContent",
        "possibleTypes": [
          {
            "name": "DraftIssue"
          },
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "ProjectNextOwner",
        "possibleTypes": [
          {
            "name": "Issue"
          },
          {
            "name": "Organization"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "ProjectOwner",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "Repository"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "PullRequestTimelineItem",
        "possibleTypes": [
          {
            "name": "AssignedEvent"
          },
          {
            "name": "BaseRefDeletedEvent"
          },
          {
            "name": "BaseRefForcePushedEvent"
          },
          {
            "name": "ClosedEvent"
          },
          {
            "name": "Commit"
          },
          {
            "name": "CommitCommentThread"
          },
          {
            "name": "CrossReferencedEvent"
          },
          {
            "name": "DemilestonedEvent"
          },
          {
            "name": "DeployedEvent"
          },
          {
            "name": "DeploymentEnvironmentChangedEvent"
          },
          {
            "name": "HeadRefDeletedEvent"
          },
          {
            "name": "HeadRefForcePushedEvent"
          },
          {
            "name": "HeadRefRestoredEvent"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "LabeledEvent"
          },
          {
            "name": "LockedEvent"
          },
          {
            "name": "MergedEvent"
          },
          {
            "name": "MilestonedEvent"
          },
          {
            "name": "PullRequestReview"
          },
          {
            "name": "PullRequestReviewComment"
          },
          {
            "name": "PullRequestReviewThread"
          },
          {
            "name": "ReferencedEvent"
          },
          {
            "name": "RenamedTitleEvent"
          },
          {
            "name": "ReopenedEvent"
          },
          {
            "name": "ReviewDismissedEvent"
          },
          {
            "name": "ReviewRequestRemovedEvent"
          },
          {
            "name": "ReviewRequestedEvent"
          },
          {
            "name": "SubscribedEvent"
          },
          {
            "name": "UnassignedEvent"
          },
          {
            "name": "UnlabeledEvent"
          },
          {
            "name": "UnlockedEvent"
          },
          {
            "name": "UnsubscribedEvent"
          },
          {
            "name": "UserBlockedEvent"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "PullRequestTimelineItems",
        "possibleTypes": [
          {
            "name": "AddedToProjectEvent"
          },
          {
            "name": "AssignedEvent"
          },
          {
            "name": "AutoMergeDisabledEvent"
          },
          {
            "name": "AutoMergeEnabledEvent"
          },
          {
            "name": "AutoRebaseEnabledEvent"
          },
          {
            "name": "AutoSquashEnabledEvent"
          },
          {
            "name": "AutomaticBaseChangeFailedEvent"
          },
          {
            "name": "AutomaticBaseChangeSucceededEvent"
          },
          {
            "name": "BaseRefChangedEvent"
          },
          {
            "name": "BaseRefDeletedEvent"
          },
          {
            "name": "BaseRefForcePushedEvent"
          },
          {
            "name": "ClosedEvent"
          },
          {
            "name": "CommentDeletedEvent"
          },
          {
            "name": "ConnectedEvent"
          },
          {
            "name": "ConvertToDraftEvent"
          },
          {
            "name": "ConvertedNoteToIssueEvent"
          },
          {
            "name": "ConvertedToDiscussionEvent"
          },
          {
            "name": "CrossReferencedEvent"
          },
          {
            "name": "DemilestonedEvent"
          },
          {
            "name": "DeployedEvent"
          },
          {
            "name": "DeploymentEnvironmentChangedEvent"
          },
          {
            "name": "DisconnectedEvent"
          },
          {
            "name": "HeadRefDeletedEvent"
          },
          {
            "name": "HeadRefForcePushedEvent"
          },
          {
            "name": "HeadRefRestoredEvent"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "LabeledEvent"
          },
          {
            "name": "LockedEvent"
          },
          {
            "name": "MarkedAsDuplicateEvent"
          },
          {
            "name": "MentionedEvent"
          },
          {
            "name": "MergedEvent"
          },
          {
            "name": "MilestonedEvent"
          },
          {
            "name": "MovedColumnsInProjectEvent"
          },
          {
            "name": "PinnedEvent"
          },
          {
            "name": "PullRequestCommit"
          },
          {
            "name": "PullRequestCommitCommentThread"
          },
          {
            "name": "PullRequestReview"
          },
          {
            "name": "PullRequestReviewThread"
          },
          {
            "name": "PullRequestRevisionMarker"
          },
          {
            "name": "ReadyForReviewEvent"
          },
          {
            "name": "ReferencedEvent"
          },
          {
            "name": "RemovedFromProjectEvent"
          },
          {
            "name": "RenamedTitleEvent"
          },
          {
            "name": "ReopenedEvent"
          },
          {
            "name": "ReviewDismissedEvent"
          },
          {
            "name": "ReviewRequestRemovedEvent"
          },
          {
            "name": "ReviewRequestedEvent"
          },
          {
            "name": "SubscribedEvent"
          },
          {
            "name": "TransferredEvent"
          },
          {
            "name": "UnassignedEvent"
          },
          {
            "name": "UnlabeledEvent"
          },
          {
            "name": "UnlockedEvent"
          },
          {
            "name": "UnmarkedAsDuplicateEvent"
          },
          {
            "name": "UnpinnedEvent"
          },
          {
            "name": "UnsubscribedEvent"
          },
          {
            "name": "UserBlockedEvent"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "PushAllowanceActor",
        "possibleTypes": [
          {
            "name": "App"
          },
          {
            "name": "Team"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Reactable",
        "possibleTypes": [
          {
            "name": "CommitComment"
          },
          {
            "name": "Discussion"
          },
          {
            "name": "DiscussionComment"
          },
          {
            "name": "Issue"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "PullRequestReview"
          },
          {
            "name": "PullRequestReviewComment"
          },
          {
            "name": "Release"
          },
          {
            "name": "TeamDiscussion"
          },
          {
            "name": "TeamDiscussionComment"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "Reactor",
        "possibleTypes": [
          {
            "name": "Bot"
          },
          {
            "name": "Mannequin"
          },
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "ReferencedSubject",
        "possibleTypes": [
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "RenamedTitleSubject",
        "possibleTypes": [
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "RepositoryAuditEntryData",
        "possibleTypes": [
          {
            "name": "OrgRestoreMemberMembershipRepositoryAuditEntryData"
          },
          {
            "name": "PrivateRepositoryForkingDisableAuditEntry"
          },
          {
            "name": "PrivateRepositoryForkingEnableAuditEntry"
          },
          {
            "name": "RepoAccessAuditEntry"
          },
          {
            "name": "RepoAddMemberAuditEntry"
          },
          {
            "name": "RepoAddTopicAuditEntry"
          },
          {
            "name": "RepoArchivedAuditEntry"
          },
          {
            "name": "RepoChangeMergeSettingAuditEntry"
          },
          {
            "name": "RepoConfigDisableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigDisableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigEnableAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigEnableCollaboratorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableContributorsOnlyAuditEntry"
          },
          {
            "name": "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          },
          {
            "name": "RepoConfigLockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoConfigUnlockAnonymousGitAccessAuditEntry"
          },
          {
            "name": "RepoCreateAuditEntry"
          },
          {
            "name": "RepoDestroyAuditEntry"
          },
          {
            "name": "RepoRemoveMemberAuditEntry"
          },
          {
            "name": "RepoRemoveTopicAuditEntry"
          },
          {
            "name": "TeamAddRepositoryAuditEntry"
          },
          {
            "name": "TeamRemoveRepositoryAuditEntry"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "RepositoryDiscussionAuthor",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "RepositoryDiscussionCommentAuthor",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "RepositoryInfo",
        "possibleTypes": [
          {
            "name": "Repository"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "RepositoryNode",
        "possibleTypes": [
          {
            "name": "CommitComment"
          },
          {
            "name": "CommitCommentThread"
          },
          {
            "name": "DependabotUpdate"
          },
          {
            "name": "Discussion"
          },
          {
            "name": "DiscussionCategory"
          },
          {
            "name": "Issue"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "PinnedDiscussion"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "PullRequestCommitCommentThread"
          },
          {
            "name": "PullRequestReview"
          },
          {
            "name": "PullRequestReviewComment"
          },
          {
            "name": "RepositoryVulnerabilityAlert"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "RepositoryOwner",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "RequestedReviewer",
        "possibleTypes": [
          {
            "name": "Mannequin"
          },
          {
            "name": "Team"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "RequirableByPullRequest",
        "possibleTypes": [
          {
            "name": "CheckRun"
          },
          {
            "name": "StatusContext"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "ReviewDismissalAllowanceActor",
        "possibleTypes": [
          {
            "name": "Team"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "SearchResultItem",
        "possibleTypes": [
          {
            "name": "App"
          },
          {
            "name": "Discussion"
          },
          {
            "name": "Issue"
          },
          {
            "name": "MarketplaceListing"
          },
          {
            "name": "Organization"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "Repository"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "Sponsor",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Sponsorable",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "SponsorableItem",
        "possibleTypes": [
          {
            "name": "Organization"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Starrable",
        "possibleTypes": [
          {
            "name": "Gist"
          },
          {
            "name": "Repository"
          },
          {
            "name": "Topic"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "StatusCheckRollupContext",
        "possibleTypes": [
          {
            "name": "CheckRun"
          },
          {
            "name": "StatusContext"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Subscribable",
        "possibleTypes": [
          {
            "name": "Commit"
          },
          {
            "name": "Discussion"
          },
          {
            "name": "Issue"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "Repository"
          },
          {
            "name": "Team"
          },
          {
            "name": "TeamDiscussion"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "TeamAuditEntryData",
        "possibleTypes": [
          {
            "name": "OrgRestoreMemberMembershipTeamAuditEntryData"
          },
          {
            "name": "TeamAddMemberAuditEntry"
          },
          {
            "name": "TeamAddRepositoryAuditEntry"
          },
          {
            "name": "TeamChangeParentTeamAuditEntry"
          },
          {
            "name": "TeamRemoveMemberAuditEntry"
          },
          {
            "name": "TeamRemoveRepositoryAuditEntry"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "TopicAuditEntryData",
        "possibleTypes": [
          {
            "name": "RepoAddTopicAuditEntry"
          },
          {
            "name": "RepoRemoveTopicAuditEntry"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "UniformResourceLocatable",
        "possibleTypes": [
          {
            "name": "Bot"
          },
          {
            "name": "CheckRun"
          },
          {
            "name": "ClosedEvent"
          },
          {
            "name": "Commit"
          },
          {
            "name": "ConvertToDraftEvent"
          },
          {
            "name": "CrossReferencedEvent"
          },
          {
            "name": "Gist"
          },
          {
            "name": "Issue"
          },
          {
            "name": "Mannequin"
          },
          {
            "name": "MergedEvent"
          },
          {
            "name": "Milestone"
          },
          {
            "name": "Organization"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "PullRequestCommit"
          },
          {
            "name": "ReadyForReviewEvent"
          },
          {
            "name": "Release"
          },
          {
            "name": "Repository"
          },
          {
            "name": "RepositoryTopic"
          },
          {
            "name": "ReviewDismissedEvent"
          },
          {
            "name": "TeamDiscussion"
          },
          {
            "name": "TeamDiscussionComment"
          },
          {
            "name": "User"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Updatable",
        "possibleTypes": [
          {
            "name": "CommitComment"
          },
          {
            "name": "Discussion"
          },
          {
            "name": "DiscussionComment"
          },
          {
            "name": "GistComment"
          },
          {
            "name": "Issue"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "Project"
          },
          {
            "name": "ProjectNext"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "PullRequestReview"
          },
          {
            "name": "PullRequestReviewComment"
          },
          {
            "name": "TeamDiscussion"
          },
          {
            "name": "TeamDiscussionComment"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "UpdatableComment",
        "possibleTypes": [
          {
            "name": "CommitComment"
          },
          {
            "name": "DiscussionComment"
          },
          {
            "name": "GistComment"
          },
          {
            "name": "Issue"
          },
          {
            "name": "IssueComment"
          },
          {
            "name": "PullRequest"
          },
          {
            "name": "PullRequestReview"
          },
          {
            "name": "PullRequestReviewComment"
          },
          {
            "name": "TeamDiscussion"
          },
          {
            "name": "TeamDiscussionComment"
          }
        ]
      },
      {
        "kind": "UNION",
        "name": "VerifiableDomainOwner",
        "possibleTypes": [
          {
            "name": "Enterprise"
          },
          {
            "name": "Organization"
          }
        ]
      },
      {
        "kind": "INTERFACE",
        "name": "Votable",
        "possibleTypes": [
          {
            "name": "Discussion"
          },
          {
            "name": "DiscussionComment"
          }
        ]
      }
    ]
  }
};
      export default result;
    